
SPI_FullDuplex_ComPolling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e78  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002000  08002000  00012000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002018  08002018  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08002018  08002018  00012018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002020  08002020  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002020  08002020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002024  08002024  00012024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000000ec  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006c8d  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014e2  00000000  00000000  00026d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000006b8  00000000  00000000  00028278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004fa  00000000  00000000  00028930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f72d  00000000  00000000  00028e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007c72  00000000  00000000  00048557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c06aa  00000000  00000000  000501c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001a04  00000000  00000000  00110874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a4  00000000  00000000  00112278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001fe8 	.word	0x08001fe8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08001fe8 	.word	0x08001fe8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08c      	sub	sp, #48	; 0x30
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d10e      	bne.n	80004f2 <BSP_LED_Init+0x2e>
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
 80004d8:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <BSP_LED_Init+0xe4>)
 80004da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004dc:	4a32      	ldr	r2, [pc, #200]	; (80005a8 <BSP_LED_Init+0xe4>)
 80004de:	f043 0308 	orr.w	r3, r3, #8
 80004e2:	6313      	str	r3, [r2, #48]	; 0x30
 80004e4:	4b30      	ldr	r3, [pc, #192]	; (80005a8 <BSP_LED_Init+0xe4>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	f003 0308 	and.w	r3, r3, #8
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	e034      	b.n	800055c <BSP_LED_Init+0x98>
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d10e      	bne.n	8000516 <BSP_LED_Init+0x52>
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	4b2a      	ldr	r3, [pc, #168]	; (80005a8 <BSP_LED_Init+0xe4>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <BSP_LED_Init+0xe4>)
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <BSP_LED_Init+0xe4>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050c:	f003 0308 	and.w	r3, r3, #8
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	697b      	ldr	r3, [r7, #20]
 8000514:	e022      	b.n	800055c <BSP_LED_Init+0x98>
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	2b02      	cmp	r3, #2
 800051a:	d10e      	bne.n	800053a <BSP_LED_Init+0x76>
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <BSP_LED_Init+0xe4>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a20      	ldr	r2, [pc, #128]	; (80005a8 <BSP_LED_Init+0xe4>)
 8000526:	f043 0308 	orr.w	r3, r3, #8
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <BSP_LED_Init+0xe4>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	f003 0308 	and.w	r3, r3, #8
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	e010      	b.n	800055c <BSP_LED_Init+0x98>
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d10d      	bne.n	800055c <BSP_LED_Init+0x98>
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <BSP_LED_Init+0xe4>)
 8000546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000548:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <BSP_LED_Init+0xe4>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6313      	str	r3, [r2, #48]	; 0x30
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <BSP_LED_Init+0xe4>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	4a13      	ldr	r2, [pc, #76]	; (80005ac <BSP_LED_Init+0xe8>)
 8000560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000564:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000566:	2301      	movs	r3, #1
 8000568:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056a:	2301      	movs	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800056e:	2302      	movs	r3, #2
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <BSP_LED_Init+0xec>)
 8000576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057a:	f107 021c 	add.w	r2, r7, #28
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fa0b 	bl	800099c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	4a09      	ldr	r2, [pc, #36]	; (80005b0 <BSP_LED_Init+0xec>)
 800058a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <BSP_LED_Init+0xe8>)
 8000592:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000596:	2200      	movs	r2, #0
 8000598:	4619      	mov	r1, r3
 800059a:	f000 fb9b 	bl	8000cd4 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40023800 	.word	0x40023800
 80005ac:	08002000 	.word	0x08002000
 80005b0:	20000000 	.word	0x20000000

080005b4 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <BSP_LED_On+0x2c>)
 80005c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <BSP_LED_On+0x30>)
 80005ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	f000 fb7f 	bl	8000cd4 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000
 80005e4:	08002000 	.word	0x08002000

080005e8 <BSP_LED_Off>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <BSP_LED_Off+0x2c>)
 80005f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <BSP_LED_Off+0x30>)
 80005fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000602:	2200      	movs	r2, #0
 8000604:	4619      	mov	r1, r3
 8000606:	f000 fb65 	bl	8000cd4 <HAL_GPIO_WritePin>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000000 	.word	0x20000000
 8000618:	08002000 	.word	0x08002000

0800061c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <SystemInit+0x60>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <SystemInit+0x60>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <SystemInit+0x64>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <SystemInit+0x64>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <SystemInit+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <SystemInit+0x64>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <SystemInit+0x64>)
 8000648:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800064c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000650:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <SystemInit+0x64>)
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <SystemInit+0x68>)
 8000656:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <SystemInit+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a08      	ldr	r2, [pc, #32]	; (8000680 <SystemInit+0x64>)
 800065e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000662:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <SystemInit+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800066a:	4b04      	ldr	r3, [pc, #16]	; (800067c <SystemInit+0x60>)
 800066c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000670:	609a      	str	r2, [r3, #8]
#endif
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00
 8000680:	40023800 	.word	0x40023800
 8000684:	24003010 	.word	0x24003010

08000688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_Init+0x34>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <HAL_Init+0x34>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_Init+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_Init+0x34>)
 800069e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006a2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f945 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f810 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f000 f806 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023c00 	.word	0x40023c00

080006c0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f947 	bl	8000982 <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f91d 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	; (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000010 	.word	0x20000010
 8000728:	20000018 	.word	0x20000018
 800072c:	20000014 	.word	0x20000014

08000730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_IncTick+0x20>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x24>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_IncTick+0x24>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000018 	.word	0x20000018
 8000754:	200000ac 	.word	0x200000ac

08000758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  return uwTick;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetTick+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000ac 	.word	0x200000ac

08000770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000778:	f7ff ffee 	bl	8000758 <HAL_GetTick>
 800077c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000788:	d005      	beq.n	8000796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800078a:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <HAL_Delay+0x44>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	461a      	mov	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4413      	add	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000796:	bf00      	nop
 8000798:	f7ff ffde 	bl	8000758 <HAL_GetTick>
 800079c:	4602      	mov	r2, r0
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	68fa      	ldr	r2, [r7, #12]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d8f7      	bhi.n	8000798 <HAL_Delay+0x28>
  {
  }
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000018 	.word	0x20000018

080007b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80007bc:	4b03      	ldr	r3, [pc, #12]	; (80007cc <HAL_GetREVID+0x14>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	0c1b      	lsrs	r3, r3, #16
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e0042000 	.word	0xe0042000

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	; 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff8e 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff47 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff5c 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff8e 	bl	8000888 <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffb0 	bl	80008f0 <SysTick_Config>
 8000990:	4603      	mov	r3, r0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
 80009b6:	e16b      	b.n	8000c90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009b8:	2201      	movs	r2, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	697a      	ldr	r2, [r7, #20]
 80009c8:	4013      	ands	r3, r2
 80009ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	f040 815a 	bne.w	8000c8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0303 	and.w	r3, r3, #3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d005      	beq.n	80009ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d130      	bne.n	8000a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	68da      	ldr	r2, [r3, #12]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a24:	2201      	movs	r2, #1
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	091b      	lsrs	r3, r3, #4
 8000a3a:	f003 0201 	and.w	r2, r3, #1
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0303 	and.w	r3, r3, #3
 8000a58:	2b03      	cmp	r3, #3
 8000a5a:	d017      	beq.n	8000a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	2203      	movs	r2, #3
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	4013      	ands	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d123      	bne.n	8000ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	08da      	lsrs	r2, r3, #3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3208      	adds	r2, #8
 8000aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	220f      	movs	r2, #15
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	3208      	adds	r2, #8
 8000ada:	69b9      	ldr	r1, [r7, #24]
 8000adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	2203      	movs	r2, #3
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4013      	ands	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0203 	and.w	r2, r3, #3
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	fa02 f303 	lsl.w	r3, r2, r3
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f000 80b4 	beq.w	8000c8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <HAL_GPIO_Init+0x30c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a5f      	ldr	r2, [pc, #380]	; (8000ca8 <HAL_GPIO_Init+0x30c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b5d      	ldr	r3, [pc, #372]	; (8000ca8 <HAL_GPIO_Init+0x30c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b3e:	4a5b      	ldr	r2, [pc, #364]	; (8000cac <HAL_GPIO_Init+0x310>)
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f003 0303 	and.w	r3, r3, #3
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a52      	ldr	r2, [pc, #328]	; (8000cb0 <HAL_GPIO_Init+0x314>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d02b      	beq.n	8000bc2 <HAL_GPIO_Init+0x226>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a51      	ldr	r2, [pc, #324]	; (8000cb4 <HAL_GPIO_Init+0x318>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d025      	beq.n	8000bbe <HAL_GPIO_Init+0x222>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a50      	ldr	r2, [pc, #320]	; (8000cb8 <HAL_GPIO_Init+0x31c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d01f      	beq.n	8000bba <HAL_GPIO_Init+0x21e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a4f      	ldr	r2, [pc, #316]	; (8000cbc <HAL_GPIO_Init+0x320>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d019      	beq.n	8000bb6 <HAL_GPIO_Init+0x21a>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a4e      	ldr	r2, [pc, #312]	; (8000cc0 <HAL_GPIO_Init+0x324>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d013      	beq.n	8000bb2 <HAL_GPIO_Init+0x216>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4d      	ldr	r2, [pc, #308]	; (8000cc4 <HAL_GPIO_Init+0x328>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d00d      	beq.n	8000bae <HAL_GPIO_Init+0x212>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <HAL_GPIO_Init+0x32c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d007      	beq.n	8000baa <HAL_GPIO_Init+0x20e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a4b      	ldr	r2, [pc, #300]	; (8000ccc <HAL_GPIO_Init+0x330>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_GPIO_Init+0x20a>
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	e00e      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	e00c      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000baa:	2306      	movs	r3, #6
 8000bac:	e00a      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e008      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x228>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	f002 0203 	and.w	r2, r2, #3
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd4:	4935      	ldr	r1, [pc, #212]	; (8000cac <HAL_GPIO_Init+0x310>)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c06:	4a32      	ldr	r2, [pc, #200]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c30:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_GPIO_Init+0x334>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	f67f ae90 	bls.w	80009b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c98:	bf00      	nop
 8000c9a:	bf00      	nop
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020800 	.word	0x40020800
 8000cbc:	40020c00 	.word	0x40020c00
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40021400 	.word	0x40021400
 8000cc8:	40021800 	.word	0x40021800
 8000ccc:	40021c00 	.word	0x40021c00
 8000cd0:	40013c00 	.word	0x40013c00

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000cf0:	e003      	b.n	8000cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000cf2:	887b      	ldrh	r3, [r7, #2]
 8000cf4:	041a      	lsls	r2, r3, #16
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	619a      	str	r2, [r3, #24]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d101      	bne.n	8000d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e267      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d075      	beq.n	8000e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d26:	4b88      	ldr	r3, [pc, #544]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	f003 030c 	and.w	r3, r3, #12
 8000d2e:	2b04      	cmp	r3, #4
 8000d30:	d00c      	beq.n	8000d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d32:	4b85      	ldr	r3, [pc, #532]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d112      	bne.n	8000d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d3e:	4b82      	ldr	r3, [pc, #520]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000d4a:	d10b      	bne.n	8000d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4c:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d05b      	beq.n	8000e10 <HAL_RCC_OscConfig+0x108>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d157      	bne.n	8000e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e242      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d6c:	d106      	bne.n	8000d7c <HAL_RCC_OscConfig+0x74>
 8000d6e:	4b76      	ldr	r3, [pc, #472]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a75      	ldr	r2, [pc, #468]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e01d      	b.n	8000db8 <HAL_RCC_OscConfig+0xb0>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0x98>
 8000d86:	4b70      	ldr	r3, [pc, #448]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a6f      	ldr	r2, [pc, #444]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b6d      	ldr	r3, [pc, #436]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6c      	ldr	r2, [pc, #432]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e00b      	b.n	8000db8 <HAL_RCC_OscConfig+0xb0>
 8000da0:	4b69      	ldr	r3, [pc, #420]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a68      	ldr	r2, [pc, #416]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b66      	ldr	r3, [pc, #408]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a65      	ldr	r2, [pc, #404]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d013      	beq.n	8000de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fcca 	bl	8000758 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fcc6 	bl	8000758 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	; 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e207      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4b5b      	ldr	r3, [pc, #364]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xc0>
 8000de6:	e014      	b.n	8000e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fcb6 	bl	8000758 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fcb2 	bl	8000758 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	; 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1f3      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	4b51      	ldr	r3, [pc, #324]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0xe8>
 8000e0e:	e000      	b.n	8000e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d063      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e1e:	4b4a      	ldr	r3, [pc, #296]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e2a:	4b47      	ldr	r3, [pc, #284]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d11c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d116      	bne.n	8000e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	4b41      	ldr	r3, [pc, #260]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x152>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d001      	beq.n	8000e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e1c7      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4937      	ldr	r1, [pc, #220]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	e03a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d020      	beq.n	8000eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e78:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_RCC_OscConfig+0x244>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fc6b 	bl	8000758 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fc67 	bl	8000758 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1a8      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea4:	4b28      	ldr	r3, [pc, #160]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	4925      	ldr	r1, [pc, #148]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e015      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <HAL_RCC_OscConfig+0x244>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc4a 	bl	8000758 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc46 	bl	8000758 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e187      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d036      	beq.n	8000f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d016      	beq.n	8000f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_RCC_OscConfig+0x248>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f00:	f7ff fc2a 	bl	8000758 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc26 	bl	8000758 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e167      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_RCC_OscConfig+0x240>)
 8000f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x200>
 8000f26:	e01b      	b.n	8000f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <HAL_RCC_OscConfig+0x248>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2e:	f7ff fc13 	bl	8000758 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f34:	e00e      	b.n	8000f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc0f 	bl	8000758 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d907      	bls.n	8000f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e150      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	42470000 	.word	0x42470000
 8000f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f54:	4b88      	ldr	r3, [pc, #544]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1ea      	bne.n	8000f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 8097 	beq.w	800109c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f72:	4b81      	ldr	r3, [pc, #516]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10f      	bne.n	8000f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b7d      	ldr	r3, [pc, #500]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	4a7c      	ldr	r2, [pc, #496]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8e:	4b7a      	ldr	r3, [pc, #488]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f9e:	4b77      	ldr	r3, [pc, #476]	; (800117c <HAL_RCC_OscConfig+0x474>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d118      	bne.n	8000fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000faa:	4b74      	ldr	r3, [pc, #464]	; (800117c <HAL_RCC_OscConfig+0x474>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a73      	ldr	r2, [pc, #460]	; (800117c <HAL_RCC_OscConfig+0x474>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fb6:	f7ff fbcf 	bl	8000758 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fbe:	f7ff fbcb 	bl	8000758 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e10c      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	; (800117c <HAL_RCC_OscConfig+0x474>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2ea>
 8000fe4:	4b64      	ldr	r3, [pc, #400]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe8:	4a63      	ldr	r2, [pc, #396]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	6713      	str	r3, [r2, #112]	; 0x70
 8000ff0:	e01c      	b.n	800102c <HAL_RCC_OscConfig+0x324>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b05      	cmp	r3, #5
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x30c>
 8000ffa:	4b5f      	ldr	r3, [pc, #380]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8000ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffe:	4a5e      	ldr	r2, [pc, #376]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	6713      	str	r3, [r2, #112]	; 0x70
 8001006:	4b5c      	ldr	r3, [pc, #368]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100a:	4a5b      	ldr	r2, [pc, #364]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6713      	str	r3, [r2, #112]	; 0x70
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0x324>
 8001014:	4b58      	ldr	r3, [pc, #352]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001018:	4a57      	ldr	r2, [pc, #348]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	6713      	str	r3, [r2, #112]	; 0x70
 8001020:	4b55      	ldr	r3, [pc, #340]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001024:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001026:	f023 0304 	bic.w	r3, r3, #4
 800102a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d015      	beq.n	8001060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff fb90 	bl	8000758 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800103a:	e00a      	b.n	8001052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800103c:	f7ff fb8c 	bl	8000758 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	f241 3288 	movw	r2, #5000	; 0x1388
 800104a:	4293      	cmp	r3, r2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e0cb      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0ee      	beq.n	800103c <HAL_RCC_OscConfig+0x334>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001060:	f7ff fb7a 	bl	8000758 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001066:	e00a      	b.n	800107e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001068:	f7ff fb76 	bl	8000758 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f241 3288 	movw	r2, #5000	; 0x1388
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e0b5      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1ee      	bne.n	8001068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001090:	4b39      	ldr	r3, [pc, #228]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a38      	ldr	r2, [pc, #224]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80a1 	beq.w	80011e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80010a6:	4b34      	ldr	r3, [pc, #208]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b08      	cmp	r3, #8
 80010b0:	d05c      	beq.n	800116c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d141      	bne.n	800113e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <HAL_RCC_OscConfig+0x478>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fb4a 	bl	8000758 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c8:	f7ff fb46 	bl	8000758 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e087      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010da:	4b27      	ldr	r3, [pc, #156]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69da      	ldr	r2, [r3, #28]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	085b      	lsrs	r3, r3, #1
 80010fe:	3b01      	subs	r3, #1
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	061b      	lsls	r3, r3, #24
 800110a:	491b      	ldr	r1, [pc, #108]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <HAL_RCC_OscConfig+0x478>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb1f 	bl	8000758 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fb1b 	bl	8000758 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e05c      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x416>
 800113c:	e054      	b.n	80011e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_RCC_OscConfig+0x478>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fb08 	bl	8000758 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff fb04 	bl	8000758 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e045      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_RCC_OscConfig+0x470>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x444>
 800116a:	e03d      	b.n	80011e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e038      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
 8001178:	40023800 	.word	0x40023800
 800117c:	40007000 	.word	0x40007000
 8001180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_RCC_OscConfig+0x4ec>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d028      	beq.n	80011e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800119c:	429a      	cmp	r2, r3
 800119e:	d121      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d11a      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011b4:	4013      	ands	r3, r2
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80011bc:	4293      	cmp	r3, r2
 80011be:	d111      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	3b01      	subs	r3, #1
 80011ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d101      	bne.n	800120c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0cc      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800120c:	4b68      	ldr	r3, [pc, #416]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d90c      	bls.n	8001234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121a:	4b65      	ldr	r3, [pc, #404]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	d001      	beq.n	8001234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e0b8      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d005      	beq.n	8001258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800124c:	4b59      	ldr	r3, [pc, #356]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a58      	ldr	r2, [pc, #352]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	2b00      	cmp	r3, #0
 8001262:	d005      	beq.n	8001270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001264:	4b53      	ldr	r3, [pc, #332]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4a52      	ldr	r2, [pc, #328]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800126e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001270:	4b50      	ldr	r3, [pc, #320]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	494d      	ldr	r1, [pc, #308]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800127e:	4313      	orrs	r3, r2
 8001280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d044      	beq.n	8001318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d119      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e07f      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d003      	beq.n	80012b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d107      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d109      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06f      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e067      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f023 0203 	bic.w	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4934      	ldr	r1, [pc, #208]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e8:	f7ff fa36 	bl	8000758 <HAL_GetTick>
 80012ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f0:	f7ff fa32 	bl	8000758 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e04f      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	4b2b      	ldr	r3, [pc, #172]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 020c 	and.w	r2, r3, #12
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	429a      	cmp	r2, r3
 8001316:	d1eb      	bne.n	80012f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d20c      	bcs.n	8001340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b22      	ldr	r3, [pc, #136]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	d001      	beq.n	8001340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e032      	b.n	80013a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d008      	beq.n	800135e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800134c:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4916      	ldr	r1, [pc, #88]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800135a:	4313      	orrs	r3, r2
 800135c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0308 	and.w	r3, r3, #8
 8001366:	2b00      	cmp	r3, #0
 8001368:	d009      	beq.n	800137e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	490e      	ldr	r1, [pc, #56]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800137e:	f000 f821 	bl	80013c4 <HAL_RCC_GetSysClockFreq>
 8001382:	4602      	mov	r2, r0
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	091b      	lsrs	r3, r3, #4
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	490a      	ldr	r1, [pc, #40]	; (80013b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001390:	5ccb      	ldrb	r3, [r1, r3]
 8001392:	fa22 f303 	lsr.w	r3, r2, r3
 8001396:	4a09      	ldr	r2, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x1c4>)
 8001398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_RCC_ClockConfig+0x1c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f996 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023c00 	.word	0x40023c00
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08002008 	.word	0x08002008
 80013bc:	20000010 	.word	0x20000010
 80013c0:	20000014 	.word	0x20000014

080013c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c8:	b094      	sub	sp, #80	; 0x50
 80013ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
 80013d0:	2300      	movs	r3, #0
 80013d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013d4:	2300      	movs	r3, #0
 80013d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013dc:	4b79      	ldr	r3, [pc, #484]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d00d      	beq.n	8001404 <HAL_RCC_GetSysClockFreq+0x40>
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	f200 80e1 	bhi.w	80015b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d002      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0x34>
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d003      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x3a>
 80013f6:	e0db      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013f8:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80013fc:	e0db      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013fe:	4b73      	ldr	r3, [pc, #460]	; (80015cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001402:	e0d8      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001404:	4b6f      	ldr	r3, [pc, #444]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800140c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800140e:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141a:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	099b      	lsrs	r3, r3, #6
 8001420:	2200      	movs	r2, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
 8001424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
 8001432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001436:	4622      	mov	r2, r4
 8001438:	462b      	mov	r3, r5
 800143a:	f04f 0000 	mov.w	r0, #0
 800143e:	f04f 0100 	mov.w	r1, #0
 8001442:	0159      	lsls	r1, r3, #5
 8001444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001448:	0150      	lsls	r0, r2, #5
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4621      	mov	r1, r4
 8001450:	1a51      	subs	r1, r2, r1
 8001452:	6139      	str	r1, [r7, #16]
 8001454:	4629      	mov	r1, r5
 8001456:	eb63 0301 	sbc.w	r3, r3, r1
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001468:	4659      	mov	r1, fp
 800146a:	018b      	lsls	r3, r1, #6
 800146c:	4651      	mov	r1, sl
 800146e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001472:	4651      	mov	r1, sl
 8001474:	018a      	lsls	r2, r1, #6
 8001476:	4651      	mov	r1, sl
 8001478:	ebb2 0801 	subs.w	r8, r2, r1
 800147c:	4659      	mov	r1, fp
 800147e:	eb63 0901 	sbc.w	r9, r3, r1
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800148e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001496:	4690      	mov	r8, r2
 8001498:	4699      	mov	r9, r3
 800149a:	4623      	mov	r3, r4
 800149c:	eb18 0303 	adds.w	r3, r8, r3
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	462b      	mov	r3, r5
 80014a4:	eb49 0303 	adc.w	r3, r9, r3
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80014b6:	4629      	mov	r1, r5
 80014b8:	024b      	lsls	r3, r1, #9
 80014ba:	4621      	mov	r1, r4
 80014bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014c0:	4621      	mov	r1, r4
 80014c2:	024a      	lsls	r2, r1, #9
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ca:	2200      	movs	r2, #0
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80014d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014d4:	f7fe fe78 	bl	80001c8 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014e0:	e058      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e2:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	099b      	lsrs	r3, r3, #6
 80014e8:	2200      	movs	r2, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	4611      	mov	r1, r2
 80014ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014f2:	623b      	str	r3, [r7, #32]
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
 80014f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014fc:	4642      	mov	r2, r8
 80014fe:	464b      	mov	r3, r9
 8001500:	f04f 0000 	mov.w	r0, #0
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	0159      	lsls	r1, r3, #5
 800150a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800150e:	0150      	lsls	r0, r2, #5
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4641      	mov	r1, r8
 8001516:	ebb2 0a01 	subs.w	sl, r2, r1
 800151a:	4649      	mov	r1, r9
 800151c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800152c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001534:	ebb2 040a 	subs.w	r4, r2, sl
 8001538:	eb63 050b 	sbc.w	r5, r3, fp
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f04f 0300 	mov.w	r3, #0
 8001544:	00eb      	lsls	r3, r5, #3
 8001546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800154a:	00e2      	lsls	r2, r4, #3
 800154c:	4614      	mov	r4, r2
 800154e:	461d      	mov	r5, r3
 8001550:	4643      	mov	r3, r8
 8001552:	18e3      	adds	r3, r4, r3
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	464b      	mov	r3, r9
 8001558:	eb45 0303 	adc.w	r3, r5, r3
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	f04f 0200 	mov.w	r2, #0
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800156a:	4629      	mov	r1, r5
 800156c:	028b      	lsls	r3, r1, #10
 800156e:	4621      	mov	r1, r4
 8001570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001574:	4621      	mov	r1, r4
 8001576:	028a      	lsls	r2, r1, #10
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157e:	2200      	movs	r2, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	61fa      	str	r2, [r7, #28]
 8001584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001588:	f7fe fe1e 	bl	80001c8 <__aeabi_uldivmod>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4613      	mov	r3, r2
 8001592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	0c1b      	lsrs	r3, r3, #16
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	3301      	adds	r3, #1
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80015a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80015a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015ae:	e002      	b.n	80015b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	00f42400 	.word	0x00f42400
 80015cc:	007a1200 	.word	0x007a1200

080015d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e07b      	b.n	80016da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015f2:	d009      	beq.n	8001608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
 80015fa:	e005      	b.n	8001608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 fc22 	bl	8001e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800163e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	ea42 0103 	orr.w	r1, r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	0c1b      	lsrs	r3, r3, #16
 80016a6:	f003 0104 	and.w	r1, r3, #4
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	f003 0210 	and.w	r2, r3, #16
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69da      	ldr	r2, [r3, #28]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b08c      	sub	sp, #48	; 0x30
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80016f0:	2301      	movs	r3, #1
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_SPI_TransmitReceive+0x26>
 8001704:	2302      	movs	r3, #2
 8001706:	e198      	b.n	8001a3a <HAL_SPI_TransmitReceive+0x358>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001710:	f7ff f822 	bl	8000758 <HAL_GetTick>
 8001714:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800171c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001726:	887b      	ldrh	r3, [r7, #2]
 8001728:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800172a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800172e:	2b01      	cmp	r3, #1
 8001730:	d00f      	beq.n	8001752 <HAL_SPI_TransmitReceive+0x70>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001738:	d107      	bne.n	800174a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_SPI_TransmitReceive+0x68>
 8001742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001746:	2b04      	cmp	r3, #4
 8001748:	d003      	beq.n	8001752 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001750:	e16d      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d005      	beq.n	8001764 <HAL_SPI_TransmitReceive+0x82>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d002      	beq.n	8001764 <HAL_SPI_TransmitReceive+0x82>
 800175e:	887b      	ldrh	r3, [r7, #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d103      	bne.n	800176c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800176a:	e160      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b04      	cmp	r3, #4
 8001776:	d003      	beq.n	8001780 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2205      	movs	r2, #5
 800177c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2200      	movs	r2, #0
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c0:	2b40      	cmp	r3, #64	; 0x40
 80017c2:	d007      	beq.n	80017d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017dc:	d17c      	bne.n	80018d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <HAL_SPI_TransmitReceive+0x10a>
 80017e6:	8b7b      	ldrh	r3, [r7, #26]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d16a      	bne.n	80018c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	1c9a      	adds	r2, r3, #2
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001806:	b29b      	uxth	r3, r3
 8001808:	3b01      	subs	r3, #1
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001810:	e057      	b.n	80018c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b02      	cmp	r3, #2
 800181e:	d11b      	bne.n	8001858 <HAL_SPI_TransmitReceive+0x176>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001824:	b29b      	uxth	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <HAL_SPI_TransmitReceive+0x176>
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	2b01      	cmp	r3, #1
 800182e:	d113      	bne.n	8001858 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	1c9a      	adds	r2, r3, #2
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800184a:	b29b      	uxth	r3, r3
 800184c:	3b01      	subs	r3, #1
 800184e:	b29a      	uxth	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d119      	bne.n	800189a <HAL_SPI_TransmitReceive+0x1b8>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800186a:	b29b      	uxth	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d014      	beq.n	800189a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187a:	b292      	uxth	r2, r2
 800187c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	1c9a      	adds	r2, r3, #2
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001896:	2301      	movs	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800189a:	f7fe ff5d 	bl	8000758 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d80b      	bhi.n	80018c2 <HAL_SPI_TransmitReceive+0x1e0>
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d007      	beq.n	80018c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80018c0:	e0b5      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1a2      	bne.n	8001812 <HAL_SPI_TransmitReceive+0x130>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d19d      	bne.n	8001812 <HAL_SPI_TransmitReceive+0x130>
 80018d6:	e080      	b.n	80019da <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_SPI_TransmitReceive+0x204>
 80018e0:	8b7b      	ldrh	r3, [r7, #26]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d16f      	bne.n	80019c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	330c      	adds	r3, #12
 80018f0:	7812      	ldrb	r2, [r2, #0]
 80018f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001902:	b29b      	uxth	r3, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800190c:	e05b      	b.n	80019c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
        /* First Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c

    	/* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b02      	cmp	r3, #2
 800191e:	d11a      	bne.n	8001956 <HAL_SPI_TransmitReceive+0x274>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001924:	b29b      	uxth	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d015      	beq.n	8001956 <HAL_SPI_TransmitReceive+0x274>
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d112      	bne.n	8001956 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	330c      	adds	r3, #12
 800193a:	7812      	ldrb	r2, [r2, #0]
 800193c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	86da      	strh	r2, [r3, #54]	; 0x36
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b01      	cmp	r3, #1
 8001962:	d119      	bne.n	8001998 <HAL_SPI_TransmitReceive+0x2b6>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001968:	b29b      	uxth	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d014      	beq.n	8001998 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001994:	2301      	movs	r3, #1
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001998:	f7fe fede 	bl	8000758 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d803      	bhi.n	80019b0 <HAL_SPI_TransmitReceive+0x2ce>
 80019a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ae:	d102      	bne.n	80019b6 <HAL_SPI_TransmitReceive+0x2d4>
 80019b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d107      	bne.n	80019c6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80019c4:	e033      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d19e      	bne.n	800190e <HAL_SPI_TransmitReceive+0x22c>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d199      	bne.n	800190e <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f8b8 	bl	8001b54 <SPI_EndRxTxTransaction>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80019f6:	e01a      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a24:	e003      	b.n	8001a2e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3730      	adds	r7, #48	; 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001a54:	f7fe fe80 	bl	8000758 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001a64:	f7fe fe78 	bl	8000758 <HAL_GetTick>
 8001a68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001a6a:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	0d1b      	lsrs	r3, r3, #20
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	fb02 f303 	mul.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a7a:	e054      	b.n	8001b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d050      	beq.n	8001b26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001a84:	f7fe fe68 	bl	8000758 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d902      	bls.n	8001a9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d13d      	bne.n	8001b16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001aa8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ab2:	d111      	bne.n	8001ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abc:	d004      	beq.n	8001ac8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac6:	d107      	bne.n	8001ad8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae0:	d10f      	bne.n	8001b02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e017      	b.n	8001b46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	bf0c      	ite	eq
 8001b36:	2301      	moveq	r3, #1
 8001b38:	2300      	movne	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d19b      	bne.n	8001a7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3720      	adds	r7, #32
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000010 	.word	0x20000010

08001b54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2201      	movs	r2, #1
 8001b68:	2102      	movs	r1, #2
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f7ff ff6a 	bl	8001a44 <SPI_WaitFlagStateUntilTimeout>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d007      	beq.n	8001b86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7a:	f043 0220 	orr.w	r2, r3, #32
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e032      	b.n	8001bec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <SPI_EndRxTxTransaction+0xa0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <SPI_EndRxTxTransaction+0xa4>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0d5b      	lsrs	r3, r3, #21
 8001b92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ba4:	d112      	bne.n	8001bcc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	2200      	movs	r2, #0
 8001bae:	2180      	movs	r1, #128	; 0x80
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff ff47 	bl	8001a44 <SPI_WaitFlagStateUntilTimeout>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d016      	beq.n	8001bea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e00f      	b.n	8001bec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00a      	beq.n	8001be8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be2:	2b80      	cmp	r3, #128	; 0x80
 8001be4:	d0f2      	beq.n	8001bcc <SPI_EndRxTxTransaction+0x78>
 8001be6:	e000      	b.n	8001bea <SPI_EndRxTxTransaction+0x96>
        break;
 8001be8:	bf00      	nop
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000010 	.word	0x20000010
 8001bf8:	165e9f81 	.word	0x165e9f81

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c02:	490e      	ldr	r1, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c18:	4c0b      	ldr	r4, [pc, #44]	; (8001c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c26:	f7fe fcf9 	bl	800061c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f000 f9b9 	bl	8001fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f000 f80f 	bl	8001c50 <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001c40:	08002028 	.word	0x08002028
  ldr r2, =_sbss
 8001c44:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001c48:	2000017c 	.word	0x2000017c

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>
	...

08001c50 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af02      	add	r7, sp, #8
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8001c56:	f7fe fd17 	bl	8000688 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8001c5a:	2001      	movs	r0, #1
 8001c5c:	f7fe fc32 	bl	80004c4 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7fe fc2f 	bl	80004c4 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7fe fc2c 	bl	80004c4 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7fe fc29 	bl	80004c4 <BSP_LED_Init>

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 8001c72:	f000 f867 	bl	8001d44 <SystemClock_Config>
  
  /*##-1- Configure the SPI peripheral #######################################*/
  /* Set the SPI parameters */
  SpiHandle.Instance               = SPIx;
 8001c76:	4b2c      	ldr	r3, [pc, #176]	; (8001d28 <main+0xd8>)
 8001c78:	4a2c      	ldr	r2, [pc, #176]	; (8001d2c <main+0xdc>)
 8001c7a:	601a      	str	r2, [r3, #0]
  
  SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <main+0xd8>)
 8001c7e:	2238      	movs	r2, #56	; 0x38
 8001c80:	61da      	str	r2, [r3, #28]
  SpiHandle.Init.Direction         = SPI_DIRECTION_2LINES;
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <main+0xd8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  SpiHandle.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <main+0xd8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  SpiHandle.Init.CLKPolarity       = SPI_POLARITY_HIGH;
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <main+0xd8>)
 8001c90:	2202      	movs	r2, #2
 8001c92:	611a      	str	r2, [r3, #16]
  SpiHandle.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <main+0xd8>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28
  SpiHandle.Init.CRCPolynomial     = 7;
 8001c9a:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <main+0xd8>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  SpiHandle.Init.DataSize          = SPI_DATASIZE_8BIT;
 8001ca0:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <main+0xd8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]
  SpiHandle.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 8001ca6:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <main+0xd8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
  SpiHandle.Init.NSS               = SPI_NSS_SOFT;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <main+0xd8>)
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	619a      	str	r2, [r3, #24]
  SpiHandle.Init.TIMode            = SPI_TIMODE_DISABLE;
 8001cb4:	4b1c      	ldr	r3, [pc, #112]	; (8001d28 <main+0xd8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	625a      	str	r2, [r3, #36]	; 0x24
  
#ifdef MASTER_BOARD
  SpiHandle.Init.Mode = SPI_MODE_MASTER;
#else
  SpiHandle.Init.Mode = SPI_MODE_SLAVE;
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <main+0xd8>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]
#endif /* MASTER_BOARD */

  if(HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001cc0:	4819      	ldr	r0, [pc, #100]	; (8001d28 <main+0xd8>)
 8001cc2:	f7ff fc85 	bl	80015d0 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <main+0x80>
  {
    /* Initialization Error */
    Error_Handler();
 8001ccc:	f000 f834 	bl	8001d38 <Error_Handler>
  /*##-2- Start the Full Duplex Communication process ########################*/  
  /* While the SPI in TransmitReceive process, user can transmit data through 
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
  /* Timeout is set to 5S */
  
  switch(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE, 5000))
 8001cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2373      	movs	r3, #115	; 0x73
 8001cd8:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <main+0xe0>)
 8001cda:	4916      	ldr	r1, [pc, #88]	; (8001d34 <main+0xe4>)
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <main+0xd8>)
 8001cde:	f7ff fd00 	bl	80016e2 <HAL_SPI_TransmitReceive>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <main+0xc8>
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	dc1b      	bgt.n	8001d24 <main+0xd4>
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <main+0xa6>
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d014      	beq.n	8001d1e <main+0xce>
    /* Call Timeout Handler */
    Error_Handler();  
    break;
  
  default:
    break;
 8001cf4:	e016      	b.n	8001d24 <main+0xd4>
    if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8001cf6:	2273      	movs	r2, #115	; 0x73
 8001cf8:	490d      	ldr	r1, [pc, #52]	; (8001d30 <main+0xe0>)
 8001cfa:	480e      	ldr	r0, [pc, #56]	; (8001d34 <main+0xe4>)
 8001cfc:	f000 f893 	bl	8001e26 <Buffercmp>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <main+0xba>
      Error_Handler();     
 8001d06:	f000 f817 	bl	8001d38 <Error_Handler>
    BSP_LED_On(LED4);
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	f7fe fc52 	bl	80005b4 <BSP_LED_On>
    BSP_LED_On(LED6);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f7fe fc4f 	bl	80005b4 <BSP_LED_On>
    break;  
 8001d16:	e006      	b.n	8001d26 <main+0xd6>
    Timeout_Error_Handler();  
 8001d18:	f000 f874 	bl	8001e04 <Timeout_Error_Handler>
    break;  
 8001d1c:	e003      	b.n	8001d26 <main+0xd6>
    Error_Handler();  
 8001d1e:	f000 f80b 	bl	8001d38 <Error_Handler>
    break;
 8001d22:	e000      	b.n	8001d26 <main+0xd6>
    break;
 8001d24:	bf00      	nop
  }
  
  /* Infinite loop */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <main+0xd6>
 8001d28:	200000b0 	.word	0x200000b0
 8001d2c:	40003800 	.word	0x40003800
 8001d30:	20000108 	.word	0x20000108
 8001d34:	2000001c 	.word	0x2000001c

08001d38 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7fe fc39 	bl	80005b4 <BSP_LED_On>
  while(1)
 8001d42:	e7fe      	b.n	8001d42 <Error_Handler+0xa>

08001d44 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b094      	sub	sp, #80	; 0x50
 8001d48:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <SystemClock_Config+0xb4>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <SystemClock_Config+0xb4>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <SystemClock_Config+0xb4>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <SystemClock_Config+0xb8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <SystemClock_Config+0xb8>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <SystemClock_Config+0xb8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d96:	2308      	movs	r3, #8
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d9a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001da4:	2307      	movs	r3, #7
 8001da6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ffab 	bl	8000d08 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001db2:	230f      	movs	r3, #15
 8001db4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2302      	movs	r3, #2
 8001db8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8001dbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001dca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dce:	2105      	movs	r1, #5
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa11 	bl	80011f8 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z and upper devices: prefetch is supported  */
  if (HAL_GetREVID() >= 0x1001)
 8001dd6:	f7fe fcef 	bl	80007b8 <HAL_GetREVID>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de0:	d905      	bls.n	8001dee <SystemClock_Config+0xaa>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <SystemClock_Config+0xbc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <SystemClock_Config+0xbc>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6013      	str	r3, [r2, #0]
  }
}
 8001dee:	bf00      	nop
 8001df0:	3750      	adds	r7, #80	; 0x50
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <Timeout_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Timeout_Error_Handler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Toggle LED5 on */
  while(1)
  {
    BSP_LED_On(LED5);
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7fe fbd3 	bl	80005b4 <BSP_LED_On>
    HAL_Delay(500);
 8001e0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e12:	f7fe fcad 	bl	8000770 <HAL_Delay>
    BSP_LED_Off(LED5);
 8001e16:	2002      	movs	r0, #2
 8001e18:	f7fe fbe6 	bl	80005e8 <BSP_LED_Off>
    HAL_Delay(500);
 8001e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e20:	f7fe fca6 	bl	8000770 <HAL_Delay>
    BSP_LED_On(LED5);
 8001e24:	e7f0      	b.n	8001e08 <Timeout_Error_Handler+0x4>

08001e26 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 0  : pBuffer1 identical to pBuffer2
  *         >0 : pBuffer1 differs from pBuffer2
  */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	4613      	mov	r3, r2
 8001e32:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8001e34:	e00d      	b.n	8001e52 <Buffercmp+0x2c>
  {
    if((*pBuffer1) != *pBuffer2)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <Buffercmp+0x20>
    {
      return BufferLength;
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	e00b      	b.n	8001e5e <Buffercmp+0x38>
    }
    pBuffer1++;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	80fa      	strh	r2, [r7, #6]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1ec      	bne.n	8001e36 <Buffercmp+0x10>
  }

  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <HAL_SPI_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  SPIx_SCK_GPIO_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	6313      	str	r3, [r2, #48]	; 0x30
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	61bb      	str	r3, [r7, #24]
 8001e8e:	69bb      	ldr	r3, [r7, #24]
  SPIx_MISO_GPIO_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e98:	4a28      	ldr	r2, [pc, #160]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
  SPIx_MOSI_GPIO_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	4a21      	ldr	r2, [pc, #132]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	693b      	ldr	r3, [r7, #16]
  /* Enable SPI clock */
  SPIx_CLK_ENABLE(); 
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_SPI_MspInit+0xd0>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
  
  /*##-2- Configure peripheral GPIO ##########################################*/  
  /* SPI SCK GPIO pin configuration  */
  GPIO_InitStruct.Pin       = SPIx_SCK_PIN;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = SPIx_SCK_AF;
 8001ef6:	2305      	movs	r3, #5
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  HAL_GPIO_Init(SPIx_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	480f      	ldr	r0, [pc, #60]	; (8001f40 <HAL_SPI_MspInit+0xd4>)
 8001f02:	f7fe fd4b 	bl	800099c <HAL_GPIO_Init>
    
  /* SPI MISO GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MISO_PIN;
 8001f06:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = SPIx_MISO_AF;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  HAL_GPIO_Init(SPIx_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	480a      	ldr	r0, [pc, #40]	; (8001f40 <HAL_SPI_MspInit+0xd4>)
 8001f18:	f7fe fd40 	bl	800099c <HAL_GPIO_Init>
  
  /* SPI MOSI GPIO pin configuration  */
  GPIO_InitStruct.Pin = SPIx_MOSI_PIN;
 8001f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Alternate = SPIx_MOSI_AF;
 8001f22:	2305      	movs	r3, #5
 8001f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    
  HAL_GPIO_Init(SPIx_MOSI_GPIO_PORT, &GPIO_InitStruct);    
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <HAL_SPI_MspInit+0xd4>)
 8001f2e:	f7fe fd35 	bl	800099c <HAL_GPIO_Init>
}
 8001f32:	bf00      	nop
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020400 	.word	0x40020400

08001f44 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8001f98:	f7fe fbca 	bl	8000730 <HAL_IncTick>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <__libc_init_array>:
 8001fa0:	b570      	push	{r4, r5, r6, lr}
 8001fa2:	4d0d      	ldr	r5, [pc, #52]	; (8001fd8 <__libc_init_array+0x38>)
 8001fa4:	4c0d      	ldr	r4, [pc, #52]	; (8001fdc <__libc_init_array+0x3c>)
 8001fa6:	1b64      	subs	r4, r4, r5
 8001fa8:	10a4      	asrs	r4, r4, #2
 8001faa:	2600      	movs	r6, #0
 8001fac:	42a6      	cmp	r6, r4
 8001fae:	d109      	bne.n	8001fc4 <__libc_init_array+0x24>
 8001fb0:	4d0b      	ldr	r5, [pc, #44]	; (8001fe0 <__libc_init_array+0x40>)
 8001fb2:	4c0c      	ldr	r4, [pc, #48]	; (8001fe4 <__libc_init_array+0x44>)
 8001fb4:	f000 f818 	bl	8001fe8 <_init>
 8001fb8:	1b64      	subs	r4, r4, r5
 8001fba:	10a4      	asrs	r4, r4, #2
 8001fbc:	2600      	movs	r6, #0
 8001fbe:	42a6      	cmp	r6, r4
 8001fc0:	d105      	bne.n	8001fce <__libc_init_array+0x2e>
 8001fc2:	bd70      	pop	{r4, r5, r6, pc}
 8001fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc8:	4798      	blx	r3
 8001fca:	3601      	adds	r6, #1
 8001fcc:	e7ee      	b.n	8001fac <__libc_init_array+0xc>
 8001fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd2:	4798      	blx	r3
 8001fd4:	3601      	adds	r6, #1
 8001fd6:	e7f2      	b.n	8001fbe <__libc_init_array+0x1e>
 8001fd8:	08002020 	.word	0x08002020
 8001fdc:	08002020 	.word	0x08002020
 8001fe0:	08002020 	.word	0x08002020
 8001fe4:	08002024 	.word	0x08002024

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr
