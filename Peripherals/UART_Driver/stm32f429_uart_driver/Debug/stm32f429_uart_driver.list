
stm32f429_uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000520  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  4 .ARM          00000000  080006cc  080006cc  000106d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006cc  080006d4  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000106cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010704  2**0
                  CONTENTS, READONLY
 14 .debug_info   000014a3  00000000  00000000  00010747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000064d  00000000  00000000  00011bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00012238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000e8  00000000  00000000  00012388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a4f5  00000000  00000000  00012470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001a48  00000000  00000000  0002c965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000934f5  00000000  00000000  0002e3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000418  00000000  00000000  000c18a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  000c1cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080006b4 	.word	0x080006b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080006b4 	.word	0x080006b4

080001ec <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP) && 0
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0
    /*!< Configure the RCC object handle */
	RCC_Handle_t hRCC_Led;
	hRCC_Led.RCC_Config.bus = AHB1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	757b      	strb	r3, [r7, #21]
	hRCC_Led.RCC_Config.prescaler = AHB_DIVIDE_BY_64;
 80001f6:	230c      	movs	r3, #12
 80001f8:	75bb      	strb	r3, [r7, #22]
	hRCC_Led.RCC_Config.clock_source = HSI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	753b      	strb	r3, [r7, #20]
	hRCC_Led.pRCC = RCC;
 80001fe:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <main+0x88>)
 8000200:	613b      	str	r3, [r7, #16]
	/*!< Configure the GPIO object handle */
	GPIO_Handle_t hGPIO_Led;
	hGPIO_Led.hRCC	 = &hRCC_Led;
 8000202:	f107 0310 	add.w	r3, r7, #16
 8000206:	607b      	str	r3, [r7, #4]
	hGPIO_Led.pGPIOx = GPIOG;
 8000208:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <main+0x8c>)
 800020a:	60bb      	str	r3, [r7, #8]
	hGPIO_Led.GPIO_PinConfig.Pin = 13;
 800020c:	7b3b      	ldrb	r3, [r7, #12]
 800020e:	220d      	movs	r2, #13
 8000210:	f362 0303 	bfi	r3, r2, #0, #4
 8000214:	733b      	strb	r3, [r7, #12]
	hGPIO_Led.GPIO_PinConfig.Mode = 1;
 8000216:	7b3b      	ldrb	r3, [r7, #12]
 8000218:	2201      	movs	r2, #1
 800021a:	f362 1305 	bfi	r3, r2, #4, #2
 800021e:	733b      	strb	r3, [r7, #12]
	hI2CSlave.I2C_PinConfig.I2C_SCLSpeed		= I2C_SCL_SPEED;	///< Set SCLK speed of master
	hI2CSlave.I2C_PinConfig.I2C_FMDutyCycle		= 0;				///< Set the duty cycle to 0 for Standard Mode
	hI2CSlave.pI2Cx 							= I2C2;				///< Use I2C2 as Slave
#endif
	/*!< Set up clock access to GPIOG port */
	RCC_SetPrescaler(&hRCC_Led, hRCC_Led.RCC_Config.prescaler);
 8000220:	7dba      	ldrb	r2, [r7, #22]
 8000222:	f107 0310 	add.w	r3, r7, #16
 8000226:	4611      	mov	r1, r2
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f977 	bl	800051c <RCC_SetPrescaler>
	/*!< Set up clock access to I2C master peripheral */
	RCC_SetPrescaler(&hRCC_I2C_Master_Periph, hRCC_I2C_Master_Periph.RCC_Config.prescaler);
	RCC_EnableClock(&hRCC_I2C_Master_Periph, 21);
#endif
	/*!< Initialize GPIOG for LED operation */
	GPIO_Init(&hGPIO_Led);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f8c6 	bl	80003c2 <GPIO_Init>
	GPIO_Init(&hGPIO_I2C_Master[1]);
	/*!< Configure I2C Master */
	I2C_Init(&hI2CMaster);
#endif
	for(;;){
		GPIO_Set_Bit(&hGPIO_Led);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f8e9 	bl	8000410 <GPIO_Set_Bit>
		for(int i = 0; i < DELAY; i++);
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
 8000242:	e002      	b.n	800024a <main+0x5e>
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	3301      	adds	r3, #1
 8000248:	61fb      	str	r3, [r7, #28]
 800024a:	69fb      	ldr	r3, [r7, #28]
 800024c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000250:	4293      	cmp	r3, r2
 8000252:	ddf7      	ble.n	8000244 <main+0x58>
		GPIO_Clear_Bit(&hGPIO_Led);
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f8f4 	bl	8000444 <GPIO_Clear_Bit>
		for(int i = 0; i < DELAY; i++);
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
 8000260:	e002      	b.n	8000268 <main+0x7c>
 8000262:	69bb      	ldr	r3, [r7, #24]
 8000264:	3301      	adds	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	69bb      	ldr	r3, [r7, #24]
 800026a:	f241 3287 	movw	r2, #4999	; 0x1387
 800026e:	4293      	cmp	r3, r2
 8000270:	ddf7      	ble.n	8000262 <main+0x76>
		GPIO_Set_Bit(&hGPIO_Led);
 8000272:	e7e0      	b.n	8000236 <main+0x4a>
 8000274:	40023800 	.word	0x40023800
 8000278:	40021800 	.word	0x40021800

0800027c <GPIO_ConfigureMode>:
 *      Author: Soumyadeep Bose
 */

#include "stm32f429xx_gpio_driver.h"

void GPIO_ConfigureMode(GPIO_Handle_t * pGPIOHandle){
 800027c:	b480      	push	{r7}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint8_t pin = pGPIOHandle->GPIO_PinConfig.Pin;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7a1b      	ldrb	r3, [r3, #8]
 8000288:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800028c:	b2db      	uxtb	r3, r3
 800028e:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (pin * 2));
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	7bfb      	ldrb	r3, [r7, #15]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	2103      	movs	r1, #3
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	43db      	mvns	r3, r3
 80002a2:	4619      	mov	r1, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	400a      	ands	r2, r1
 80002aa:	601a      	str	r2, [r3, #0]
	pGPIOHandle->pGPIOx->MODER |= ( (pGPIOHandle->GPIO_PinConfig.Mode) << (pin * 2));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	7a1b      	ldrb	r3, [r3, #8]
 80002b6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4619      	mov	r1, r3
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	430a      	orrs	r2, r1
 80002ce:	601a      	str	r2, [r3, #0]
}
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <GPIO_ConfigurePullUpDown>:
void GPIO_ConfigureOutputSpeed(GPIO_Handle_t * pGPIOHandle){
	uint8_t pin = pGPIOHandle->GPIO_PinConfig.Pin;
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (pin * 2));
	pGPIOHandle->pGPIOx->OSPEEDR |= ( (pGPIOHandle->GPIO_PinConfig.OutputSpeed) << (pin * 2));
}
void GPIO_ConfigurePullUpDown(GPIO_Handle_t * pGPIOHandle){
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	uint8_t pin = pGPIOHandle->GPIO_PinConfig.Pin;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	7a1b      	ldrb	r3, [r3, #8]
 80002e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (pin * 2));
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	68da      	ldr	r2, [r3, #12]
 80002f6:	7bfb      	ldrb	r3, [r7, #15]
 80002f8:	005b      	lsls	r3, r3, #1
 80002fa:	2103      	movs	r1, #3
 80002fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000300:	43db      	mvns	r3, r3
 8000302:	4619      	mov	r1, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	400a      	ands	r2, r1
 800030a:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= ( (pGPIOHandle->GPIO_PinConfig.PullUpDown) << (pin * 2));
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	68da      	ldr	r2, [r3, #12]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	7a5b      	ldrb	r3, [r3, #9]
 8000316:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4619      	mov	r1, r3
 800031e:	7bfb      	ldrb	r3, [r7, #15]
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	fa01 f303 	lsl.w	r3, r1, r3
 8000326:	4619      	mov	r1, r3
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	430a      	orrs	r2, r1
 800032e:	60da      	str	r2, [r3, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <GPIO_ConfigureAlternateFunction>:
void GPIO_ConfigureAlternateFunction(GPIO_Handle_t * pGPIOHandle){
 800033c:	b490      	push	{r4, r7}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	uint8_t pin = pGPIOHandle->GPIO_PinConfig.Pin;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7a1b      	ldrb	r3, [r3, #8]
 8000348:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800034c:	b2db      	uxtb	r3, r3
 800034e:	73fb      	strb	r3, [r7, #15]
	pGPIOHandle->pGPIOx->AFR[(pin / 8)] &= ~(0xF << (pin * 4));
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	7bfa      	ldrb	r2, [r7, #15]
 8000356:	08d2      	lsrs	r2, r2, #3
 8000358:	b2d0      	uxtb	r0, r2
 800035a:	4602      	mov	r2, r0
 800035c:	3208      	adds	r2, #8
 800035e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	009b      	lsls	r3, r3, #2
 8000366:	210f      	movs	r1, #15
 8000368:	fa01 f303 	lsl.w	r3, r1, r3
 800036c:	43db      	mvns	r3, r3
 800036e:	4619      	mov	r1, r3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4011      	ands	r1, r2
 8000376:	f100 0208 	add.w	r2, r0, #8
 800037a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pGPIOHandle->pGPIOx->AFR[(pin / 8)] |= ( (pGPIOHandle->GPIO_PinConfig.AlternateFunction) << (pin * 4));
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	7bfa      	ldrb	r2, [r7, #15]
 8000384:	08d2      	lsrs	r2, r2, #3
 8000386:	b2d1      	uxtb	r1, r2
 8000388:	460a      	mov	r2, r1
 800038a:	3208      	adds	r2, #8
 800038c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	7a5b      	ldrb	r3, [r3, #9]
 8000394:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	7bfb      	ldrb	r3, [r7, #15]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	fa00 f303 	lsl.w	r3, r0, r3
 80003a4:	461c      	mov	r4, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	4608      	mov	r0, r1
 80003ac:	ea42 0104 	orr.w	r1, r2, r4
 80003b0:	f100 0208 	add.w	r2, r0, #8
 80003b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc90      	pop	{r4, r7}
 80003c0:	4770      	bx	lr

080003c2 <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t * pGPIOHandle){
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b084      	sub	sp, #16
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
	GPIO_Port Port = ((uint32_t)pGPIOHandle->pGPIOx - (uint32_t)GPIOA_BASE)/1024;	/*!< Determine which port is passed to this function */
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	685b      	ldr	r3, [r3, #4]
 80003ce:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80003d2:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80003d6:	0a9b      	lsrs	r3, r3, #10
 80003d8:	73fb      	strb	r3, [r7, #15]
	RCC_EnableClock(pGPIOHandle->hRCC, Port);										/*!< Enable clock to the determined port */
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	7bfa      	ldrb	r2, [r7, #15]
 80003e0:	4611      	mov	r1, r2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f85a 	bl	800049c <RCC_EnableClock>
	GPIO_ConfigureMode(pGPIOHandle);												/*!< Set mode of GPIO pin */
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f7ff ff47 	bl	800027c <GPIO_ConfigureMode>
	GPIO_ConfigurePullUpDown(pGPIOHandle); 											/*!< Set pin to pull-up */
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ff74 	bl	80002dc <GPIO_ConfigurePullUpDown>
	if(pGPIOHandle->GPIO_PinConfig.Mode == 0x2){
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	7a1b      	ldrb	r3, [r3, #8]
 80003f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	2b20      	cmp	r3, #32
 8000400:	d102      	bne.n	8000408 <GPIO_Init+0x46>
		GPIO_ConfigureAlternateFunction(pGPIOHandle); 								/*!< Set pin to alternate function mode if mode is set to be */
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f7ff ff9a 	bl	800033c <GPIO_ConfigureAlternateFunction>
	}
	/*!< Further API calls to be developed based on mode configuration of the desired pin */
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <GPIO_Set_Bit>:
void GPIO_Set_Bit(GPIO_Handle_t * pGPIOHandle){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	pGPIOHandle->pGPIOx->BSRR |= (0x1 << pGPIOHandle->GPIO_PinConfig.Pin);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	699a      	ldr	r2, [r3, #24]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	7a1b      	ldrb	r3, [r3, #8]
 8000422:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000426:	b2db      	uxtb	r3, r3
 8000428:	4619      	mov	r1, r3
 800042a:	2301      	movs	r3, #1
 800042c:	408b      	lsls	r3, r1
 800042e:	4619      	mov	r1, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	430a      	orrs	r2, r1
 8000436:	619a      	str	r2, [r3, #24]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <GPIO_Clear_Bit>:
void GPIO_Clear_Bit(GPIO_Handle_t * pGPIOHandle){
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	pGPIOHandle->pGPIOx->BSRR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.Pin);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685b      	ldr	r3, [r3, #4]
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	7a1b      	ldrb	r3, [r3, #8]
 8000456:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	2301      	movs	r3, #1
 8000460:	408b      	lsls	r3, r1
 8000462:	43db      	mvns	r3, r3
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	400a      	ands	r2, r1
 800046c:	619a      	str	r2, [r3, #24]
	pGPIOHandle->pGPIOx->BSRR |= (0x1 << (16 + pGPIOHandle->GPIO_PinConfig.Pin));
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	699a      	ldr	r2, [r3, #24]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800047c:	b2db      	uxtb	r3, r3
 800047e:	3310      	adds	r3, #16
 8000480:	2101      	movs	r1, #1
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	430a      	orrs	r2, r1
 800048e:	619a      	str	r2, [r3, #24]
}
 8000490:	bf00      	nop
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <RCC_EnableClock>:
 *@brief Created on: Feb 15, 2024
 *@author: Soumyadeep Bose
 */
#include "stm32f429xx_rcc_driver.h"

void RCC_EnableClock(RCC_Handle_t * pRCC, uint8_t periph_pos){
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	460b      	mov	r3, r1
 80004a6:	70fb      	strb	r3, [r7, #3]
	uint32_t * pAHB1ENR = (uint32_t *)&pRCC->pRCC->AHB1ENR; /*!< Obtain the address of the AHB1ENR */
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3330      	adds	r3, #48	; 0x30
 80004ae:	60fb      	str	r3, [r7, #12]
	if (pRCC->RCC_Config.bus == APB1 || pRCC->RCC_Config.bus == APB2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d003      	beq.n	80004c0 <RCC_EnableClock+0x24>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d114      	bne.n	80004ea <RCC_EnableClock+0x4e>
		pAHB1ENR[pRCC->RCC_Config.bus+1] |= (0x1 << periph_pos); /*!< Configure the ENR of the required bus using the address of AHB1ENR and offset */
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	3301      	adds	r3, #1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	4413      	add	r3, r2
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	795b      	ldrb	r3, [r3, #5]
 80004dc:	3301      	adds	r3, #1
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	68f9      	ldr	r1, [r7, #12]
 80004e2:	440b      	add	r3, r1
 80004e4:	4302      	orrs	r2, r0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	e012      	b.n	8000510 <RCC_EnableClock+0x74>
	else
		pAHB1ENR[pRCC->RCC_Config.bus] |= (0x1 << periph_pos); /*!< Configure the ENR of the required bus using the address of AHB1ENR and offset */
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	4413      	add	r3, r2
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	78fb      	ldrb	r3, [r7, #3]
 80004f8:	2101      	movs	r1, #1
 80004fa:	fa01 f303 	lsl.w	r3, r1, r3
 80004fe:	4618      	mov	r0, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	795b      	ldrb	r3, [r3, #5]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	68f9      	ldr	r1, [r7, #12]
 8000508:	440b      	add	r3, r1
 800050a:	4302      	orrs	r2, r0
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <RCC_SetPrescaler>:
void RCC_ResetClock(RCC_Handle_t * pRCC, uint8_t periph_pos){
	uint32_t * pAHB1RST = (uint32_t *)&pRCC->pRCC->AHB1RSTR; /*!< Obtain the address of the AHB1RST */
	pAHB1RST[pRCC->RCC_Config.bus] |= (0x1 << periph_pos); /*!< Configure the RST of the required bus using the address of AHB1ENR and offset */

}
void RCC_SetPrescaler(RCC_Handle_t * pRCC, uint8_t scaler){
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]
	/*!< Obtain whether clock bus is AHB category */
	ClockBus_t selected_bus = pRCC->RCC_Config.bus;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	73fb      	strb	r3, [r7, #15]
	if(selected_bus == AHB1 || selected_bus == AHB2 || selected_bus == AHB3){
 800052e:	7bfb      	ldrb	r3, [r7, #15]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d005      	beq.n	8000540 <RCC_SetPrescaler+0x24>
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d002      	beq.n	8000540 <RCC_SetPrescaler+0x24>
 800053a:	7bfb      	ldrb	r3, [r7, #15]
 800053c:	2b02      	cmp	r3, #2
 800053e:	d112      	bne.n	8000566 <RCC_SetPrescaler+0x4a>
		pRCC->pRCC->CFGR &= ~(0xF << 4);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	689a      	ldr	r2, [r3, #8]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800054e:	609a      	str	r2, [r3, #8]
		pRCC->pRCC->CFGR |=  (scaler << 4);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	689a      	ldr	r2, [r3, #8]
 8000556:	78fb      	ldrb	r3, [r7, #3]
 8000558:	011b      	lsls	r3, r3, #4
 800055a:	4619      	mov	r1, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	430a      	orrs	r2, r1
 8000562:	609a      	str	r2, [r3, #8]
	}
	else{
		pRCC->pRCC->CFGR &= ~(0x7 << 13);
		pRCC->pRCC->CFGR |=  (scaler << 13);
	}
}
 8000564:	e027      	b.n	80005b6 <RCC_SetPrescaler+0x9a>
	else if(selected_bus == APB1){
 8000566:	7bfb      	ldrb	r3, [r7, #15]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d112      	bne.n	8000592 <RCC_SetPrescaler+0x76>
		pRCC->pRCC->CFGR &= ~(0x7 << 10);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800057a:	609a      	str	r2, [r3, #8]
		pRCC->pRCC->CFGR |=  (scaler << 10);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	029b      	lsls	r3, r3, #10
 8000586:	4619      	mov	r1, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	430a      	orrs	r2, r1
 800058e:	609a      	str	r2, [r3, #8]
}
 8000590:	e011      	b.n	80005b6 <RCC_SetPrescaler+0x9a>
		pRCC->pRCC->CFGR &= ~(0x7 << 13);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	689a      	ldr	r2, [r3, #8]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80005a0:	609a      	str	r2, [r3, #8]
		pRCC->pRCC->CFGR |=  (scaler << 13);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	035b      	lsls	r3, r3, #13
 80005ac:	4619      	mov	r1, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	609a      	str	r2, [r3, #8]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <USART1_IRQHandler>:
	;
}
void UART_Receive(USART_RegAddr_t * pUART, uint8_t * pData){
	;
}
void USART1_IRQHandler(void){
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
	;
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
	;
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <USART3_IRQHandler>:
void USART3_IRQHandler(void){
 80005de:	b480      	push	{r7}
 80005e0:	af00      	add	r7, sp, #0
	;
}
 80005e2:	bf00      	nop
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <UART4_IRQHandler>:
void UART4_IRQHandler(void){
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	;
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <UART5_IRQHandler>:
void UART5_IRQHandler(void){
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
	;
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <USART6_IRQHandler>:
void USART6_IRQHandler(void){
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	;
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f811 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fdcf 	bl	80001ec <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800065c:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000660:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000664:	2000001c 	.word	0x2000001c

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	; (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	; (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	; (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	; (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
