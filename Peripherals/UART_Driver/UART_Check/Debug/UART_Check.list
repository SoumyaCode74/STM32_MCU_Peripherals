
UART_Check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800157c  0800157c  0001157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001644  08001644  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001644  08001644  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001644  08001644  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001644  08001644  00011644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001648  08001648  00011648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800164c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000fba  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000053f  00000000  00000000  00021089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000168  00000000  00000000  000215c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000f6  00000000  00000000  00021730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bffe  00000000  00000000  00021826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001b0f  00000000  00000000  0003d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000989b5  00000000  00000000  0003f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000c4c  00000000  00000000  000d7ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000d8934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001564 	.word	0x08001564

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08001564 	.word	0x08001564

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
#define APB1_CLK				SYS_FREQ
#define UART_BAUDRATE			9600UL

static void USART1_RX_Callback(void);
/*Tested with ARM Compiler : version 5*/
int main (void){
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	USART1_rx_interrupt_init(APB1_CLK, UART_BAUDRATE);          /* initialize USART2 */
 8000294:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000298:	4813      	ldr	r0, [pc, #76]	; (80002e8 <main+0x58>)
 800029a:	f000 f943 	bl	8000524 <USART1_rx_interrupt_init>

    while(1) {              /* Loop forever */
        /*USART2_write('Y');
        USART2_write('i');*/
    	printf("Hello Soumyadeep, from STM32F401RET%d.........\r\n",6);
 800029e:	2106      	movs	r1, #6
 80002a0:	4812      	ldr	r0, [pc, #72]	; (80002ec <main+0x5c>)
 80002a2:	f000 fa91 	bl	80007c8 <iprintf>
    	delayMs(500);        /* leave a gap between messages */
 80002a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002aa:	f000 f995 	bl	80005d8 <delayMs>
    	printf("Hatti matim tim! Tara mathe pare dim!\r\n");
 80002ae:	4810      	ldr	r0, [pc, #64]	; (80002f0 <main+0x60>)
 80002b0:	f000 faf0 	bl	8000894 <puts>
    	delayMs(500);        /* leave a gap between messages */
 80002b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002b8:	f000 f98e 	bl	80005d8 <delayMs>
    	printf("Tader khara duto shingh!\r\n");
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <main+0x64>)
 80002be:	f000 fae9 	bl	8000894 <puts>
    	delayMs(500);        /* leave a gap between messages */
 80002c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002c6:	f000 f987 	bl	80005d8 <delayMs>
    	printf("Tara hatti matim tim!\r\n");
 80002ca:	480b      	ldr	r0, [pc, #44]	; (80002f8 <main+0x68>)
 80002cc:	f000 fae2 	bl	8000894 <puts>
    	delayMs(500);        /* leave a gap between messages */
 80002d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d4:	f000 f980 	bl	80005d8 <delayMs>
    	printf("\r\n");
 80002d8:	4808      	ldr	r0, [pc, #32]	; (80002fc <main+0x6c>)
 80002da:	f000 fadb 	bl	8000894 <puts>
        delayMs(500);        /* leave a gap between messages */
 80002de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e2:	f000 f979 	bl	80005d8 <delayMs>
    	printf("Hello Soumyadeep, from STM32F401RET%d.........\r\n",6);
 80002e6:	e7da      	b.n	800029e <main+0xe>
 80002e8:	00f42400 	.word	0x00f42400
 80002ec:	0800157c 	.word	0x0800157c
 80002f0:	080015b0 	.word	0x080015b0
 80002f4:	080015d8 	.word	0x080015d8
 80002f8:	080015f4 	.word	0x080015f4
 80002fc:	0800160c 	.word	0x0800160c

08000300 <USART1_IRQHandler>:
    }
}
void USART1_IRQHandler(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	USART1_RX_Callback();
 8000304:	f000 f802 	bl	800030c <USART1_RX_Callback>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}

0800030c <USART1_RX_Callback>:

static void USART1_RX_Callback(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
	static int times = 0;
	++times;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <USART1_RX_Callback+0x38>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <USART1_RX_Callback+0x38>)
 800031a:	6013      	str	r3, [r2, #0]
	char c = USART1->DR; //Read from data register and reset the RXNIE bit
 800031c:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <USART1_RX_Callback+0x3c>)
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	71fb      	strb	r3, [r7, #7]
    while (!((USART1->SR >> 0x7) & 0x1)) {}
 8000322:	bf00      	nop
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <USART1_RX_Callback+0x3c>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <USART1_RX_Callback+0x18>
    USART1->DR = c+1;
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	1c5a      	adds	r2, r3, #1
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <USART1_RX_Callback+0x3c>)
 8000336:	605a      	str	r2, [r3, #4]

//	printf(USART1->DR);
//	printf("Hello, you pressed key %c!\n\r",c);
//	printf("Times interrupted: %d\n\r", times);
//	LED_play(c);
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	20000078 	.word	0x20000078
 8000348:	40011000 	.word	0x40011000

0800034c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	e00a      	b.n	8000374 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800035e:	f3af 8000 	nop.w
 8000362:	4601      	mov	r1, r0
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	1c5a      	adds	r2, r3, #1
 8000368:	60ba      	str	r2, [r7, #8]
 800036a:	b2ca      	uxtb	r2, r1
 800036c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	3301      	adds	r3, #1
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	697a      	ldr	r2, [r7, #20]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	429a      	cmp	r2, r3
 800037a:	dbf0      	blt.n	800035e <_read+0x12>
  }

  return len;
 800037c:	687b      	ldr	r3, [r7, #4]
}
 800037e:	4618      	mov	r0, r3
 8000380:	3718      	adds	r7, #24
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}

08000386 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000386:	b580      	push	{r7, lr}
 8000388:	b086      	sub	sp, #24
 800038a:	af00      	add	r7, sp, #0
 800038c:	60f8      	str	r0, [r7, #12]
 800038e:	60b9      	str	r1, [r7, #8]
 8000390:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
 8000396:	e009      	b.n	80003ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 f90d 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	3301      	adds	r3, #1
 80003aa:	617b      	str	r3, [r7, #20]
 80003ac:	697a      	ldr	r2, [r7, #20]
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	dbf1      	blt.n	8000398 <_write+0x12>
  }
  return len;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3718      	adds	r7, #24
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <_close>:

int _close(int file)
{
 80003be:	b480      	push	{r7}
 80003c0:	b083      	sub	sp, #12
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003d6:	b480      	push	{r7}
 80003d8:	b083      	sub	sp, #12
 80003da:	af00      	add	r7, sp, #0
 80003dc:	6078      	str	r0, [r7, #4]
 80003de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003e6:	605a      	str	r2, [r3, #4]
  return 0;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <_isatty>:

int _isatty(int file)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003fe:	2301      	movs	r3, #1
}
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800040c:	b480      	push	{r7}
 800040e:	b085      	sub	sp, #20
 8000410:	af00      	add	r7, sp, #0
 8000412:	60f8      	str	r0, [r7, #12]
 8000414:	60b9      	str	r1, [r7, #8]
 8000416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000418:	2300      	movs	r3, #0
}
 800041a:	4618      	mov	r0, r3
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
	...

08000428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000430:	4a14      	ldr	r2, [pc, #80]	; (8000484 <_sbrk+0x5c>)
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <_sbrk+0x60>)
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800043c:	4b13      	ldr	r3, [pc, #76]	; (800048c <_sbrk+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d102      	bne.n	800044a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <_sbrk+0x64>)
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <_sbrk+0x68>)
 8000448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800044a:	4b10      	ldr	r3, [pc, #64]	; (800048c <_sbrk+0x64>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4413      	add	r3, r2
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	429a      	cmp	r2, r3
 8000456:	d207      	bcs.n	8000468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000458:	f000 fb4a 	bl	8000af0 <__errno>
 800045c:	4603      	mov	r3, r0
 800045e:	220c      	movs	r2, #12
 8000460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	e009      	b.n	800047c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800046e:	4b07      	ldr	r3, [pc, #28]	; (800048c <_sbrk+0x64>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4413      	add	r3, r2
 8000476:	4a05      	ldr	r2, [pc, #20]	; (800048c <_sbrk+0x64>)
 8000478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800047a:	68fb      	ldr	r3, [r7, #12]
}
 800047c:	4618      	mov	r0, r3
 800047e:	3718      	adds	r7, #24
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	20030000 	.word	0x20030000
 8000488:	00000400 	.word	0x00000400
 800048c:	2000007c 	.word	0x2000007c
 8000490:	200001d0 	.word	0x200001d0

08000494 <USART1_init>:
 *  Created on: 09-Nov-2022
 *      Author: soumy
 */
#include "usart.h"

extern void USART1_init(uint32_t PeriphClk, uint32_t BaudRate) {
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	6039      	str	r1, [r7, #0]

	/*************Configure gpio pin for usart operation***************/
	RCC->AHB1ENR  |= GPIOAEN;						//Enable clock for PORTA
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <USART1_init+0x84>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a1d      	ldr	r2, [pc, #116]	; (8000518 <USART1_init+0x84>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
	/***Configure PA2 and PA3 for alternate functions (AF07)**********/
	GPIOA->MODER  &= ~(0x0F<<9*2); 					//Reset the required positions
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <USART1_init+0x88>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <USART1_init+0x88>)
 80004b0:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80004b4:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  |= (0x0A<<9*2); 					//Configure direction for alternate function
 80004b6:	4b19      	ldr	r3, [pc, #100]	; (800051c <USART1_init+0x88>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a18      	ldr	r2, [pc, #96]	; (800051c <USART1_init+0x88>)
 80004bc:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 80004c0:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[9/8] &= ~(0xFF<<((9%8)*4)); 					//Reset the required positions
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <USART1_init+0x88>)
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	4a15      	ldr	r2, [pc, #84]	; (800051c <USART1_init+0x88>)
 80004c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80004cc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[9/8] |= (0x77<<((9%8)*4)); 					//Configure for AF07 for both PA2 and PA3
 80004ce:	4b13      	ldr	r3, [pc, #76]	; (800051c <USART1_init+0x88>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <USART1_init+0x88>)
 80004d4:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 80004d8:	6253      	str	r3, [r2, #36]	; 0x24
	/*************Configure usart module for transmission**************/
	RCC->APB2ENR  |= USART1EN; 						//Enable clock access to USART2 peripheral
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <USART1_init+0x84>)
 80004dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <USART1_init+0x84>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6453      	str	r3, [r2, #68]	; 0x44
	uart_set_baudrate(USART1, PeriphClk, BaudRate); //Configure USART2 baud rate
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	480d      	ldr	r0, [pc, #52]	; (8000520 <USART1_init+0x8c>)
 80004ec:	f000 f83a 	bl	8000564 <uart_set_baudrate>
	USART1->CR1    = CR1_TE; 						//Activate transmitter
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <USART1_init+0x8c>)
 80004f2:	2208      	movs	r2, #8
 80004f4:	60da      	str	r2, [r3, #12]
	USART1->CR1   |= CR1_RE;						//Activate receiver
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <USART1_init+0x8c>)
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	4a09      	ldr	r2, [pc, #36]	; (8000520 <USART1_init+0x8c>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	60d3      	str	r3, [r2, #12]
	USART1->CR1   |= CR1_UE;						//Enable the USART module
 8000502:	4b07      	ldr	r3, [pc, #28]	; (8000520 <USART1_init+0x8c>)
 8000504:	68db      	ldr	r3, [r3, #12]
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <USART1_init+0x8c>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050c:	60d3      	str	r3, [r2, #12]

    USART2->BRR = 0x0683;       // 9600  @ 16 MHz
    USART2->CR1 = 0x0008;       // enable Tx
    USART2->CR1 |= 0x2000;      // enable USART2
    */
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800
 800051c:	40020000 	.word	0x40020000
 8000520:	40011000 	.word	0x40011000

08000524 <USART1_rx_interrupt_init>:
void USART1_rx_interrupt_init(uint32_t PeriphClk, uint32_t Baud_rate)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
	 * Activate the RXNIE interrupt bit in USART2_CR register
	 * Identify IRQ number from NVIQ table
	 * Enable interrupt from respective ISER register of NVIQ file
	 * Enable global interrupts
	 */
	__asm volatile("CPSID I"); //Disable global interrupts
 800052e:	b672      	cpsid	i
//	RCC->APB2ENR |= (1U << 4);
	USART1_init(PeriphClk, Baud_rate);
 8000530:	6839      	ldr	r1, [r7, #0]
 8000532:	6878      	ldr	r0, [r7, #4]
 8000534:	f7ff ffae 	bl	8000494 <USART1_init>
	USART1->CR1 |= (1U << 5);
 8000538:	4b08      	ldr	r3, [pc, #32]	; (800055c <USART1_rx_interrupt_init+0x38>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a07      	ldr	r2, [pc, #28]	; (800055c <USART1_rx_interrupt_init+0x38>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	60d3      	str	r3, [r2, #12]
	NVIC->ISER[1] |= (1U << 5); //IRQ37 for USART1
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <USART1_rx_interrupt_init+0x3c>)
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	4a05      	ldr	r2, [pc, #20]	; (8000560 <USART1_rx_interrupt_init+0x3c>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6053      	str	r3, [r2, #4]
	__asm volatile("CPSIE I"); //Enable global interrupts
 8000550:	b662      	cpsie	i
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40011000 	.word	0x40011000
 8000560:	e000e100 	.word	0xe000e100

08000564 <uart_set_baudrate>:
void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	USARTx->BRR = BAUD_RATE_SET(PeriphClk, BaudRate);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	085a      	lsrs	r2, r3, #1
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	441a      	add	r2, r3
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	fbb2 f2f3 	udiv	r2, r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	609a      	str	r2, [r3, #8]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <USART1_write>:

extern void USART1_write (int ch) {
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
     // wait until Tx buffer empty
    while (!(USART1->SR & 0x0080)) {}
 8000598:	bf00      	nop
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <USART1_write+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <USART1_write+0xa>
    USART1->DR = (ch & 0xFF);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <USART1_write+0x2c>)
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	6053      	str	r3, [r2, #4]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40011000 	.word	0x40011000

080005c0 <__io_putchar>:
int __io_putchar(int ch){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	USART1_write(ch);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ffe1 	bl	8000590 <USART1_write>
	return ch;
 80005ce:	687b      	ldr	r3, [r7, #4]
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <delayMs>:

extern void delayMs(int delay) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    int i;
    for (; delay > 0; delay--)
 80005e0:	e00d      	b.n	80005fe <delayMs+0x26>
        for (i = 0; i < 3195; i++) ;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e002      	b.n	80005ee <delayMs+0x16>
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f640 427a 	movw	r2, #3194	; 0xc7a
 80005f4:	4293      	cmp	r3, r2
 80005f6:	ddf7      	ble.n	80005e8 <delayMs+0x10>
    for (; delay > 0; delay--)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	dcee      	bgt.n	80005e2 <delayMs+0xa>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
	...

08000614 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000616:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000618:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000642:	f000 fa5b 	bl	8000afc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fe23 	bl	8000290 <main>

0800064a <LoopForever>:

LoopForever:
  b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   r0, =_estack
 800064c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000658:	0800164c 	.word	0x0800164c
  ldr r2, =_sbss
 800065c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000660:	200001cc 	.word	0x200001cc

08000664 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC_IRQHandler>
	...

08000668 <std>:
 8000668:	2300      	movs	r3, #0
 800066a:	b510      	push	{r4, lr}
 800066c:	4604      	mov	r4, r0
 800066e:	e9c0 3300 	strd	r3, r3, [r0]
 8000672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000676:	6083      	str	r3, [r0, #8]
 8000678:	8181      	strh	r1, [r0, #12]
 800067a:	6643      	str	r3, [r0, #100]	; 0x64
 800067c:	81c2      	strh	r2, [r0, #14]
 800067e:	6183      	str	r3, [r0, #24]
 8000680:	4619      	mov	r1, r3
 8000682:	2208      	movs	r2, #8
 8000684:	305c      	adds	r0, #92	; 0x5c
 8000686:	f000 f9e5 	bl	8000a54 <memset>
 800068a:	4b05      	ldr	r3, [pc, #20]	; (80006a0 <std+0x38>)
 800068c:	6263      	str	r3, [r4, #36]	; 0x24
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <std+0x3c>)
 8000690:	62a3      	str	r3, [r4, #40]	; 0x28
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <std+0x40>)
 8000694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <std+0x44>)
 8000698:	6224      	str	r4, [r4, #32]
 800069a:	6323      	str	r3, [r4, #48]	; 0x30
 800069c:	bd10      	pop	{r4, pc}
 800069e:	bf00      	nop
 80006a0:	080008a5 	.word	0x080008a5
 80006a4:	080008c7 	.word	0x080008c7
 80006a8:	080008ff 	.word	0x080008ff
 80006ac:	08000923 	.word	0x08000923

080006b0 <stdio_exit_handler>:
 80006b0:	4a02      	ldr	r2, [pc, #8]	; (80006bc <stdio_exit_handler+0xc>)
 80006b2:	4903      	ldr	r1, [pc, #12]	; (80006c0 <stdio_exit_handler+0x10>)
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <stdio_exit_handler+0x14>)
 80006b6:	f000 b869 	b.w	800078c <_fwalk_sglue>
 80006ba:	bf00      	nop
 80006bc:	20000000 	.word	0x20000000
 80006c0:	080013ed 	.word	0x080013ed
 80006c4:	2000000c 	.word	0x2000000c

080006c8 <cleanup_stdio>:
 80006c8:	6841      	ldr	r1, [r0, #4]
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <cleanup_stdio+0x34>)
 80006cc:	4299      	cmp	r1, r3
 80006ce:	b510      	push	{r4, lr}
 80006d0:	4604      	mov	r4, r0
 80006d2:	d001      	beq.n	80006d8 <cleanup_stdio+0x10>
 80006d4:	f000 fe8a 	bl	80013ec <_fflush_r>
 80006d8:	68a1      	ldr	r1, [r4, #8]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <cleanup_stdio+0x38>)
 80006dc:	4299      	cmp	r1, r3
 80006de:	d002      	beq.n	80006e6 <cleanup_stdio+0x1e>
 80006e0:	4620      	mov	r0, r4
 80006e2:	f000 fe83 	bl	80013ec <_fflush_r>
 80006e6:	68e1      	ldr	r1, [r4, #12]
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <cleanup_stdio+0x3c>)
 80006ea:	4299      	cmp	r1, r3
 80006ec:	d004      	beq.n	80006f8 <cleanup_stdio+0x30>
 80006ee:	4620      	mov	r0, r4
 80006f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006f4:	f000 be7a 	b.w	80013ec <_fflush_r>
 80006f8:	bd10      	pop	{r4, pc}
 80006fa:	bf00      	nop
 80006fc:	20000080 	.word	0x20000080
 8000700:	200000e8 	.word	0x200000e8
 8000704:	20000150 	.word	0x20000150

08000708 <global_stdio_init.part.0>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <global_stdio_init.part.0+0x30>)
 800070c:	4c0b      	ldr	r4, [pc, #44]	; (800073c <global_stdio_init.part.0+0x34>)
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <global_stdio_init.part.0+0x38>)
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	4620      	mov	r0, r4
 8000714:	2200      	movs	r2, #0
 8000716:	2104      	movs	r1, #4
 8000718:	f7ff ffa6 	bl	8000668 <std>
 800071c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000720:	2201      	movs	r2, #1
 8000722:	2109      	movs	r1, #9
 8000724:	f7ff ffa0 	bl	8000668 <std>
 8000728:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800072c:	2202      	movs	r2, #2
 800072e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000732:	2112      	movs	r1, #18
 8000734:	f7ff bf98 	b.w	8000668 <std>
 8000738:	200001b8 	.word	0x200001b8
 800073c:	20000080 	.word	0x20000080
 8000740:	080006b1 	.word	0x080006b1

08000744 <__sfp_lock_acquire>:
 8000744:	4801      	ldr	r0, [pc, #4]	; (800074c <__sfp_lock_acquire+0x8>)
 8000746:	f000 b9fd 	b.w	8000b44 <__retarget_lock_acquire_recursive>
 800074a:	bf00      	nop
 800074c:	200001c1 	.word	0x200001c1

08000750 <__sfp_lock_release>:
 8000750:	4801      	ldr	r0, [pc, #4]	; (8000758 <__sfp_lock_release+0x8>)
 8000752:	f000 b9f8 	b.w	8000b46 <__retarget_lock_release_recursive>
 8000756:	bf00      	nop
 8000758:	200001c1 	.word	0x200001c1

0800075c <__sinit>:
 800075c:	b510      	push	{r4, lr}
 800075e:	4604      	mov	r4, r0
 8000760:	f7ff fff0 	bl	8000744 <__sfp_lock_acquire>
 8000764:	6a23      	ldr	r3, [r4, #32]
 8000766:	b11b      	cbz	r3, 8000770 <__sinit+0x14>
 8000768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800076c:	f7ff bff0 	b.w	8000750 <__sfp_lock_release>
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <__sinit+0x28>)
 8000772:	6223      	str	r3, [r4, #32]
 8000774:	4b04      	ldr	r3, [pc, #16]	; (8000788 <__sinit+0x2c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1f5      	bne.n	8000768 <__sinit+0xc>
 800077c:	f7ff ffc4 	bl	8000708 <global_stdio_init.part.0>
 8000780:	e7f2      	b.n	8000768 <__sinit+0xc>
 8000782:	bf00      	nop
 8000784:	080006c9 	.word	0x080006c9
 8000788:	200001b8 	.word	0x200001b8

0800078c <_fwalk_sglue>:
 800078c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000790:	4607      	mov	r7, r0
 8000792:	4688      	mov	r8, r1
 8000794:	4614      	mov	r4, r2
 8000796:	2600      	movs	r6, #0
 8000798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800079c:	f1b9 0901 	subs.w	r9, r9, #1
 80007a0:	d505      	bpl.n	80007ae <_fwalk_sglue+0x22>
 80007a2:	6824      	ldr	r4, [r4, #0]
 80007a4:	2c00      	cmp	r4, #0
 80007a6:	d1f7      	bne.n	8000798 <_fwalk_sglue+0xc>
 80007a8:	4630      	mov	r0, r6
 80007aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ae:	89ab      	ldrh	r3, [r5, #12]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d907      	bls.n	80007c4 <_fwalk_sglue+0x38>
 80007b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007b8:	3301      	adds	r3, #1
 80007ba:	d003      	beq.n	80007c4 <_fwalk_sglue+0x38>
 80007bc:	4629      	mov	r1, r5
 80007be:	4638      	mov	r0, r7
 80007c0:	47c0      	blx	r8
 80007c2:	4306      	orrs	r6, r0
 80007c4:	3568      	adds	r5, #104	; 0x68
 80007c6:	e7e9      	b.n	800079c <_fwalk_sglue+0x10>

080007c8 <iprintf>:
 80007c8:	b40f      	push	{r0, r1, r2, r3}
 80007ca:	b507      	push	{r0, r1, r2, lr}
 80007cc:	4906      	ldr	r1, [pc, #24]	; (80007e8 <iprintf+0x20>)
 80007ce:	ab04      	add	r3, sp, #16
 80007d0:	6808      	ldr	r0, [r1, #0]
 80007d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80007d6:	6881      	ldr	r1, [r0, #8]
 80007d8:	9301      	str	r3, [sp, #4]
 80007da:	f000 fad7 	bl	8000d8c <_vfiprintf_r>
 80007de:	b003      	add	sp, #12
 80007e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr
 80007e8:	20000058 	.word	0x20000058

080007ec <_puts_r>:
 80007ec:	6a03      	ldr	r3, [r0, #32]
 80007ee:	b570      	push	{r4, r5, r6, lr}
 80007f0:	6884      	ldr	r4, [r0, #8]
 80007f2:	4605      	mov	r5, r0
 80007f4:	460e      	mov	r6, r1
 80007f6:	b90b      	cbnz	r3, 80007fc <_puts_r+0x10>
 80007f8:	f7ff ffb0 	bl	800075c <__sinit>
 80007fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007fe:	07db      	lsls	r3, r3, #31
 8000800:	d405      	bmi.n	800080e <_puts_r+0x22>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	0598      	lsls	r0, r3, #22
 8000806:	d402      	bmi.n	800080e <_puts_r+0x22>
 8000808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800080a:	f000 f99b 	bl	8000b44 <__retarget_lock_acquire_recursive>
 800080e:	89a3      	ldrh	r3, [r4, #12]
 8000810:	0719      	lsls	r1, r3, #28
 8000812:	d513      	bpl.n	800083c <_puts_r+0x50>
 8000814:	6923      	ldr	r3, [r4, #16]
 8000816:	b18b      	cbz	r3, 800083c <_puts_r+0x50>
 8000818:	3e01      	subs	r6, #1
 800081a:	68a3      	ldr	r3, [r4, #8]
 800081c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000820:	3b01      	subs	r3, #1
 8000822:	60a3      	str	r3, [r4, #8]
 8000824:	b9e9      	cbnz	r1, 8000862 <_puts_r+0x76>
 8000826:	2b00      	cmp	r3, #0
 8000828:	da2e      	bge.n	8000888 <_puts_r+0x9c>
 800082a:	4622      	mov	r2, r4
 800082c:	210a      	movs	r1, #10
 800082e:	4628      	mov	r0, r5
 8000830:	f000 f87b 	bl	800092a <__swbuf_r>
 8000834:	3001      	adds	r0, #1
 8000836:	d007      	beq.n	8000848 <_puts_r+0x5c>
 8000838:	250a      	movs	r5, #10
 800083a:	e007      	b.n	800084c <_puts_r+0x60>
 800083c:	4621      	mov	r1, r4
 800083e:	4628      	mov	r0, r5
 8000840:	f000 f8b0 	bl	80009a4 <__swsetup_r>
 8000844:	2800      	cmp	r0, #0
 8000846:	d0e7      	beq.n	8000818 <_puts_r+0x2c>
 8000848:	f04f 35ff 	mov.w	r5, #4294967295
 800084c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084e:	07da      	lsls	r2, r3, #31
 8000850:	d405      	bmi.n	800085e <_puts_r+0x72>
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	059b      	lsls	r3, r3, #22
 8000856:	d402      	bmi.n	800085e <_puts_r+0x72>
 8000858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800085a:	f000 f974 	bl	8000b46 <__retarget_lock_release_recursive>
 800085e:	4628      	mov	r0, r5
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	2b00      	cmp	r3, #0
 8000864:	da04      	bge.n	8000870 <_puts_r+0x84>
 8000866:	69a2      	ldr	r2, [r4, #24]
 8000868:	429a      	cmp	r2, r3
 800086a:	dc06      	bgt.n	800087a <_puts_r+0x8e>
 800086c:	290a      	cmp	r1, #10
 800086e:	d004      	beq.n	800087a <_puts_r+0x8e>
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	6022      	str	r2, [r4, #0]
 8000876:	7019      	strb	r1, [r3, #0]
 8000878:	e7cf      	b.n	800081a <_puts_r+0x2e>
 800087a:	4622      	mov	r2, r4
 800087c:	4628      	mov	r0, r5
 800087e:	f000 f854 	bl	800092a <__swbuf_r>
 8000882:	3001      	adds	r0, #1
 8000884:	d1c9      	bne.n	800081a <_puts_r+0x2e>
 8000886:	e7df      	b.n	8000848 <_puts_r+0x5c>
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	250a      	movs	r5, #10
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	6022      	str	r2, [r4, #0]
 8000890:	701d      	strb	r5, [r3, #0]
 8000892:	e7db      	b.n	800084c <_puts_r+0x60>

08000894 <puts>:
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <puts+0xc>)
 8000896:	4601      	mov	r1, r0
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	f7ff bfa7 	b.w	80007ec <_puts_r>
 800089e:	bf00      	nop
 80008a0:	20000058 	.word	0x20000058

080008a4 <__sread>:
 80008a4:	b510      	push	{r4, lr}
 80008a6:	460c      	mov	r4, r1
 80008a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ac:	f000 f8fc 	bl	8000aa8 <_read_r>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	bfab      	itete	ge
 80008b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008b6:	89a3      	ldrhlt	r3, [r4, #12]
 80008b8:	181b      	addge	r3, r3, r0
 80008ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008be:	bfac      	ite	ge
 80008c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80008c2:	81a3      	strhlt	r3, [r4, #12]
 80008c4:	bd10      	pop	{r4, pc}

080008c6 <__swrite>:
 80008c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ca:	461f      	mov	r7, r3
 80008cc:	898b      	ldrh	r3, [r1, #12]
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	4605      	mov	r5, r0
 80008d2:	460c      	mov	r4, r1
 80008d4:	4616      	mov	r6, r2
 80008d6:	d505      	bpl.n	80008e4 <__swrite+0x1e>
 80008d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008dc:	2302      	movs	r3, #2
 80008de:	2200      	movs	r2, #0
 80008e0:	f000 f8d0 	bl	8000a84 <_lseek_r>
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	4632      	mov	r2, r6
 80008f2:	463b      	mov	r3, r7
 80008f4:	4628      	mov	r0, r5
 80008f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008fa:	f000 b8e7 	b.w	8000acc <_write_r>

080008fe <__sseek>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	460c      	mov	r4, r1
 8000902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000906:	f000 f8bd 	bl	8000a84 <_lseek_r>
 800090a:	1c43      	adds	r3, r0, #1
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	bf15      	itete	ne
 8000910:	6560      	strne	r0, [r4, #84]	; 0x54
 8000912:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000916:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800091a:	81a3      	strheq	r3, [r4, #12]
 800091c:	bf18      	it	ne
 800091e:	81a3      	strhne	r3, [r4, #12]
 8000920:	bd10      	pop	{r4, pc}

08000922 <__sclose>:
 8000922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000926:	f000 b89d 	b.w	8000a64 <_close_r>

0800092a <__swbuf_r>:
 800092a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092c:	460e      	mov	r6, r1
 800092e:	4614      	mov	r4, r2
 8000930:	4605      	mov	r5, r0
 8000932:	b118      	cbz	r0, 800093c <__swbuf_r+0x12>
 8000934:	6a03      	ldr	r3, [r0, #32]
 8000936:	b90b      	cbnz	r3, 800093c <__swbuf_r+0x12>
 8000938:	f7ff ff10 	bl	800075c <__sinit>
 800093c:	69a3      	ldr	r3, [r4, #24]
 800093e:	60a3      	str	r3, [r4, #8]
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	071a      	lsls	r2, r3, #28
 8000944:	d525      	bpl.n	8000992 <__swbuf_r+0x68>
 8000946:	6923      	ldr	r3, [r4, #16]
 8000948:	b31b      	cbz	r3, 8000992 <__swbuf_r+0x68>
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	6922      	ldr	r2, [r4, #16]
 800094e:	1a98      	subs	r0, r3, r2
 8000950:	6963      	ldr	r3, [r4, #20]
 8000952:	b2f6      	uxtb	r6, r6
 8000954:	4283      	cmp	r3, r0
 8000956:	4637      	mov	r7, r6
 8000958:	dc04      	bgt.n	8000964 <__swbuf_r+0x3a>
 800095a:	4621      	mov	r1, r4
 800095c:	4628      	mov	r0, r5
 800095e:	f000 fd45 	bl	80013ec <_fflush_r>
 8000962:	b9e0      	cbnz	r0, 800099e <__swbuf_r+0x74>
 8000964:	68a3      	ldr	r3, [r4, #8]
 8000966:	3b01      	subs	r3, #1
 8000968:	60a3      	str	r3, [r4, #8]
 800096a:	6823      	ldr	r3, [r4, #0]
 800096c:	1c5a      	adds	r2, r3, #1
 800096e:	6022      	str	r2, [r4, #0]
 8000970:	701e      	strb	r6, [r3, #0]
 8000972:	6962      	ldr	r2, [r4, #20]
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	429a      	cmp	r2, r3
 8000978:	d004      	beq.n	8000984 <__swbuf_r+0x5a>
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	07db      	lsls	r3, r3, #31
 800097e:	d506      	bpl.n	800098e <__swbuf_r+0x64>
 8000980:	2e0a      	cmp	r6, #10
 8000982:	d104      	bne.n	800098e <__swbuf_r+0x64>
 8000984:	4621      	mov	r1, r4
 8000986:	4628      	mov	r0, r5
 8000988:	f000 fd30 	bl	80013ec <_fflush_r>
 800098c:	b938      	cbnz	r0, 800099e <__swbuf_r+0x74>
 800098e:	4638      	mov	r0, r7
 8000990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000992:	4621      	mov	r1, r4
 8000994:	4628      	mov	r0, r5
 8000996:	f000 f805 	bl	80009a4 <__swsetup_r>
 800099a:	2800      	cmp	r0, #0
 800099c:	d0d5      	beq.n	800094a <__swbuf_r+0x20>
 800099e:	f04f 37ff 	mov.w	r7, #4294967295
 80009a2:	e7f4      	b.n	800098e <__swbuf_r+0x64>

080009a4 <__swsetup_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <__swsetup_r+0xac>)
 80009a8:	4605      	mov	r5, r0
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	460c      	mov	r4, r1
 80009ae:	b118      	cbz	r0, 80009b8 <__swsetup_r+0x14>
 80009b0:	6a03      	ldr	r3, [r0, #32]
 80009b2:	b90b      	cbnz	r3, 80009b8 <__swsetup_r+0x14>
 80009b4:	f7ff fed2 	bl	800075c <__sinit>
 80009b8:	89a3      	ldrh	r3, [r4, #12]
 80009ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009be:	0718      	lsls	r0, r3, #28
 80009c0:	d422      	bmi.n	8000a08 <__swsetup_r+0x64>
 80009c2:	06d9      	lsls	r1, r3, #27
 80009c4:	d407      	bmi.n	80009d6 <__swsetup_r+0x32>
 80009c6:	2309      	movs	r3, #9
 80009c8:	602b      	str	r3, [r5, #0]
 80009ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009ce:	81a3      	strh	r3, [r4, #12]
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	e034      	b.n	8000a40 <__swsetup_r+0x9c>
 80009d6:	0758      	lsls	r0, r3, #29
 80009d8:	d512      	bpl.n	8000a00 <__swsetup_r+0x5c>
 80009da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009dc:	b141      	cbz	r1, 80009f0 <__swsetup_r+0x4c>
 80009de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e2:	4299      	cmp	r1, r3
 80009e4:	d002      	beq.n	80009ec <__swsetup_r+0x48>
 80009e6:	4628      	mov	r0, r5
 80009e8:	f000 f8ae 	bl	8000b48 <_free_r>
 80009ec:	2300      	movs	r3, #0
 80009ee:	6363      	str	r3, [r4, #52]	; 0x34
 80009f0:	89a3      	ldrh	r3, [r4, #12]
 80009f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009f6:	81a3      	strh	r3, [r4, #12]
 80009f8:	2300      	movs	r3, #0
 80009fa:	6063      	str	r3, [r4, #4]
 80009fc:	6923      	ldr	r3, [r4, #16]
 80009fe:	6023      	str	r3, [r4, #0]
 8000a00:	89a3      	ldrh	r3, [r4, #12]
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	81a3      	strh	r3, [r4, #12]
 8000a08:	6923      	ldr	r3, [r4, #16]
 8000a0a:	b94b      	cbnz	r3, 8000a20 <__swsetup_r+0x7c>
 8000a0c:	89a3      	ldrh	r3, [r4, #12]
 8000a0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a16:	d003      	beq.n	8000a20 <__swsetup_r+0x7c>
 8000a18:	4621      	mov	r1, r4
 8000a1a:	4628      	mov	r0, r5
 8000a1c:	f000 fd34 	bl	8001488 <__smakebuf_r>
 8000a20:	89a0      	ldrh	r0, [r4, #12]
 8000a22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a26:	f010 0301 	ands.w	r3, r0, #1
 8000a2a:	d00a      	beq.n	8000a42 <__swsetup_r+0x9e>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60a3      	str	r3, [r4, #8]
 8000a30:	6963      	ldr	r3, [r4, #20]
 8000a32:	425b      	negs	r3, r3
 8000a34:	61a3      	str	r3, [r4, #24]
 8000a36:	6923      	ldr	r3, [r4, #16]
 8000a38:	b943      	cbnz	r3, 8000a4c <__swsetup_r+0xa8>
 8000a3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a3e:	d1c4      	bne.n	80009ca <__swsetup_r+0x26>
 8000a40:	bd38      	pop	{r3, r4, r5, pc}
 8000a42:	0781      	lsls	r1, r0, #30
 8000a44:	bf58      	it	pl
 8000a46:	6963      	ldrpl	r3, [r4, #20]
 8000a48:	60a3      	str	r3, [r4, #8]
 8000a4a:	e7f4      	b.n	8000a36 <__swsetup_r+0x92>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e7f7      	b.n	8000a40 <__swsetup_r+0x9c>
 8000a50:	20000058 	.word	0x20000058

08000a54 <memset>:
 8000a54:	4402      	add	r2, r0
 8000a56:	4603      	mov	r3, r0
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d100      	bne.n	8000a5e <memset+0xa>
 8000a5c:	4770      	bx	lr
 8000a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8000a62:	e7f9      	b.n	8000a58 <memset+0x4>

08000a64 <_close_r>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d06      	ldr	r5, [pc, #24]	; (8000a80 <_close_r+0x1c>)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	602b      	str	r3, [r5, #0]
 8000a70:	f7ff fca5 	bl	80003be <_close>
 8000a74:	1c43      	adds	r3, r0, #1
 8000a76:	d102      	bne.n	8000a7e <_close_r+0x1a>
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	b103      	cbz	r3, 8000a7e <_close_r+0x1a>
 8000a7c:	6023      	str	r3, [r4, #0]
 8000a7e:	bd38      	pop	{r3, r4, r5, pc}
 8000a80:	200001bc 	.word	0x200001bc

08000a84 <_lseek_r>:
 8000a84:	b538      	push	{r3, r4, r5, lr}
 8000a86:	4d07      	ldr	r5, [pc, #28]	; (8000aa4 <_lseek_r+0x20>)
 8000a88:	4604      	mov	r4, r0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	2200      	movs	r2, #0
 8000a90:	602a      	str	r2, [r5, #0]
 8000a92:	461a      	mov	r2, r3
 8000a94:	f7ff fcba 	bl	800040c <_lseek>
 8000a98:	1c43      	adds	r3, r0, #1
 8000a9a:	d102      	bne.n	8000aa2 <_lseek_r+0x1e>
 8000a9c:	682b      	ldr	r3, [r5, #0]
 8000a9e:	b103      	cbz	r3, 8000aa2 <_lseek_r+0x1e>
 8000aa0:	6023      	str	r3, [r4, #0]
 8000aa2:	bd38      	pop	{r3, r4, r5, pc}
 8000aa4:	200001bc 	.word	0x200001bc

08000aa8 <_read_r>:
 8000aa8:	b538      	push	{r3, r4, r5, lr}
 8000aaa:	4d07      	ldr	r5, [pc, #28]	; (8000ac8 <_read_r+0x20>)
 8000aac:	4604      	mov	r4, r0
 8000aae:	4608      	mov	r0, r1
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	602a      	str	r2, [r5, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f7ff fc48 	bl	800034c <_read>
 8000abc:	1c43      	adds	r3, r0, #1
 8000abe:	d102      	bne.n	8000ac6 <_read_r+0x1e>
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	b103      	cbz	r3, 8000ac6 <_read_r+0x1e>
 8000ac4:	6023      	str	r3, [r4, #0]
 8000ac6:	bd38      	pop	{r3, r4, r5, pc}
 8000ac8:	200001bc 	.word	0x200001bc

08000acc <_write_r>:
 8000acc:	b538      	push	{r3, r4, r5, lr}
 8000ace:	4d07      	ldr	r5, [pc, #28]	; (8000aec <_write_r+0x20>)
 8000ad0:	4604      	mov	r4, r0
 8000ad2:	4608      	mov	r0, r1
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	602a      	str	r2, [r5, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	f7ff fc53 	bl	8000386 <_write>
 8000ae0:	1c43      	adds	r3, r0, #1
 8000ae2:	d102      	bne.n	8000aea <_write_r+0x1e>
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	b103      	cbz	r3, 8000aea <_write_r+0x1e>
 8000ae8:	6023      	str	r3, [r4, #0]
 8000aea:	bd38      	pop	{r3, r4, r5, pc}
 8000aec:	200001bc 	.word	0x200001bc

08000af0 <__errno>:
 8000af0:	4b01      	ldr	r3, [pc, #4]	; (8000af8 <__errno+0x8>)
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000058 	.word	0x20000058

08000afc <__libc_init_array>:
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	4d0d      	ldr	r5, [pc, #52]	; (8000b34 <__libc_init_array+0x38>)
 8000b00:	4c0d      	ldr	r4, [pc, #52]	; (8000b38 <__libc_init_array+0x3c>)
 8000b02:	1b64      	subs	r4, r4, r5
 8000b04:	10a4      	asrs	r4, r4, #2
 8000b06:	2600      	movs	r6, #0
 8000b08:	42a6      	cmp	r6, r4
 8000b0a:	d109      	bne.n	8000b20 <__libc_init_array+0x24>
 8000b0c:	4d0b      	ldr	r5, [pc, #44]	; (8000b3c <__libc_init_array+0x40>)
 8000b0e:	4c0c      	ldr	r4, [pc, #48]	; (8000b40 <__libc_init_array+0x44>)
 8000b10:	f000 fd28 	bl	8001564 <_init>
 8000b14:	1b64      	subs	r4, r4, r5
 8000b16:	10a4      	asrs	r4, r4, #2
 8000b18:	2600      	movs	r6, #0
 8000b1a:	42a6      	cmp	r6, r4
 8000b1c:	d105      	bne.n	8000b2a <__libc_init_array+0x2e>
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}
 8000b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b24:	4798      	blx	r3
 8000b26:	3601      	adds	r6, #1
 8000b28:	e7ee      	b.n	8000b08 <__libc_init_array+0xc>
 8000b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2e:	4798      	blx	r3
 8000b30:	3601      	adds	r6, #1
 8000b32:	e7f2      	b.n	8000b1a <__libc_init_array+0x1e>
 8000b34:	08001644 	.word	0x08001644
 8000b38:	08001644 	.word	0x08001644
 8000b3c:	08001644 	.word	0x08001644
 8000b40:	08001648 	.word	0x08001648

08000b44 <__retarget_lock_acquire_recursive>:
 8000b44:	4770      	bx	lr

08000b46 <__retarget_lock_release_recursive>:
 8000b46:	4770      	bx	lr

08000b48 <_free_r>:
 8000b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d044      	beq.n	8000bd8 <_free_r+0x90>
 8000b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b52:	9001      	str	r0, [sp, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f1a1 0404 	sub.w	r4, r1, #4
 8000b5a:	bfb8      	it	lt
 8000b5c:	18e4      	addlt	r4, r4, r3
 8000b5e:	f000 f8df 	bl	8000d20 <__malloc_lock>
 8000b62:	4a1e      	ldr	r2, [pc, #120]	; (8000bdc <_free_r+0x94>)
 8000b64:	9801      	ldr	r0, [sp, #4]
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	b933      	cbnz	r3, 8000b78 <_free_r+0x30>
 8000b6a:	6063      	str	r3, [r4, #4]
 8000b6c:	6014      	str	r4, [r2, #0]
 8000b6e:	b003      	add	sp, #12
 8000b70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b74:	f000 b8da 	b.w	8000d2c <__malloc_unlock>
 8000b78:	42a3      	cmp	r3, r4
 8000b7a:	d908      	bls.n	8000b8e <_free_r+0x46>
 8000b7c:	6825      	ldr	r5, [r4, #0]
 8000b7e:	1961      	adds	r1, r4, r5
 8000b80:	428b      	cmp	r3, r1
 8000b82:	bf01      	itttt	eq
 8000b84:	6819      	ldreq	r1, [r3, #0]
 8000b86:	685b      	ldreq	r3, [r3, #4]
 8000b88:	1949      	addeq	r1, r1, r5
 8000b8a:	6021      	streq	r1, [r4, #0]
 8000b8c:	e7ed      	b.n	8000b6a <_free_r+0x22>
 8000b8e:	461a      	mov	r2, r3
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	b10b      	cbz	r3, 8000b98 <_free_r+0x50>
 8000b94:	42a3      	cmp	r3, r4
 8000b96:	d9fa      	bls.n	8000b8e <_free_r+0x46>
 8000b98:	6811      	ldr	r1, [r2, #0]
 8000b9a:	1855      	adds	r5, r2, r1
 8000b9c:	42a5      	cmp	r5, r4
 8000b9e:	d10b      	bne.n	8000bb8 <_free_r+0x70>
 8000ba0:	6824      	ldr	r4, [r4, #0]
 8000ba2:	4421      	add	r1, r4
 8000ba4:	1854      	adds	r4, r2, r1
 8000ba6:	42a3      	cmp	r3, r4
 8000ba8:	6011      	str	r1, [r2, #0]
 8000baa:	d1e0      	bne.n	8000b6e <_free_r+0x26>
 8000bac:	681c      	ldr	r4, [r3, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	6053      	str	r3, [r2, #4]
 8000bb2:	440c      	add	r4, r1
 8000bb4:	6014      	str	r4, [r2, #0]
 8000bb6:	e7da      	b.n	8000b6e <_free_r+0x26>
 8000bb8:	d902      	bls.n	8000bc0 <_free_r+0x78>
 8000bba:	230c      	movs	r3, #12
 8000bbc:	6003      	str	r3, [r0, #0]
 8000bbe:	e7d6      	b.n	8000b6e <_free_r+0x26>
 8000bc0:	6825      	ldr	r5, [r4, #0]
 8000bc2:	1961      	adds	r1, r4, r5
 8000bc4:	428b      	cmp	r3, r1
 8000bc6:	bf04      	itt	eq
 8000bc8:	6819      	ldreq	r1, [r3, #0]
 8000bca:	685b      	ldreq	r3, [r3, #4]
 8000bcc:	6063      	str	r3, [r4, #4]
 8000bce:	bf04      	itt	eq
 8000bd0:	1949      	addeq	r1, r1, r5
 8000bd2:	6021      	streq	r1, [r4, #0]
 8000bd4:	6054      	str	r4, [r2, #4]
 8000bd6:	e7ca      	b.n	8000b6e <_free_r+0x26>
 8000bd8:	b003      	add	sp, #12
 8000bda:	bd30      	pop	{r4, r5, pc}
 8000bdc:	200001c4 	.word	0x200001c4

08000be0 <sbrk_aligned>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	4e0e      	ldr	r6, [pc, #56]	; (8000c1c <sbrk_aligned+0x3c>)
 8000be4:	460c      	mov	r4, r1
 8000be6:	6831      	ldr	r1, [r6, #0]
 8000be8:	4605      	mov	r5, r0
 8000bea:	b911      	cbnz	r1, 8000bf2 <sbrk_aligned+0x12>
 8000bec:	f000 fcaa 	bl	8001544 <_sbrk_r>
 8000bf0:	6030      	str	r0, [r6, #0]
 8000bf2:	4621      	mov	r1, r4
 8000bf4:	4628      	mov	r0, r5
 8000bf6:	f000 fca5 	bl	8001544 <_sbrk_r>
 8000bfa:	1c43      	adds	r3, r0, #1
 8000bfc:	d00a      	beq.n	8000c14 <sbrk_aligned+0x34>
 8000bfe:	1cc4      	adds	r4, r0, #3
 8000c00:	f024 0403 	bic.w	r4, r4, #3
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d007      	beq.n	8000c18 <sbrk_aligned+0x38>
 8000c08:	1a21      	subs	r1, r4, r0
 8000c0a:	4628      	mov	r0, r5
 8000c0c:	f000 fc9a 	bl	8001544 <_sbrk_r>
 8000c10:	3001      	adds	r0, #1
 8000c12:	d101      	bne.n	8000c18 <sbrk_aligned+0x38>
 8000c14:	f04f 34ff 	mov.w	r4, #4294967295
 8000c18:	4620      	mov	r0, r4
 8000c1a:	bd70      	pop	{r4, r5, r6, pc}
 8000c1c:	200001c8 	.word	0x200001c8

08000c20 <_malloc_r>:
 8000c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c24:	1ccd      	adds	r5, r1, #3
 8000c26:	f025 0503 	bic.w	r5, r5, #3
 8000c2a:	3508      	adds	r5, #8
 8000c2c:	2d0c      	cmp	r5, #12
 8000c2e:	bf38      	it	cc
 8000c30:	250c      	movcc	r5, #12
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	4607      	mov	r7, r0
 8000c36:	db01      	blt.n	8000c3c <_malloc_r+0x1c>
 8000c38:	42a9      	cmp	r1, r5
 8000c3a:	d905      	bls.n	8000c48 <_malloc_r+0x28>
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	2600      	movs	r6, #0
 8000c42:	4630      	mov	r0, r6
 8000c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d1c <_malloc_r+0xfc>
 8000c4c:	f000 f868 	bl	8000d20 <__malloc_lock>
 8000c50:	f8d8 3000 	ldr.w	r3, [r8]
 8000c54:	461c      	mov	r4, r3
 8000c56:	bb5c      	cbnz	r4, 8000cb0 <_malloc_r+0x90>
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4638      	mov	r0, r7
 8000c5c:	f7ff ffc0 	bl	8000be0 <sbrk_aligned>
 8000c60:	1c43      	adds	r3, r0, #1
 8000c62:	4604      	mov	r4, r0
 8000c64:	d155      	bne.n	8000d12 <_malloc_r+0xf2>
 8000c66:	f8d8 4000 	ldr.w	r4, [r8]
 8000c6a:	4626      	mov	r6, r4
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d145      	bne.n	8000cfc <_malloc_r+0xdc>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d048      	beq.n	8000d06 <_malloc_r+0xe6>
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	4631      	mov	r1, r6
 8000c78:	4638      	mov	r0, r7
 8000c7a:	eb04 0903 	add.w	r9, r4, r3
 8000c7e:	f000 fc61 	bl	8001544 <_sbrk_r>
 8000c82:	4581      	cmp	r9, r0
 8000c84:	d13f      	bne.n	8000d06 <_malloc_r+0xe6>
 8000c86:	6821      	ldr	r1, [r4, #0]
 8000c88:	1a6d      	subs	r5, r5, r1
 8000c8a:	4629      	mov	r1, r5
 8000c8c:	4638      	mov	r0, r7
 8000c8e:	f7ff ffa7 	bl	8000be0 <sbrk_aligned>
 8000c92:	3001      	adds	r0, #1
 8000c94:	d037      	beq.n	8000d06 <_malloc_r+0xe6>
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	442b      	add	r3, r5
 8000c9a:	6023      	str	r3, [r4, #0]
 8000c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d038      	beq.n	8000d16 <_malloc_r+0xf6>
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	42a2      	cmp	r2, r4
 8000ca8:	d12b      	bne.n	8000d02 <_malloc_r+0xe2>
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	e00f      	b.n	8000cd0 <_malloc_r+0xb0>
 8000cb0:	6822      	ldr	r2, [r4, #0]
 8000cb2:	1b52      	subs	r2, r2, r5
 8000cb4:	d41f      	bmi.n	8000cf6 <_malloc_r+0xd6>
 8000cb6:	2a0b      	cmp	r2, #11
 8000cb8:	d917      	bls.n	8000cea <_malloc_r+0xca>
 8000cba:	1961      	adds	r1, r4, r5
 8000cbc:	42a3      	cmp	r3, r4
 8000cbe:	6025      	str	r5, [r4, #0]
 8000cc0:	bf18      	it	ne
 8000cc2:	6059      	strne	r1, [r3, #4]
 8000cc4:	6863      	ldr	r3, [r4, #4]
 8000cc6:	bf08      	it	eq
 8000cc8:	f8c8 1000 	streq.w	r1, [r8]
 8000ccc:	5162      	str	r2, [r4, r5]
 8000cce:	604b      	str	r3, [r1, #4]
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	f104 060b 	add.w	r6, r4, #11
 8000cd6:	f000 f829 	bl	8000d2c <__malloc_unlock>
 8000cda:	f026 0607 	bic.w	r6, r6, #7
 8000cde:	1d23      	adds	r3, r4, #4
 8000ce0:	1af2      	subs	r2, r6, r3
 8000ce2:	d0ae      	beq.n	8000c42 <_malloc_r+0x22>
 8000ce4:	1b9b      	subs	r3, r3, r6
 8000ce6:	50a3      	str	r3, [r4, r2]
 8000ce8:	e7ab      	b.n	8000c42 <_malloc_r+0x22>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	6862      	ldr	r2, [r4, #4]
 8000cee:	d1dd      	bne.n	8000cac <_malloc_r+0x8c>
 8000cf0:	f8c8 2000 	str.w	r2, [r8]
 8000cf4:	e7ec      	b.n	8000cd0 <_malloc_r+0xb0>
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	6864      	ldr	r4, [r4, #4]
 8000cfa:	e7ac      	b.n	8000c56 <_malloc_r+0x36>
 8000cfc:	4634      	mov	r4, r6
 8000cfe:	6876      	ldr	r6, [r6, #4]
 8000d00:	e7b4      	b.n	8000c6c <_malloc_r+0x4c>
 8000d02:	4613      	mov	r3, r2
 8000d04:	e7cc      	b.n	8000ca0 <_malloc_r+0x80>
 8000d06:	230c      	movs	r3, #12
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4638      	mov	r0, r7
 8000d0c:	f000 f80e 	bl	8000d2c <__malloc_unlock>
 8000d10:	e797      	b.n	8000c42 <_malloc_r+0x22>
 8000d12:	6025      	str	r5, [r4, #0]
 8000d14:	e7dc      	b.n	8000cd0 <_malloc_r+0xb0>
 8000d16:	605b      	str	r3, [r3, #4]
 8000d18:	deff      	udf	#255	; 0xff
 8000d1a:	bf00      	nop
 8000d1c:	200001c4 	.word	0x200001c4

08000d20 <__malloc_lock>:
 8000d20:	4801      	ldr	r0, [pc, #4]	; (8000d28 <__malloc_lock+0x8>)
 8000d22:	f7ff bf0f 	b.w	8000b44 <__retarget_lock_acquire_recursive>
 8000d26:	bf00      	nop
 8000d28:	200001c0 	.word	0x200001c0

08000d2c <__malloc_unlock>:
 8000d2c:	4801      	ldr	r0, [pc, #4]	; (8000d34 <__malloc_unlock+0x8>)
 8000d2e:	f7ff bf0a 	b.w	8000b46 <__retarget_lock_release_recursive>
 8000d32:	bf00      	nop
 8000d34:	200001c0 	.word	0x200001c0

08000d38 <__sfputc_r>:
 8000d38:	6893      	ldr	r3, [r2, #8]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	b410      	push	{r4}
 8000d40:	6093      	str	r3, [r2, #8]
 8000d42:	da08      	bge.n	8000d56 <__sfputc_r+0x1e>
 8000d44:	6994      	ldr	r4, [r2, #24]
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	db01      	blt.n	8000d4e <__sfputc_r+0x16>
 8000d4a:	290a      	cmp	r1, #10
 8000d4c:	d103      	bne.n	8000d56 <__sfputc_r+0x1e>
 8000d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d52:	f7ff bdea 	b.w	800092a <__swbuf_r>
 8000d56:	6813      	ldr	r3, [r2, #0]
 8000d58:	1c58      	adds	r0, r3, #1
 8000d5a:	6010      	str	r0, [r2, #0]
 8000d5c:	7019      	strb	r1, [r3, #0]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <__sfputs_r>:
 8000d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d68:	4606      	mov	r6, r0
 8000d6a:	460f      	mov	r7, r1
 8000d6c:	4614      	mov	r4, r2
 8000d6e:	18d5      	adds	r5, r2, r3
 8000d70:	42ac      	cmp	r4, r5
 8000d72:	d101      	bne.n	8000d78 <__sfputs_r+0x12>
 8000d74:	2000      	movs	r0, #0
 8000d76:	e007      	b.n	8000d88 <__sfputs_r+0x22>
 8000d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d7c:	463a      	mov	r2, r7
 8000d7e:	4630      	mov	r0, r6
 8000d80:	f7ff ffda 	bl	8000d38 <__sfputc_r>
 8000d84:	1c43      	adds	r3, r0, #1
 8000d86:	d1f3      	bne.n	8000d70 <__sfputs_r+0xa>
 8000d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d8c <_vfiprintf_r>:
 8000d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d90:	460d      	mov	r5, r1
 8000d92:	b09d      	sub	sp, #116	; 0x74
 8000d94:	4614      	mov	r4, r2
 8000d96:	4698      	mov	r8, r3
 8000d98:	4606      	mov	r6, r0
 8000d9a:	b118      	cbz	r0, 8000da4 <_vfiprintf_r+0x18>
 8000d9c:	6a03      	ldr	r3, [r0, #32]
 8000d9e:	b90b      	cbnz	r3, 8000da4 <_vfiprintf_r+0x18>
 8000da0:	f7ff fcdc 	bl	800075c <__sinit>
 8000da4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000da6:	07d9      	lsls	r1, r3, #31
 8000da8:	d405      	bmi.n	8000db6 <_vfiprintf_r+0x2a>
 8000daa:	89ab      	ldrh	r3, [r5, #12]
 8000dac:	059a      	lsls	r2, r3, #22
 8000dae:	d402      	bmi.n	8000db6 <_vfiprintf_r+0x2a>
 8000db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000db2:	f7ff fec7 	bl	8000b44 <__retarget_lock_acquire_recursive>
 8000db6:	89ab      	ldrh	r3, [r5, #12]
 8000db8:	071b      	lsls	r3, r3, #28
 8000dba:	d501      	bpl.n	8000dc0 <_vfiprintf_r+0x34>
 8000dbc:	692b      	ldr	r3, [r5, #16]
 8000dbe:	b99b      	cbnz	r3, 8000de8 <_vfiprintf_r+0x5c>
 8000dc0:	4629      	mov	r1, r5
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	f7ff fdee 	bl	80009a4 <__swsetup_r>
 8000dc8:	b170      	cbz	r0, 8000de8 <_vfiprintf_r+0x5c>
 8000dca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000dcc:	07dc      	lsls	r4, r3, #31
 8000dce:	d504      	bpl.n	8000dda <_vfiprintf_r+0x4e>
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	b01d      	add	sp, #116	; 0x74
 8000dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dda:	89ab      	ldrh	r3, [r5, #12]
 8000ddc:	0598      	lsls	r0, r3, #22
 8000dde:	d4f7      	bmi.n	8000dd0 <_vfiprintf_r+0x44>
 8000de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000de2:	f7ff feb0 	bl	8000b46 <__retarget_lock_release_recursive>
 8000de6:	e7f3      	b.n	8000dd0 <_vfiprintf_r+0x44>
 8000de8:	2300      	movs	r3, #0
 8000dea:	9309      	str	r3, [sp, #36]	; 0x24
 8000dec:	2320      	movs	r3, #32
 8000dee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000df6:	2330      	movs	r3, #48	; 0x30
 8000df8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000fac <_vfiprintf_r+0x220>
 8000dfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e00:	f04f 0901 	mov.w	r9, #1
 8000e04:	4623      	mov	r3, r4
 8000e06:	469a      	mov	sl, r3
 8000e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e0c:	b10a      	cbz	r2, 8000e12 <_vfiprintf_r+0x86>
 8000e0e:	2a25      	cmp	r2, #37	; 0x25
 8000e10:	d1f9      	bne.n	8000e06 <_vfiprintf_r+0x7a>
 8000e12:	ebba 0b04 	subs.w	fp, sl, r4
 8000e16:	d00b      	beq.n	8000e30 <_vfiprintf_r+0xa4>
 8000e18:	465b      	mov	r3, fp
 8000e1a:	4622      	mov	r2, r4
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	4630      	mov	r0, r6
 8000e20:	f7ff ffa1 	bl	8000d66 <__sfputs_r>
 8000e24:	3001      	adds	r0, #1
 8000e26:	f000 80a9 	beq.w	8000f7c <_vfiprintf_r+0x1f0>
 8000e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e2c:	445a      	add	r2, fp
 8000e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8000e30:	f89a 3000 	ldrb.w	r3, [sl]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80a1 	beq.w	8000f7c <_vfiprintf_r+0x1f0>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e44:	f10a 0a01 	add.w	sl, sl, #1
 8000e48:	9304      	str	r3, [sp, #16]
 8000e4a:	9307      	str	r3, [sp, #28]
 8000e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e50:	931a      	str	r3, [sp, #104]	; 0x68
 8000e52:	4654      	mov	r4, sl
 8000e54:	2205      	movs	r2, #5
 8000e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e5a:	4854      	ldr	r0, [pc, #336]	; (8000fac <_vfiprintf_r+0x220>)
 8000e5c:	f7ff f9c8 	bl	80001f0 <memchr>
 8000e60:	9a04      	ldr	r2, [sp, #16]
 8000e62:	b9d8      	cbnz	r0, 8000e9c <_vfiprintf_r+0x110>
 8000e64:	06d1      	lsls	r1, r2, #27
 8000e66:	bf44      	itt	mi
 8000e68:	2320      	movmi	r3, #32
 8000e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e6e:	0713      	lsls	r3, r2, #28
 8000e70:	bf44      	itt	mi
 8000e72:	232b      	movmi	r3, #43	; 0x2b
 8000e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e78:	f89a 3000 	ldrb.w	r3, [sl]
 8000e7c:	2b2a      	cmp	r3, #42	; 0x2a
 8000e7e:	d015      	beq.n	8000eac <_vfiprintf_r+0x120>
 8000e80:	9a07      	ldr	r2, [sp, #28]
 8000e82:	4654      	mov	r4, sl
 8000e84:	2000      	movs	r0, #0
 8000e86:	f04f 0c0a 	mov.w	ip, #10
 8000e8a:	4621      	mov	r1, r4
 8000e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e90:	3b30      	subs	r3, #48	; 0x30
 8000e92:	2b09      	cmp	r3, #9
 8000e94:	d94d      	bls.n	8000f32 <_vfiprintf_r+0x1a6>
 8000e96:	b1b0      	cbz	r0, 8000ec6 <_vfiprintf_r+0x13a>
 8000e98:	9207      	str	r2, [sp, #28]
 8000e9a:	e014      	b.n	8000ec6 <_vfiprintf_r+0x13a>
 8000e9c:	eba0 0308 	sub.w	r3, r0, r8
 8000ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	9304      	str	r3, [sp, #16]
 8000ea8:	46a2      	mov	sl, r4
 8000eaa:	e7d2      	b.n	8000e52 <_vfiprintf_r+0xc6>
 8000eac:	9b03      	ldr	r3, [sp, #12]
 8000eae:	1d19      	adds	r1, r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	9103      	str	r1, [sp, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	bfbb      	ittet	lt
 8000eb8:	425b      	neglt	r3, r3
 8000eba:	f042 0202 	orrlt.w	r2, r2, #2
 8000ebe:	9307      	strge	r3, [sp, #28]
 8000ec0:	9307      	strlt	r3, [sp, #28]
 8000ec2:	bfb8      	it	lt
 8000ec4:	9204      	strlt	r2, [sp, #16]
 8000ec6:	7823      	ldrb	r3, [r4, #0]
 8000ec8:	2b2e      	cmp	r3, #46	; 0x2e
 8000eca:	d10c      	bne.n	8000ee6 <_vfiprintf_r+0x15a>
 8000ecc:	7863      	ldrb	r3, [r4, #1]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d134      	bne.n	8000f3c <_vfiprintf_r+0x1b0>
 8000ed2:	9b03      	ldr	r3, [sp, #12]
 8000ed4:	1d1a      	adds	r2, r3, #4
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	9203      	str	r2, [sp, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bfb8      	it	lt
 8000ede:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ee2:	3402      	adds	r4, #2
 8000ee4:	9305      	str	r3, [sp, #20]
 8000ee6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000fbc <_vfiprintf_r+0x230>
 8000eea:	7821      	ldrb	r1, [r4, #0]
 8000eec:	2203      	movs	r2, #3
 8000eee:	4650      	mov	r0, sl
 8000ef0:	f7ff f97e 	bl	80001f0 <memchr>
 8000ef4:	b138      	cbz	r0, 8000f06 <_vfiprintf_r+0x17a>
 8000ef6:	9b04      	ldr	r3, [sp, #16]
 8000ef8:	eba0 000a 	sub.w	r0, r0, sl
 8000efc:	2240      	movs	r2, #64	; 0x40
 8000efe:	4082      	lsls	r2, r0
 8000f00:	4313      	orrs	r3, r2
 8000f02:	3401      	adds	r4, #1
 8000f04:	9304      	str	r3, [sp, #16]
 8000f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f0a:	4829      	ldr	r0, [pc, #164]	; (8000fb0 <_vfiprintf_r+0x224>)
 8000f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f10:	2206      	movs	r2, #6
 8000f12:	f7ff f96d 	bl	80001f0 <memchr>
 8000f16:	2800      	cmp	r0, #0
 8000f18:	d03f      	beq.n	8000f9a <_vfiprintf_r+0x20e>
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <_vfiprintf_r+0x228>)
 8000f1c:	bb1b      	cbnz	r3, 8000f66 <_vfiprintf_r+0x1da>
 8000f1e:	9b03      	ldr	r3, [sp, #12]
 8000f20:	3307      	adds	r3, #7
 8000f22:	f023 0307 	bic.w	r3, r3, #7
 8000f26:	3308      	adds	r3, #8
 8000f28:	9303      	str	r3, [sp, #12]
 8000f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f2c:	443b      	add	r3, r7
 8000f2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000f30:	e768      	b.n	8000e04 <_vfiprintf_r+0x78>
 8000f32:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f36:	460c      	mov	r4, r1
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e7a6      	b.n	8000e8a <_vfiprintf_r+0xfe>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	3401      	adds	r4, #1
 8000f40:	9305      	str	r3, [sp, #20]
 8000f42:	4619      	mov	r1, r3
 8000f44:	f04f 0c0a 	mov.w	ip, #10
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f4e:	3a30      	subs	r2, #48	; 0x30
 8000f50:	2a09      	cmp	r2, #9
 8000f52:	d903      	bls.n	8000f5c <_vfiprintf_r+0x1d0>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0c6      	beq.n	8000ee6 <_vfiprintf_r+0x15a>
 8000f58:	9105      	str	r1, [sp, #20]
 8000f5a:	e7c4      	b.n	8000ee6 <_vfiprintf_r+0x15a>
 8000f5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f60:	4604      	mov	r4, r0
 8000f62:	2301      	movs	r3, #1
 8000f64:	e7f0      	b.n	8000f48 <_vfiprintf_r+0x1bc>
 8000f66:	ab03      	add	r3, sp, #12
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	462a      	mov	r2, r5
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <_vfiprintf_r+0x22c>)
 8000f6e:	a904      	add	r1, sp, #16
 8000f70:	4630      	mov	r0, r6
 8000f72:	f3af 8000 	nop.w
 8000f76:	4607      	mov	r7, r0
 8000f78:	1c78      	adds	r0, r7, #1
 8000f7a:	d1d6      	bne.n	8000f2a <_vfiprintf_r+0x19e>
 8000f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f7e:	07d9      	lsls	r1, r3, #31
 8000f80:	d405      	bmi.n	8000f8e <_vfiprintf_r+0x202>
 8000f82:	89ab      	ldrh	r3, [r5, #12]
 8000f84:	059a      	lsls	r2, r3, #22
 8000f86:	d402      	bmi.n	8000f8e <_vfiprintf_r+0x202>
 8000f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f8a:	f7ff fddc 	bl	8000b46 <__retarget_lock_release_recursive>
 8000f8e:	89ab      	ldrh	r3, [r5, #12]
 8000f90:	065b      	lsls	r3, r3, #25
 8000f92:	f53f af1d 	bmi.w	8000dd0 <_vfiprintf_r+0x44>
 8000f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f98:	e71c      	b.n	8000dd4 <_vfiprintf_r+0x48>
 8000f9a:	ab03      	add	r3, sp, #12
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	462a      	mov	r2, r5
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <_vfiprintf_r+0x22c>)
 8000fa2:	a904      	add	r1, sp, #16
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f000 f879 	bl	800109c <_printf_i>
 8000faa:	e7e4      	b.n	8000f76 <_vfiprintf_r+0x1ea>
 8000fac:	0800160e 	.word	0x0800160e
 8000fb0:	08001618 	.word	0x08001618
 8000fb4:	00000000 	.word	0x00000000
 8000fb8:	08000d67 	.word	0x08000d67
 8000fbc:	08001614 	.word	0x08001614

08000fc0 <_printf_common>:
 8000fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc4:	4616      	mov	r6, r2
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	688a      	ldr	r2, [r1, #8]
 8000fca:	690b      	ldr	r3, [r1, #16]
 8000fcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	bfb8      	it	lt
 8000fd4:	4613      	movlt	r3, r2
 8000fd6:	6033      	str	r3, [r6, #0]
 8000fd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fdc:	4607      	mov	r7, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	b10a      	cbz	r2, 8000fe6 <_printf_common+0x26>
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	6033      	str	r3, [r6, #0]
 8000fe6:	6823      	ldr	r3, [r4, #0]
 8000fe8:	0699      	lsls	r1, r3, #26
 8000fea:	bf42      	ittt	mi
 8000fec:	6833      	ldrmi	r3, [r6, #0]
 8000fee:	3302      	addmi	r3, #2
 8000ff0:	6033      	strmi	r3, [r6, #0]
 8000ff2:	6825      	ldr	r5, [r4, #0]
 8000ff4:	f015 0506 	ands.w	r5, r5, #6
 8000ff8:	d106      	bne.n	8001008 <_printf_common+0x48>
 8000ffa:	f104 0a19 	add.w	sl, r4, #25
 8000ffe:	68e3      	ldr	r3, [r4, #12]
 8001000:	6832      	ldr	r2, [r6, #0]
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	42ab      	cmp	r3, r5
 8001006:	dc26      	bgt.n	8001056 <_printf_common+0x96>
 8001008:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800100c:	1e13      	subs	r3, r2, #0
 800100e:	6822      	ldr	r2, [r4, #0]
 8001010:	bf18      	it	ne
 8001012:	2301      	movne	r3, #1
 8001014:	0692      	lsls	r2, r2, #26
 8001016:	d42b      	bmi.n	8001070 <_printf_common+0xb0>
 8001018:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800101c:	4649      	mov	r1, r9
 800101e:	4638      	mov	r0, r7
 8001020:	47c0      	blx	r8
 8001022:	3001      	adds	r0, #1
 8001024:	d01e      	beq.n	8001064 <_printf_common+0xa4>
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	6922      	ldr	r2, [r4, #16]
 800102a:	f003 0306 	and.w	r3, r3, #6
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf02      	ittt	eq
 8001032:	68e5      	ldreq	r5, [r4, #12]
 8001034:	6833      	ldreq	r3, [r6, #0]
 8001036:	1aed      	subeq	r5, r5, r3
 8001038:	68a3      	ldr	r3, [r4, #8]
 800103a:	bf0c      	ite	eq
 800103c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001040:	2500      	movne	r5, #0
 8001042:	4293      	cmp	r3, r2
 8001044:	bfc4      	itt	gt
 8001046:	1a9b      	subgt	r3, r3, r2
 8001048:	18ed      	addgt	r5, r5, r3
 800104a:	2600      	movs	r6, #0
 800104c:	341a      	adds	r4, #26
 800104e:	42b5      	cmp	r5, r6
 8001050:	d11a      	bne.n	8001088 <_printf_common+0xc8>
 8001052:	2000      	movs	r0, #0
 8001054:	e008      	b.n	8001068 <_printf_common+0xa8>
 8001056:	2301      	movs	r3, #1
 8001058:	4652      	mov	r2, sl
 800105a:	4649      	mov	r1, r9
 800105c:	4638      	mov	r0, r7
 800105e:	47c0      	blx	r8
 8001060:	3001      	adds	r0, #1
 8001062:	d103      	bne.n	800106c <_printf_common+0xac>
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800106c:	3501      	adds	r5, #1
 800106e:	e7c6      	b.n	8000ffe <_printf_common+0x3e>
 8001070:	18e1      	adds	r1, r4, r3
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	2030      	movs	r0, #48	; 0x30
 8001076:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800107a:	4422      	add	r2, r4
 800107c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001080:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001084:	3302      	adds	r3, #2
 8001086:	e7c7      	b.n	8001018 <_printf_common+0x58>
 8001088:	2301      	movs	r3, #1
 800108a:	4622      	mov	r2, r4
 800108c:	4649      	mov	r1, r9
 800108e:	4638      	mov	r0, r7
 8001090:	47c0      	blx	r8
 8001092:	3001      	adds	r0, #1
 8001094:	d0e6      	beq.n	8001064 <_printf_common+0xa4>
 8001096:	3601      	adds	r6, #1
 8001098:	e7d9      	b.n	800104e <_printf_common+0x8e>
	...

0800109c <_printf_i>:
 800109c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	7e0f      	ldrb	r7, [r1, #24]
 80010a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80010a4:	2f78      	cmp	r7, #120	; 0x78
 80010a6:	4691      	mov	r9, r2
 80010a8:	4680      	mov	r8, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	469a      	mov	sl, r3
 80010ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80010b2:	d807      	bhi.n	80010c4 <_printf_i+0x28>
 80010b4:	2f62      	cmp	r7, #98	; 0x62
 80010b6:	d80a      	bhi.n	80010ce <_printf_i+0x32>
 80010b8:	2f00      	cmp	r7, #0
 80010ba:	f000 80d4 	beq.w	8001266 <_printf_i+0x1ca>
 80010be:	2f58      	cmp	r7, #88	; 0x58
 80010c0:	f000 80c0 	beq.w	8001244 <_printf_i+0x1a8>
 80010c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010cc:	e03a      	b.n	8001144 <_printf_i+0xa8>
 80010ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010d2:	2b15      	cmp	r3, #21
 80010d4:	d8f6      	bhi.n	80010c4 <_printf_i+0x28>
 80010d6:	a101      	add	r1, pc, #4	; (adr r1, 80010dc <_printf_i+0x40>)
 80010d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010dc:	08001135 	.word	0x08001135
 80010e0:	08001149 	.word	0x08001149
 80010e4:	080010c5 	.word	0x080010c5
 80010e8:	080010c5 	.word	0x080010c5
 80010ec:	080010c5 	.word	0x080010c5
 80010f0:	080010c5 	.word	0x080010c5
 80010f4:	08001149 	.word	0x08001149
 80010f8:	080010c5 	.word	0x080010c5
 80010fc:	080010c5 	.word	0x080010c5
 8001100:	080010c5 	.word	0x080010c5
 8001104:	080010c5 	.word	0x080010c5
 8001108:	0800124d 	.word	0x0800124d
 800110c:	08001175 	.word	0x08001175
 8001110:	08001207 	.word	0x08001207
 8001114:	080010c5 	.word	0x080010c5
 8001118:	080010c5 	.word	0x080010c5
 800111c:	0800126f 	.word	0x0800126f
 8001120:	080010c5 	.word	0x080010c5
 8001124:	08001175 	.word	0x08001175
 8001128:	080010c5 	.word	0x080010c5
 800112c:	080010c5 	.word	0x080010c5
 8001130:	0800120f 	.word	0x0800120f
 8001134:	682b      	ldr	r3, [r5, #0]
 8001136:	1d1a      	adds	r2, r3, #4
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	602a      	str	r2, [r5, #0]
 800113c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001144:	2301      	movs	r3, #1
 8001146:	e09f      	b.n	8001288 <_printf_i+0x1ec>
 8001148:	6820      	ldr	r0, [r4, #0]
 800114a:	682b      	ldr	r3, [r5, #0]
 800114c:	0607      	lsls	r7, r0, #24
 800114e:	f103 0104 	add.w	r1, r3, #4
 8001152:	6029      	str	r1, [r5, #0]
 8001154:	d501      	bpl.n	800115a <_printf_i+0xbe>
 8001156:	681e      	ldr	r6, [r3, #0]
 8001158:	e003      	b.n	8001162 <_printf_i+0xc6>
 800115a:	0646      	lsls	r6, r0, #25
 800115c:	d5fb      	bpl.n	8001156 <_printf_i+0xba>
 800115e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001162:	2e00      	cmp	r6, #0
 8001164:	da03      	bge.n	800116e <_printf_i+0xd2>
 8001166:	232d      	movs	r3, #45	; 0x2d
 8001168:	4276      	negs	r6, r6
 800116a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800116e:	485a      	ldr	r0, [pc, #360]	; (80012d8 <_printf_i+0x23c>)
 8001170:	230a      	movs	r3, #10
 8001172:	e012      	b.n	800119a <_printf_i+0xfe>
 8001174:	682b      	ldr	r3, [r5, #0]
 8001176:	6820      	ldr	r0, [r4, #0]
 8001178:	1d19      	adds	r1, r3, #4
 800117a:	6029      	str	r1, [r5, #0]
 800117c:	0605      	lsls	r5, r0, #24
 800117e:	d501      	bpl.n	8001184 <_printf_i+0xe8>
 8001180:	681e      	ldr	r6, [r3, #0]
 8001182:	e002      	b.n	800118a <_printf_i+0xee>
 8001184:	0641      	lsls	r1, r0, #25
 8001186:	d5fb      	bpl.n	8001180 <_printf_i+0xe4>
 8001188:	881e      	ldrh	r6, [r3, #0]
 800118a:	4853      	ldr	r0, [pc, #332]	; (80012d8 <_printf_i+0x23c>)
 800118c:	2f6f      	cmp	r7, #111	; 0x6f
 800118e:	bf0c      	ite	eq
 8001190:	2308      	moveq	r3, #8
 8001192:	230a      	movne	r3, #10
 8001194:	2100      	movs	r1, #0
 8001196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800119a:	6865      	ldr	r5, [r4, #4]
 800119c:	60a5      	str	r5, [r4, #8]
 800119e:	2d00      	cmp	r5, #0
 80011a0:	bfa2      	ittt	ge
 80011a2:	6821      	ldrge	r1, [r4, #0]
 80011a4:	f021 0104 	bicge.w	r1, r1, #4
 80011a8:	6021      	strge	r1, [r4, #0]
 80011aa:	b90e      	cbnz	r6, 80011b0 <_printf_i+0x114>
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	d04b      	beq.n	8001248 <_printf_i+0x1ac>
 80011b0:	4615      	mov	r5, r2
 80011b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80011b6:	fb03 6711 	mls	r7, r3, r1, r6
 80011ba:	5dc7      	ldrb	r7, [r0, r7]
 80011bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011c0:	4637      	mov	r7, r6
 80011c2:	42bb      	cmp	r3, r7
 80011c4:	460e      	mov	r6, r1
 80011c6:	d9f4      	bls.n	80011b2 <_printf_i+0x116>
 80011c8:	2b08      	cmp	r3, #8
 80011ca:	d10b      	bne.n	80011e4 <_printf_i+0x148>
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	07de      	lsls	r6, r3, #31
 80011d0:	d508      	bpl.n	80011e4 <_printf_i+0x148>
 80011d2:	6923      	ldr	r3, [r4, #16]
 80011d4:	6861      	ldr	r1, [r4, #4]
 80011d6:	4299      	cmp	r1, r3
 80011d8:	bfde      	ittt	le
 80011da:	2330      	movle	r3, #48	; 0x30
 80011dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011e4:	1b52      	subs	r2, r2, r5
 80011e6:	6122      	str	r2, [r4, #16]
 80011e8:	f8cd a000 	str.w	sl, [sp]
 80011ec:	464b      	mov	r3, r9
 80011ee:	aa03      	add	r2, sp, #12
 80011f0:	4621      	mov	r1, r4
 80011f2:	4640      	mov	r0, r8
 80011f4:	f7ff fee4 	bl	8000fc0 <_printf_common>
 80011f8:	3001      	adds	r0, #1
 80011fa:	d14a      	bne.n	8001292 <_printf_i+0x1f6>
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	b004      	add	sp, #16
 8001202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	4833      	ldr	r0, [pc, #204]	; (80012dc <_printf_i+0x240>)
 8001210:	2778      	movs	r7, #120	; 0x78
 8001212:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001216:	6823      	ldr	r3, [r4, #0]
 8001218:	6829      	ldr	r1, [r5, #0]
 800121a:	061f      	lsls	r7, r3, #24
 800121c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001220:	d402      	bmi.n	8001228 <_printf_i+0x18c>
 8001222:	065f      	lsls	r7, r3, #25
 8001224:	bf48      	it	mi
 8001226:	b2b6      	uxthmi	r6, r6
 8001228:	07df      	lsls	r7, r3, #31
 800122a:	bf48      	it	mi
 800122c:	f043 0320 	orrmi.w	r3, r3, #32
 8001230:	6029      	str	r1, [r5, #0]
 8001232:	bf48      	it	mi
 8001234:	6023      	strmi	r3, [r4, #0]
 8001236:	b91e      	cbnz	r6, 8001240 <_printf_i+0x1a4>
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	f023 0320 	bic.w	r3, r3, #32
 800123e:	6023      	str	r3, [r4, #0]
 8001240:	2310      	movs	r3, #16
 8001242:	e7a7      	b.n	8001194 <_printf_i+0xf8>
 8001244:	4824      	ldr	r0, [pc, #144]	; (80012d8 <_printf_i+0x23c>)
 8001246:	e7e4      	b.n	8001212 <_printf_i+0x176>
 8001248:	4615      	mov	r5, r2
 800124a:	e7bd      	b.n	80011c8 <_printf_i+0x12c>
 800124c:	682b      	ldr	r3, [r5, #0]
 800124e:	6826      	ldr	r6, [r4, #0]
 8001250:	6961      	ldr	r1, [r4, #20]
 8001252:	1d18      	adds	r0, r3, #4
 8001254:	6028      	str	r0, [r5, #0]
 8001256:	0635      	lsls	r5, r6, #24
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	d501      	bpl.n	8001260 <_printf_i+0x1c4>
 800125c:	6019      	str	r1, [r3, #0]
 800125e:	e002      	b.n	8001266 <_printf_i+0x1ca>
 8001260:	0670      	lsls	r0, r6, #25
 8001262:	d5fb      	bpl.n	800125c <_printf_i+0x1c0>
 8001264:	8019      	strh	r1, [r3, #0]
 8001266:	2300      	movs	r3, #0
 8001268:	6123      	str	r3, [r4, #16]
 800126a:	4615      	mov	r5, r2
 800126c:	e7bc      	b.n	80011e8 <_printf_i+0x14c>
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	1d1a      	adds	r2, r3, #4
 8001272:	602a      	str	r2, [r5, #0]
 8001274:	681d      	ldr	r5, [r3, #0]
 8001276:	6862      	ldr	r2, [r4, #4]
 8001278:	2100      	movs	r1, #0
 800127a:	4628      	mov	r0, r5
 800127c:	f7fe ffb8 	bl	80001f0 <memchr>
 8001280:	b108      	cbz	r0, 8001286 <_printf_i+0x1ea>
 8001282:	1b40      	subs	r0, r0, r5
 8001284:	6060      	str	r0, [r4, #4]
 8001286:	6863      	ldr	r3, [r4, #4]
 8001288:	6123      	str	r3, [r4, #16]
 800128a:	2300      	movs	r3, #0
 800128c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001290:	e7aa      	b.n	80011e8 <_printf_i+0x14c>
 8001292:	6923      	ldr	r3, [r4, #16]
 8001294:	462a      	mov	r2, r5
 8001296:	4649      	mov	r1, r9
 8001298:	4640      	mov	r0, r8
 800129a:	47d0      	blx	sl
 800129c:	3001      	adds	r0, #1
 800129e:	d0ad      	beq.n	80011fc <_printf_i+0x160>
 80012a0:	6823      	ldr	r3, [r4, #0]
 80012a2:	079b      	lsls	r3, r3, #30
 80012a4:	d413      	bmi.n	80012ce <_printf_i+0x232>
 80012a6:	68e0      	ldr	r0, [r4, #12]
 80012a8:	9b03      	ldr	r3, [sp, #12]
 80012aa:	4298      	cmp	r0, r3
 80012ac:	bfb8      	it	lt
 80012ae:	4618      	movlt	r0, r3
 80012b0:	e7a6      	b.n	8001200 <_printf_i+0x164>
 80012b2:	2301      	movs	r3, #1
 80012b4:	4632      	mov	r2, r6
 80012b6:	4649      	mov	r1, r9
 80012b8:	4640      	mov	r0, r8
 80012ba:	47d0      	blx	sl
 80012bc:	3001      	adds	r0, #1
 80012be:	d09d      	beq.n	80011fc <_printf_i+0x160>
 80012c0:	3501      	adds	r5, #1
 80012c2:	68e3      	ldr	r3, [r4, #12]
 80012c4:	9903      	ldr	r1, [sp, #12]
 80012c6:	1a5b      	subs	r3, r3, r1
 80012c8:	42ab      	cmp	r3, r5
 80012ca:	dcf2      	bgt.n	80012b2 <_printf_i+0x216>
 80012cc:	e7eb      	b.n	80012a6 <_printf_i+0x20a>
 80012ce:	2500      	movs	r5, #0
 80012d0:	f104 0619 	add.w	r6, r4, #25
 80012d4:	e7f5      	b.n	80012c2 <_printf_i+0x226>
 80012d6:	bf00      	nop
 80012d8:	0800161f 	.word	0x0800161f
 80012dc:	08001630 	.word	0x08001630

080012e0 <__sflush_r>:
 80012e0:	898a      	ldrh	r2, [r1, #12]
 80012e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e6:	4605      	mov	r5, r0
 80012e8:	0710      	lsls	r0, r2, #28
 80012ea:	460c      	mov	r4, r1
 80012ec:	d458      	bmi.n	80013a0 <__sflush_r+0xc0>
 80012ee:	684b      	ldr	r3, [r1, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dc05      	bgt.n	8001300 <__sflush_r+0x20>
 80012f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	dc02      	bgt.n	8001300 <__sflush_r+0x20>
 80012fa:	2000      	movs	r0, #0
 80012fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001302:	2e00      	cmp	r6, #0
 8001304:	d0f9      	beq.n	80012fa <__sflush_r+0x1a>
 8001306:	2300      	movs	r3, #0
 8001308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800130c:	682f      	ldr	r7, [r5, #0]
 800130e:	6a21      	ldr	r1, [r4, #32]
 8001310:	602b      	str	r3, [r5, #0]
 8001312:	d032      	beq.n	800137a <__sflush_r+0x9a>
 8001314:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	075a      	lsls	r2, r3, #29
 800131a:	d505      	bpl.n	8001328 <__sflush_r+0x48>
 800131c:	6863      	ldr	r3, [r4, #4]
 800131e:	1ac0      	subs	r0, r0, r3
 8001320:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001322:	b10b      	cbz	r3, 8001328 <__sflush_r+0x48>
 8001324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001326:	1ac0      	subs	r0, r0, r3
 8001328:	2300      	movs	r3, #0
 800132a:	4602      	mov	r2, r0
 800132c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800132e:	6a21      	ldr	r1, [r4, #32]
 8001330:	4628      	mov	r0, r5
 8001332:	47b0      	blx	r6
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	89a3      	ldrh	r3, [r4, #12]
 8001338:	d106      	bne.n	8001348 <__sflush_r+0x68>
 800133a:	6829      	ldr	r1, [r5, #0]
 800133c:	291d      	cmp	r1, #29
 800133e:	d82b      	bhi.n	8001398 <__sflush_r+0xb8>
 8001340:	4a29      	ldr	r2, [pc, #164]	; (80013e8 <__sflush_r+0x108>)
 8001342:	410a      	asrs	r2, r1
 8001344:	07d6      	lsls	r6, r2, #31
 8001346:	d427      	bmi.n	8001398 <__sflush_r+0xb8>
 8001348:	2200      	movs	r2, #0
 800134a:	6062      	str	r2, [r4, #4]
 800134c:	04d9      	lsls	r1, r3, #19
 800134e:	6922      	ldr	r2, [r4, #16]
 8001350:	6022      	str	r2, [r4, #0]
 8001352:	d504      	bpl.n	800135e <__sflush_r+0x7e>
 8001354:	1c42      	adds	r2, r0, #1
 8001356:	d101      	bne.n	800135c <__sflush_r+0x7c>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b903      	cbnz	r3, 800135e <__sflush_r+0x7e>
 800135c:	6560      	str	r0, [r4, #84]	; 0x54
 800135e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001360:	602f      	str	r7, [r5, #0]
 8001362:	2900      	cmp	r1, #0
 8001364:	d0c9      	beq.n	80012fa <__sflush_r+0x1a>
 8001366:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800136a:	4299      	cmp	r1, r3
 800136c:	d002      	beq.n	8001374 <__sflush_r+0x94>
 800136e:	4628      	mov	r0, r5
 8001370:	f7ff fbea 	bl	8000b48 <_free_r>
 8001374:	2000      	movs	r0, #0
 8001376:	6360      	str	r0, [r4, #52]	; 0x34
 8001378:	e7c0      	b.n	80012fc <__sflush_r+0x1c>
 800137a:	2301      	movs	r3, #1
 800137c:	4628      	mov	r0, r5
 800137e:	47b0      	blx	r6
 8001380:	1c41      	adds	r1, r0, #1
 8001382:	d1c8      	bne.n	8001316 <__sflush_r+0x36>
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0c5      	beq.n	8001316 <__sflush_r+0x36>
 800138a:	2b1d      	cmp	r3, #29
 800138c:	d001      	beq.n	8001392 <__sflush_r+0xb2>
 800138e:	2b16      	cmp	r3, #22
 8001390:	d101      	bne.n	8001396 <__sflush_r+0xb6>
 8001392:	602f      	str	r7, [r5, #0]
 8001394:	e7b1      	b.n	80012fa <__sflush_r+0x1a>
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800139c:	81a3      	strh	r3, [r4, #12]
 800139e:	e7ad      	b.n	80012fc <__sflush_r+0x1c>
 80013a0:	690f      	ldr	r7, [r1, #16]
 80013a2:	2f00      	cmp	r7, #0
 80013a4:	d0a9      	beq.n	80012fa <__sflush_r+0x1a>
 80013a6:	0793      	lsls	r3, r2, #30
 80013a8:	680e      	ldr	r6, [r1, #0]
 80013aa:	bf08      	it	eq
 80013ac:	694b      	ldreq	r3, [r1, #20]
 80013ae:	600f      	str	r7, [r1, #0]
 80013b0:	bf18      	it	ne
 80013b2:	2300      	movne	r3, #0
 80013b4:	eba6 0807 	sub.w	r8, r6, r7
 80013b8:	608b      	str	r3, [r1, #8]
 80013ba:	f1b8 0f00 	cmp.w	r8, #0
 80013be:	dd9c      	ble.n	80012fa <__sflush_r+0x1a>
 80013c0:	6a21      	ldr	r1, [r4, #32]
 80013c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013c4:	4643      	mov	r3, r8
 80013c6:	463a      	mov	r2, r7
 80013c8:	4628      	mov	r0, r5
 80013ca:	47b0      	blx	r6
 80013cc:	2800      	cmp	r0, #0
 80013ce:	dc06      	bgt.n	80013de <__sflush_r+0xfe>
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d6:	81a3      	strh	r3, [r4, #12]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	e78e      	b.n	80012fc <__sflush_r+0x1c>
 80013de:	4407      	add	r7, r0
 80013e0:	eba8 0800 	sub.w	r8, r8, r0
 80013e4:	e7e9      	b.n	80013ba <__sflush_r+0xda>
 80013e6:	bf00      	nop
 80013e8:	dfbffffe 	.word	0xdfbffffe

080013ec <_fflush_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	690b      	ldr	r3, [r1, #16]
 80013f0:	4605      	mov	r5, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	b913      	cbnz	r3, 80013fc <_fflush_r+0x10>
 80013f6:	2500      	movs	r5, #0
 80013f8:	4628      	mov	r0, r5
 80013fa:	bd38      	pop	{r3, r4, r5, pc}
 80013fc:	b118      	cbz	r0, 8001406 <_fflush_r+0x1a>
 80013fe:	6a03      	ldr	r3, [r0, #32]
 8001400:	b90b      	cbnz	r3, 8001406 <_fflush_r+0x1a>
 8001402:	f7ff f9ab 	bl	800075c <__sinit>
 8001406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f3      	beq.n	80013f6 <_fflush_r+0xa>
 800140e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001410:	07d0      	lsls	r0, r2, #31
 8001412:	d404      	bmi.n	800141e <_fflush_r+0x32>
 8001414:	0599      	lsls	r1, r3, #22
 8001416:	d402      	bmi.n	800141e <_fflush_r+0x32>
 8001418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800141a:	f7ff fb93 	bl	8000b44 <__retarget_lock_acquire_recursive>
 800141e:	4628      	mov	r0, r5
 8001420:	4621      	mov	r1, r4
 8001422:	f7ff ff5d 	bl	80012e0 <__sflush_r>
 8001426:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001428:	07da      	lsls	r2, r3, #31
 800142a:	4605      	mov	r5, r0
 800142c:	d4e4      	bmi.n	80013f8 <_fflush_r+0xc>
 800142e:	89a3      	ldrh	r3, [r4, #12]
 8001430:	059b      	lsls	r3, r3, #22
 8001432:	d4e1      	bmi.n	80013f8 <_fflush_r+0xc>
 8001434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001436:	f7ff fb86 	bl	8000b46 <__retarget_lock_release_recursive>
 800143a:	e7dd      	b.n	80013f8 <_fflush_r+0xc>

0800143c <__swhatbuf_r>:
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	460c      	mov	r4, r1
 8001440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001444:	2900      	cmp	r1, #0
 8001446:	b096      	sub	sp, #88	; 0x58
 8001448:	4615      	mov	r5, r2
 800144a:	461e      	mov	r6, r3
 800144c:	da0d      	bge.n	800146a <__swhatbuf_r+0x2e>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001454:	f04f 0100 	mov.w	r1, #0
 8001458:	bf0c      	ite	eq
 800145a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800145e:	2340      	movne	r3, #64	; 0x40
 8001460:	2000      	movs	r0, #0
 8001462:	6031      	str	r1, [r6, #0]
 8001464:	602b      	str	r3, [r5, #0]
 8001466:	b016      	add	sp, #88	; 0x58
 8001468:	bd70      	pop	{r4, r5, r6, pc}
 800146a:	466a      	mov	r2, sp
 800146c:	f000 f848 	bl	8001500 <_fstat_r>
 8001470:	2800      	cmp	r0, #0
 8001472:	dbec      	blt.n	800144e <__swhatbuf_r+0x12>
 8001474:	9901      	ldr	r1, [sp, #4]
 8001476:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800147a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800147e:	4259      	negs	r1, r3
 8001480:	4159      	adcs	r1, r3
 8001482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001486:	e7eb      	b.n	8001460 <__swhatbuf_r+0x24>

08001488 <__smakebuf_r>:
 8001488:	898b      	ldrh	r3, [r1, #12]
 800148a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800148c:	079d      	lsls	r5, r3, #30
 800148e:	4606      	mov	r6, r0
 8001490:	460c      	mov	r4, r1
 8001492:	d507      	bpl.n	80014a4 <__smakebuf_r+0x1c>
 8001494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001498:	6023      	str	r3, [r4, #0]
 800149a:	6123      	str	r3, [r4, #16]
 800149c:	2301      	movs	r3, #1
 800149e:	6163      	str	r3, [r4, #20]
 80014a0:	b002      	add	sp, #8
 80014a2:	bd70      	pop	{r4, r5, r6, pc}
 80014a4:	ab01      	add	r3, sp, #4
 80014a6:	466a      	mov	r2, sp
 80014a8:	f7ff ffc8 	bl	800143c <__swhatbuf_r>
 80014ac:	9900      	ldr	r1, [sp, #0]
 80014ae:	4605      	mov	r5, r0
 80014b0:	4630      	mov	r0, r6
 80014b2:	f7ff fbb5 	bl	8000c20 <_malloc_r>
 80014b6:	b948      	cbnz	r0, 80014cc <__smakebuf_r+0x44>
 80014b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014bc:	059a      	lsls	r2, r3, #22
 80014be:	d4ef      	bmi.n	80014a0 <__smakebuf_r+0x18>
 80014c0:	f023 0303 	bic.w	r3, r3, #3
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	81a3      	strh	r3, [r4, #12]
 80014ca:	e7e3      	b.n	8001494 <__smakebuf_r+0xc>
 80014cc:	89a3      	ldrh	r3, [r4, #12]
 80014ce:	6020      	str	r0, [r4, #0]
 80014d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	9b00      	ldr	r3, [sp, #0]
 80014d8:	6163      	str	r3, [r4, #20]
 80014da:	9b01      	ldr	r3, [sp, #4]
 80014dc:	6120      	str	r0, [r4, #16]
 80014de:	b15b      	cbz	r3, 80014f8 <__smakebuf_r+0x70>
 80014e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014e4:	4630      	mov	r0, r6
 80014e6:	f000 f81d 	bl	8001524 <_isatty_r>
 80014ea:	b128      	cbz	r0, 80014f8 <__smakebuf_r+0x70>
 80014ec:	89a3      	ldrh	r3, [r4, #12]
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	81a3      	strh	r3, [r4, #12]
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	431d      	orrs	r5, r3
 80014fc:	81a5      	strh	r5, [r4, #12]
 80014fe:	e7cf      	b.n	80014a0 <__smakebuf_r+0x18>

08001500 <_fstat_r>:
 8001500:	b538      	push	{r3, r4, r5, lr}
 8001502:	4d07      	ldr	r5, [pc, #28]	; (8001520 <_fstat_r+0x20>)
 8001504:	2300      	movs	r3, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	602b      	str	r3, [r5, #0]
 800150e:	f7fe ff62 	bl	80003d6 <_fstat>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d102      	bne.n	800151c <_fstat_r+0x1c>
 8001516:	682b      	ldr	r3, [r5, #0]
 8001518:	b103      	cbz	r3, 800151c <_fstat_r+0x1c>
 800151a:	6023      	str	r3, [r4, #0]
 800151c:	bd38      	pop	{r3, r4, r5, pc}
 800151e:	bf00      	nop
 8001520:	200001bc 	.word	0x200001bc

08001524 <_isatty_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4d06      	ldr	r5, [pc, #24]	; (8001540 <_isatty_r+0x1c>)
 8001528:	2300      	movs	r3, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	f7fe ff61 	bl	80003f6 <_isatty>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_isatty_r+0x1a>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_isatty_r+0x1a>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	200001bc 	.word	0x200001bc

08001544 <_sbrk_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4d06      	ldr	r5, [pc, #24]	; (8001560 <_sbrk_r+0x1c>)
 8001548:	2300      	movs	r3, #0
 800154a:	4604      	mov	r4, r0
 800154c:	4608      	mov	r0, r1
 800154e:	602b      	str	r3, [r5, #0]
 8001550:	f7fe ff6a 	bl	8000428 <_sbrk>
 8001554:	1c43      	adds	r3, r0, #1
 8001556:	d102      	bne.n	800155e <_sbrk_r+0x1a>
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	b103      	cbz	r3, 800155e <_sbrk_r+0x1a>
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	bd38      	pop	{r3, r4, r5, pc}
 8001560:	200001bc 	.word	0x200001bc

08001564 <_init>:
 8001564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001566:	bf00      	nop
 8001568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156a:	bc08      	pop	{r3}
 800156c:	469e      	mov	lr, r3
 800156e:	4770      	bx	lr

08001570 <_fini>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	bf00      	nop
 8001574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001576:	bc08      	pop	{r3}
 8001578:	469e      	mov	lr, r3
 800157a:	4770      	bx	lr
