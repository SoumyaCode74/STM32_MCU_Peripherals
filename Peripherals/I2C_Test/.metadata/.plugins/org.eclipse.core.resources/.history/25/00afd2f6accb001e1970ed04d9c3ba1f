/**
 ****************************************************************************
 * @file stm32f429xx_i2c_driver.h
 * @brief Classes and API functions for driving an I2C peripheral for STM32F429xx MCUs
 *  Created on: Feb 11, 2024
 *  @author: Soumyadeep Bose
 ****************************************************************************
 */

#ifndef STM32F429XX_I2C_DRIVER_H_
#define STM32F429XX_I2C_DRIVER_H_

#include "stm32f429xx_general.h"

typedef struct{
	uint32_t	I2C_SCLSpeed;
	uint8_t		I2C_DeviceAddress;
	uint8_t		I2C_AckControl : 1;
	uint16_t	I2C_FMDutyCycle : 3;
}I2C_PinConfig_t;

typedef struct{
	I2C_RegAddr_t *pI2Cx;			// Pointer to the base address of the I2C peripheral needed
	I2C_PinConfig_t I2C_PinConfig;
}I2C_Handle_t;

/**
  * @brief  Initialize the I2C peripheral module based on the SCLK frequency,
  *         Device address (if it is a slave), Acknowledgement enable, and Fast Mode Duty Cycle
  * @param  I2C_Handle_t * Pointer to instance of class I2C_Handle_t
  * @retval None
  */
void I2C_Init(I2C_Handle_t *); // Sending pointer to structure to modify the same I2C object
void I2C_DeInit(I2C_Handle_t *);
void I2C_MasterSendData(I2C_Handle_t *, uint8_t * data_stream, uint32_t length);
void I2C_MasterReceiveData(I2C_Handle_t *, uint8_t * receive_from_slave);
void I2C_SlaveSendData(I2C_Handle_t *, uint8_t * data_stream, uint32_t length);
void I2C_SlaveReceiveData(I2C_Handle_t *, uint8_t * receive_from_master);
void I2C_Error_Interrupt_Handler(I2C_Handle_t *);
void I2C_Event_Interrupt_Handler(I2C_Handle_t *);


#endif /* STM32F429XX_I2C_DRIVER_H_ */
