
SysTick_STM32CubeMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003b8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000054d  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000021f  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  000207e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007b  00000000  00000000  000208a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001160  00000000  00000000  0002091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000aa6  00000000  00000000  00021a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00004220  00000000  00000000  00022521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001e4  00000000  00000000  00026744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00026928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003a0 	.word	0x080003a0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003a0 	.word	0x080003a0

080001d4 <main>:
#define		DELAY_S			(2U)

uint32_t delay_ms = 100;
uint32_t time_passed = 0;
uint32_t count_val = 0;
int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	systick_init_interrupt_ms();
 80001d8:	f000 f850 	bl	800027c <systick_init_interrupt_ms>

	RCC->AHB1ENR |= 1U;
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <main+0x50>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a10      	ldr	r2, [pc, #64]	; (8000224 <main+0x50>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(0x3 << 0);
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <main+0x54>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0e      	ldr	r2, [pc, #56]	; (8000228 <main+0x54>)
 80001ee:	f023 0303 	bic.w	r3, r3, #3
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 0);
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <main+0x54>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0b      	ldr	r2, [pc, #44]	; (8000228 <main+0x54>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->ODR ^= (1U << 0);
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <main+0x54>)
 8000202:	695b      	ldr	r3, [r3, #20]
 8000204:	4a08      	ldr	r2, [pc, #32]	; (8000228 <main+0x54>)
 8000206:	f083 0301 	eor.w	r3, r3, #1
 800020a:	6153      	str	r3, [r2, #20]
	delay_time_ms_IT(delay_ms, HSICLK);
 800020c:	4b07      	ldr	r3, [pc, #28]	; (800022c <main+0x58>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <main+0x5c>)
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f84a 	bl	80002ac <delay_time_ms_IT>
	while(1)
	{
//		GPIOA->ODR ^= (1U << 1);
		count_val = SYSTICK->STCVR;
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <main+0x60>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <main+0x64>)
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	e7fa      	b.n	8000218 <main+0x44>
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800
 8000228:	40020000 	.word	0x40020000
 800022c:	20000000 	.word	0x20000000
 8000230:	00f42400 	.word	0x00f42400
 8000234:	e000e010 	.word	0xe000e010
 8000238:	20000024 	.word	0x20000024

0800023c <Systick_callback>:
	}
}

static void Systick_callback(void)
{
 800023c:	b480      	push	{r7}
 800023e:	af00      	add	r7, sp, #0
	time_passed += delay_ms;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <Systick_callback+0x28>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <Systick_callback+0x2c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4413      	add	r3, r2
 800024a:	4a06      	ldr	r2, [pc, #24]	; (8000264 <Systick_callback+0x28>)
 800024c:	6013      	str	r3, [r2, #0]
	GPIOA->ODR ^= (1U << 0);
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <Systick_callback+0x30>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a06      	ldr	r2, [pc, #24]	; (800026c <Systick_callback+0x30>)
 8000254:	f083 0301 	eor.w	r3, r3, #1
 8000258:	6153      	str	r3, [r2, #20]
//	delay_time_ms_IT(500, CLK_SOURCE);
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	20000020 	.word	0x20000020
 8000268:	20000000 	.word	0x20000000
 800026c:	40020000 	.word	0x40020000

08000270 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//Do something
	Systick_callback();
 8000274:	f7ff ffe2 	bl	800023c <Systick_callback>
}
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <systick_init_interrupt_ms>:
	SYSTICK->STCVR = TICK_CLEAR;
	//Disable systick interrupt request
	SYSTICK->STCSR &= ~(TICK_EXCEPTION);
}

void systick_init_interrupt_ms(void){
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	//Provide clock source for Systick
	SYSTICK->STCSR |= CLK_SOURCE;
 8000280:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <systick_init_interrupt_ms+0x2c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a08      	ldr	r2, [pc, #32]	; (80002a8 <systick_init_interrupt_ms+0x2c>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6013      	str	r3, [r2, #0]
	//Clear current value
	SYSTICK->STCVR = TICK_CLEAR;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <systick_init_interrupt_ms+0x2c>)
 800028e:	2201      	movs	r2, #1
 8000290:	609a      	str	r2, [r3, #8]
	//Enable systick interrupt request
	SYSTICK->STCSR |= (TICK_EXCEPTION);
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <systick_init_interrupt_ms+0x2c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a04      	ldr	r2, [pc, #16]	; (80002a8 <systick_init_interrupt_ms+0x2c>)
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	6013      	str	r3, [r2, #0]
//	uint32_t volatile N = (clk/1000)*delay_ms;
//	SYSTICK->STRVR = N - 1;
//	//Restart counter
//	SYSTICK->STCSR |= TICK_ENABLE;

}
 800029e:	bf00      	nop
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000e010 	.word	0xe000e010

080002ac <delay_time_ms_IT>:
	SYSTICK->STCSR |= TICK_ENABLE;				//Restart counter
	while((SYSTICK->STCSR & CNT_CMPLT) == 0);   //Wait for countdown to complete
}

void delay_time_ms_IT(uint32_t delay_ms, uint32_t clk)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
	SYSTICK->STCSR &= ~TICK_ENABLE;							//Disable counter
 80002b6:	4b11      	ldr	r3, [pc, #68]	; (80002fc <delay_time_ms_IT+0x50>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a10      	ldr	r2, [pc, #64]	; (80002fc <delay_time_ms_IT+0x50>)
 80002bc:	f023 0301 	bic.w	r3, r3, #1
 80002c0:	6013      	str	r3, [r2, #0]
	uint32_t N = (clk/1000U)*delay_ms;
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <delay_time_ms_IT+0x54>)
 80002c6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ca:	099a      	lsrs	r2, r3, #6
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	fb02 f303 	mul.w	r3, r2, r3
 80002d2:	60fb      	str	r3, [r7, #12]
	SYSTICK->STRVR = N - 1;
 80002d4:	4a09      	ldr	r2, [pc, #36]	; (80002fc <delay_time_ms_IT+0x50>)
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	3b01      	subs	r3, #1
 80002da:	6053      	str	r3, [r2, #4]
//	systick_init_interrupt_ms();  							//Configure reload value and reset current value
	//Clear current value
	SYSTICK->STCVR = TICK_CLEAR;
 80002dc:	4b07      	ldr	r3, [pc, #28]	; (80002fc <delay_time_ms_IT+0x50>)
 80002de:	2201      	movs	r2, #1
 80002e0:	609a      	str	r2, [r3, #8]
	SYSTICK->STCSR |= TICK_ENABLE;							//Restart counter
 80002e2:	4b06      	ldr	r3, [pc, #24]	; (80002fc <delay_time_ms_IT+0x50>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <delay_time_ms_IT+0x50>)
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	6013      	str	r3, [r2, #0]
	// On reaching count complete, the Systick handler will be triggered
//	while((SYSTICK->STCSR & CNT_CMPLT) == 0);   //Wait for countdown to complete
}
 80002ee:	bf00      	nop
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	10624dd3 	.word	0x10624dd3

08000304 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000304:	480d      	ldr	r0, [pc, #52]	; (800033c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000306:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000308:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800030c:	480c      	ldr	r0, [pc, #48]	; (8000340 <LoopForever+0x6>)
  ldr r1, =_edata
 800030e:	490d      	ldr	r1, [pc, #52]	; (8000344 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000310:	4a0d      	ldr	r2, [pc, #52]	; (8000348 <LoopForever+0xe>)
  movs r3, #0
 8000312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000314:	e002      	b.n	800031c <LoopCopyDataInit>

08000316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031a:	3304      	adds	r3, #4

0800031c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800031c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000320:	d3f9      	bcc.n	8000316 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000322:	4a0a      	ldr	r2, [pc, #40]	; (800034c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000324:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <LoopForever+0x16>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000328:	e001      	b.n	800032e <LoopFillZerobss>

0800032a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800032c:	3204      	adds	r2, #4

0800032e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000330:	d3fb      	bcc.n	800032a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000332:	f000 f811 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000336:	f7ff ff4d 	bl	80001d4 <main>

0800033a <LoopForever>:

LoopForever:
    b LoopForever
 800033a:	e7fe      	b.n	800033a <LoopForever>
  ldr   r0, =_estack
 800033c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000344:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000348:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 800034c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000350:	20000028 	.word	0x20000028

08000354 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000354:	e7fe      	b.n	8000354 <ADC_IRQHandler>
	...

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	4d0d      	ldr	r5, [pc, #52]	; (8000390 <__libc_init_array+0x38>)
 800035c:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 800035e:	1b64      	subs	r4, r4, r5
 8000360:	10a4      	asrs	r4, r4, #2
 8000362:	2600      	movs	r6, #0
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	4d0b      	ldr	r5, [pc, #44]	; (8000398 <__libc_init_array+0x40>)
 800036a:	4c0c      	ldr	r4, [pc, #48]	; (800039c <__libc_init_array+0x44>)
 800036c:	f000 f818 	bl	80003a0 <_init>
 8000370:	1b64      	subs	r4, r4, r5
 8000372:	10a4      	asrs	r4, r4, #2
 8000374:	2600      	movs	r6, #0
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
