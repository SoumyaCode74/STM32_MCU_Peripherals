
ModbusRtu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bbc  08005bbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bc4  08005bc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bc4  08005bc4  00015bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc8  08005bc8  00015bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000a44  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a50  20000a50  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ff04  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aa6  00000000  00000000  0002ff83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e70  00000000  00000000  00032a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c2c  00000000  00000000  000338a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002386c  00000000  00000000  000344cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012547  00000000  00000000  00057d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7cf5  00000000  00000000  0006a27f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003968  00000000  00000000  00141f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008e  00000000  00000000  001458dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800581c 	.word	0x0800581c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800581c 	.word	0x0800581c

080001d4 <TbxPortInterruptsDisable>:
TbxPortInterruptsDisable:
  /* Store state of the currently enabled/disabled interrupts in register 0. On the 
   * ARM Cortex this is stored in CPU register PRIMASK. Note that register 0 is used by
   * GCC for storing the return value of a function.
   */
  mrs   r0, primask
 80001d4:	f3ef 8010 	mrs	r0, PRIMASK
  /* Disable the interrupts by setting all bits in the CPU register PRIMASK to a value
   * of 1, which means the actication of the exception is prevented.
   */
  cpsid i
 80001d8:	b672      	cpsid	i
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 80001da:	4770      	bx	lr

080001dc <TbxPortInterruptsRestore>:
TbxPortInterruptsRestore:
  /* Restore the state of the interrupts by storing the value of register 0 in the CPU
   * register PRIMASK. Note that register 0 is used by GCC for passing the first function
   * parameter.
   */
  msr   primask, r0
 80001dc:	f380 8810 	msr	PRIMASK, r0
  /* Return from this function by branching back to the location stored in the link
   * register.
   */
  bx    lr
 80001e0:	4770      	bx	lr
	...

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <ModbusReadInputReg>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
tTbxMbServerResult ModbusReadInputReg(tTbxMbServer   channel,
                                      uint16_t       addr,
                                      uint16_t     * value)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	460b      	mov	r3, r1
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	817b      	strh	r3, [r7, #10]
  tTbxMbServerResult result = TBX_MB_SERVER_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	75fb      	strb	r3, [r7, #23]

  /* Filter on the requested input register address. */
  switch (addr)
 80004f2:	897b      	ldrh	r3, [r7, #10]
 80004f4:	f247 5230 	movw	r2, #30000	; 0x7530
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d004      	beq.n	8000506 <ModbusReadInputReg+0x26>
 80004fc:	f247 5231 	movw	r2, #30001	; 0x7531
 8000500:	4293      	cmp	r3, r2
 8000502:	d005      	beq.n	8000510 <ModbusReadInputReg+0x30>
 8000504:	e009      	b.n	800051a <ModbusReadInputReg+0x3a>
  {
  case 30000U:
    *value = 1234U;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f240 42d2 	movw	r2, #1234	; 0x4d2
 800050c:	801a      	strh	r2, [r3, #0]
    break;
 800050e:	e007      	b.n	8000520 <ModbusReadInputReg+0x40>

  case 30001U:
    *value = 5678U;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f241 622e 	movw	r2, #5678	; 0x162e
 8000516:	801a      	strh	r2, [r3, #0]
    break;
 8000518:	e002      	b.n	8000520 <ModbusReadInputReg+0x40>

  default:
    /* Unsupported input register address. */
    result = TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR;
 800051a:	2301      	movs	r3, #1
 800051c:	75fb      	strb	r3, [r7, #23]
    break;
 800051e:	bf00      	nop
  }

  /* Give the result back to the caller. */
  return result;
 8000520:	7dfb      	ldrb	r3, [r7, #23]
}
 8000522:	4618      	mov	r0, r3
 8000524:	371c      	adds	r7, #28
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fa47 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f829 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f8c5 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 f897 	bl	8000674 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8000546:	f000 f871 	bl	800062c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  modbusTp = TbxMbRtuCreate(10, TBX_MB_UART_PORT1, TBX_MB_UART_19200BPS,
 800054a:	2301      	movs	r3, #1
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2300      	movs	r3, #0
 8000550:	2204      	movs	r2, #4
 8000552:	2100      	movs	r1, #0
 8000554:	200a      	movs	r0, #10
 8000556:	f003 f829 	bl	80035ac <TbxMbRtuCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a09      	ldr	r2, [pc, #36]	; (8000584 <main+0x54>)
 800055e:	6013      	str	r3, [r2, #0]
                            TBX_MB_UART_1_STOPBITS, TBX_MB_EVEN_PARITY);
  modbusServer = TbxMbServerCreate(modbusTp);
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <main+0x54>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4618      	mov	r0, r3
 8000566:	f003 fdd3 	bl	8004110 <TbxMbServerCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a06      	ldr	r2, [pc, #24]	; (8000588 <main+0x58>)
 800056e:	6013      	str	r3, [r2, #0]
  TbxMbServerSetCallbackReadInputReg(modbusServer, ModbusReadInputReg);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x58>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4905      	ldr	r1, [pc, #20]	; (800058c <main+0x5c>)
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fe4c 	bl	8004214 <TbxMbServerSetCallbackReadInputReg>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    TbxMbEventTask();
 800057c:	f002 ff00 	bl	8003380 <TbxMbEventTask>
 8000580:	e7fc      	b.n	800057c <main+0x4c>
 8000582:	bf00      	nop
 8000584:	200000b4 	.word	0x200000b4
 8000588:	200000b8 	.word	0x200000b8
 800058c:	080004e1 	.word	0x080004e1

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 f910 	bl	80057c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <SystemClock_Config+0x94>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <SystemClock_Config+0x94>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <SystemClock_Config+0x94>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b14      	ldr	r3, [pc, #80]	; (8000628 <SystemClock_Config+0x98>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <SystemClock_Config+0x98>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <SystemClock_Config+0x98>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]
    Error_Handler();
  }*/

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2102      	movs	r1, #2
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fdb7 	bl	8001180 <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000618:	f000 f8c6 	bl	80007a8 <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000630:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_TIM10_Init+0x40>)
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <MX_TIM10_Init+0x44>)
 8000634:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4199;
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_TIM10_Init+0x40>)
 8000638:	f241 0267 	movw	r2, #4199	; 0x1067
 800063c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <MX_TIM10_Init+0x40>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_TIM10_Init+0x40>)
 8000646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_TIM10_Init+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_TIM10_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_TIM10_Init+0x40>)
 800065a:	f000 ffb1 	bl	80015c0 <HAL_TIM_Base_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000664:	f000 f8a0 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40014400 	.word	0x40014400

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_USART2_UART_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 8000680:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 8000688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800068c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 8000696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART2_UART_Init+0x50>)
 80006b0:	f001 f876 	bl	80017a0 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 f875 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000070 	.word	0x20000070
 80006c8:	40011000 	.word	0x40011000

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_GPIO_Init+0xd0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a2c      	ldr	r2, [pc, #176]	; (800079c <MX_GPIO_Init+0xd0>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_GPIO_Init+0xd0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a25      	ldr	r2, [pc, #148]	; (800079c <MX_GPIO_Init+0xd0>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_GPIO_Init+0xd0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <MX_GPIO_Init+0xd0>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xd0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <MX_GPIO_Init+0xd0>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	4812      	ldr	r0, [pc, #72]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000758:	f000 fcf8 	bl	800114c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000762:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <MX_GPIO_Init+0xd8>)
 8000774:	f000 fb3e 	bl	8000df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000778:	2320      	movs	r3, #32
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xd4>)
 8000790:	f000 fb30 	bl	8000df4 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020800 	.word	0x40020800

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <HAL_MspInit+0x4c>)
 80007c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_MspInit+0x4c>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <HAL_MspInit+0x4c>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6413      	str	r3, [r2, #64]	; 0x40
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x4c>)
 80007e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007f2:	2007      	movs	r0, #7
 80007f4:	f000 fa2a 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800

08000804 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <HAL_TIM_Base_MspInit+0x3c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d10d      	bne.n	8000832 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_TIM_Base_MspInit+0x40>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	4a09      	ldr	r2, [pc, #36]	; (8000844 <HAL_TIM_Base_MspInit+0x40>)
 8000820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000824:	6453      	str	r3, [r2, #68]	; 0x44
 8000826:	4b07      	ldr	r3, [pc, #28]	; (8000844 <HAL_TIM_Base_MspInit+0x40>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40014400 	.word	0x40014400
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_UART_MspInit+0x94>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d134      	bne.n	80008d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a1b      	ldr	r2, [pc, #108]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000874:	f043 0310 	orr.w	r3, r3, #16
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <HAL_UART_MspInit+0x98>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f003 0310 	and.w	r3, r3, #16
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_UART_MspInit+0x98>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a14      	ldr	r2, [pc, #80]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_UART_MspInit+0x98>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b4:	2307      	movs	r3, #7
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_UART_MspInit+0x9c>)
 80008c0:	f000 fa98 	bl	8000df4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2025      	movs	r0, #37	; 0x25
 80008ca:	f000 f9ca 	bl	8000c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ce:	2025      	movs	r0, #37	; 0x25
 80008d0:	f000 f9e3 	bl	8000c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40011000 	.word	0x40011000
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ec:	e7fe      	b.n	80008ec <NMI_Handler+0x4>

080008ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f2:	e7fe      	b.n	80008f2 <HardFault_Handler+0x4>

080008f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <MemManage_Handler+0x4>

080008fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <UsageFault_Handler+0x4>

08000906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f89a 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}

0800093c <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART1_IRQHandler+0x10>)
 8000942:	f000 ffef 	bl	8001924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000070 	.word	0x20000070

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097a:	490e      	ldr	r1, [pc, #56]	; (80009b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800097c:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000980:	e002      	b.n	8000988 <LoopCopyDataInit>

08000982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000986:	3304      	adds	r3, #4

08000988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800098c:	d3f9      	bcc.n	8000982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000990:	4c0b      	ldr	r4, [pc, #44]	; (80009c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000994:	e001      	b.n	800099a <LoopFillZerobss>

08000996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000998:	3204      	adds	r2, #4

0800099a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800099c:	d3fb      	bcc.n	8000996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099e:	f7ff ffd7 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f004 ff17 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a6:	f7ff fdc3 	bl	8000530 <main>
  bx  lr    
 80009aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009b8:	08005bcc 	.word	0x08005bcc
  ldr r2, =_sbss
 80009bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c0:	20000a50 	.word	0x20000a50

080009c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f92b 	bl	8000c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff feda 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f943 	bl	8000cb6 <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f90b 	bl	8000c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	200000bc 	.word	0x200000bc

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000bc 	.word	0x200000bc

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	db0b      	blt.n	8000b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	4907      	ldr	r1, [pc, #28]	; (8000b48 <__NVIC_EnableIRQ+0x38>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	095b      	lsrs	r3, r3, #5
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100

08000b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	db0a      	blt.n	8000b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	490c      	ldr	r1, [pc, #48]	; (8000b98 <__NVIC_SetPriority+0x4c>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	0112      	lsls	r2, r2, #4
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	440b      	add	r3, r1
 8000b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b74:	e00a      	b.n	8000b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4908      	ldr	r1, [pc, #32]	; (8000b9c <__NVIC_SetPriority+0x50>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f003 030f 	and.w	r3, r3, #15
 8000b82:	3b04      	subs	r3, #4
 8000b84:	0112      	lsls	r2, r2, #4
 8000b86:	b2d2      	uxtb	r2, r2
 8000b88:	440b      	add	r3, r1
 8000b8a:	761a      	strb	r2, [r3, #24]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000e100 	.word	0xe000e100
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	f1c3 0307 	rsb	r3, r3, #7
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf28      	it	cs
 8000bbe:	2304      	movcs	r3, #4
 8000bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3304      	adds	r3, #4
 8000bc6:	2b06      	cmp	r3, #6
 8000bc8:	d902      	bls.n	8000bd0 <NVIC_EncodePriority+0x30>
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3b03      	subs	r3, #3
 8000bce:	e000      	b.n	8000bd2 <NVIC_EncodePriority+0x32>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43da      	mvns	r2, r3
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf2:	43d9      	mvns	r1, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	4313      	orrs	r3, r2
         );
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3724      	adds	r7, #36	; 0x24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c18:	d301      	bcc.n	8000c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00f      	b.n	8000c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <SysTick_Config+0x40>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c26:	210f      	movs	r1, #15
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f7ff ff8e 	bl	8000b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_Config+0x40>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <SysTick_Config+0x40>)
 8000c38:	2207      	movs	r2, #7
 8000c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff ff29 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
 8000c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c74:	f7ff ff3e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	68b9      	ldr	r1, [r7, #8]
 8000c7e:	6978      	ldr	r0, [r7, #20]
 8000c80:	f7ff ff8e 	bl	8000ba0 <NVIC_EncodePriority>
 8000c84:	4602      	mov	r2, r0
 8000c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8a:	4611      	mov	r1, r2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ff5d 	bl	8000b4c <__NVIC_SetPriority>
}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff31 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff ffa2 	bl	8000c08 <SysTick_Config>
 8000cc4:	4603      	mov	r3, r0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff feda 	bl	8000a94 <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d008      	beq.n	8000d00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e052      	b.n	8000da6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0216 	bic.w	r2, r2, #22
 8000d0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d103      	bne.n	8000d30 <HAL_DMA_Abort+0x62>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d007      	beq.n	8000d40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f022 0208 	bic.w	r2, r2, #8
 8000d3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f022 0201 	bic.w	r2, r2, #1
 8000d4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d50:	e013      	b.n	8000d7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d52:	f7ff fe9f 	bl	8000a94 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d90c      	bls.n	8000d7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2220      	movs	r2, #32
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d76:	2303      	movs	r3, #3
 8000d78:	e015      	b.n	8000da6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d1e4      	bne.n	8000d52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d8c:	223f      	movs	r2, #63	; 0x3f
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2201      	movs	r2, #1
 8000d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d004      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e00c      	b.n	8000de6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2205      	movs	r2, #5
 8000dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0201 	bic.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e177      	b.n	8001100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8166 	bne.w	80010fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80c0 	beq.w	80010fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	4b66      	ldr	r3, [pc, #408]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	4a65      	ldr	r2, [pc, #404]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f88:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8a:	4b63      	ldr	r3, [pc, #396]	; (8001118 <HAL_GPIO_Init+0x324>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f96:	4a61      	ldr	r2, [pc, #388]	; (800111c <HAL_GPIO_Init+0x328>)
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_GPIO_Init+0x32c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d037      	beq.n	8001032 <HAL_GPIO_Init+0x23e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a57      	ldr	r2, [pc, #348]	; (8001124 <HAL_GPIO_Init+0x330>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d031      	beq.n	800102e <HAL_GPIO_Init+0x23a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_GPIO_Init+0x334>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d02b      	beq.n	800102a <HAL_GPIO_Init+0x236>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a55      	ldr	r2, [pc, #340]	; (800112c <HAL_GPIO_Init+0x338>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d025      	beq.n	8001026 <HAL_GPIO_Init+0x232>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <HAL_GPIO_Init+0x33c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d01f      	beq.n	8001022 <HAL_GPIO_Init+0x22e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a53      	ldr	r2, [pc, #332]	; (8001134 <HAL_GPIO_Init+0x340>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x22a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_GPIO_Init+0x344>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x226>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <HAL_GPIO_Init+0x348>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x222>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <HAL_GPIO_Init+0x34c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x21e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <HAL_GPIO_Init+0x350>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x21a>
 800100a:	2309      	movs	r3, #9
 800100c:	e012      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800100e:	230a      	movs	r3, #10
 8001010:	e010      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001012:	2308      	movs	r3, #8
 8001014:	e00e      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001016:	2307      	movs	r3, #7
 8001018:	e00c      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101a:	2306      	movs	r3, #6
 800101c:	e00a      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800101e:	2305      	movs	r3, #5
 8001020:	e008      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001022:	2304      	movs	r3, #4
 8001024:	e006      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001026:	2303      	movs	r3, #3
 8001028:	e004      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102a:	2302      	movs	r3, #2
 800102c:	e002      	b.n	8001034 <HAL_GPIO_Init+0x240>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x240>
 8001032:	2300      	movs	r3, #0
 8001034:	69fa      	ldr	r2, [r7, #28]
 8001036:	f002 0203 	and.w	r2, r2, #3
 800103a:	0092      	lsls	r2, r2, #2
 800103c:	4093      	lsls	r3, r2
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001044:	4935      	ldr	r1, [pc, #212]	; (800111c <HAL_GPIO_Init+0x328>)
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001052:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <HAL_GPIO_Init+0x354>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001076:	4a34      	ldr	r2, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x354>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800107c:	4b32      	ldr	r3, [pc, #200]	; (8001148 <HAL_GPIO_Init+0x354>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a0:	4a29      	ldr	r2, [pc, #164]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f4:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_GPIO_Init+0x354>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	f67f ae84 	bls.w	8000e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40013800 	.word	0x40013800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40021400 	.word	0x40021400
 8001138:	40021800 	.word	0x40021800
 800113c:	40021c00 	.word	0x40021c00
 8001140:	40022000 	.word	0x40022000
 8001144:	40022400 	.word	0x40022400
 8001148:	40013c00 	.word	0x40013c00

0800114c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
 8001158:	4613      	mov	r3, r2
 800115a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001162:	887a      	ldrh	r2, [r7, #2]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001168:	e003      	b.n	8001172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	041a      	lsls	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	619a      	str	r2, [r3, #24]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0cc      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	429a      	cmp	r2, r3
 80011a0:	d90c      	bls.n	80011bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011a2:	4b65      	ldr	r3, [pc, #404]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e0b8      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d020      	beq.n	800120a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011d4:	4b59      	ldr	r3, [pc, #356]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	4a58      	ldr	r2, [pc, #352]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ec:	4b53      	ldr	r3, [pc, #332]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	4a52      	ldr	r2, [pc, #328]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	4b50      	ldr	r3, [pc, #320]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	494d      	ldr	r1, [pc, #308]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	4313      	orrs	r3, r2
 8001208:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d044      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d119      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e07f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800123a:	2b03      	cmp	r3, #3
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e06f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e067      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f023 0203 	bic.w	r2, r3, #3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4934      	ldr	r1, [pc, #208]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	4313      	orrs	r3, r2
 800126e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001270:	f7ff fc10 	bl	8000a94 <HAL_GetTick>
 8001274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001276:	e00a      	b.n	800128e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001278:	f7ff fc0c 	bl	8000a94 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f241 3288 	movw	r2, #5000	; 0x1388
 8001286:	4293      	cmp	r3, r2
 8001288:	d901      	bls.n	800128e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e04f      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	4b2b      	ldr	r3, [pc, #172]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 020c 	and.w	r2, r3, #12
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	429a      	cmp	r2, r3
 800129e:	d1eb      	bne.n	8001278 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012a0:	4b25      	ldr	r3, [pc, #148]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 030f 	and.w	r3, r3, #15
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d20c      	bcs.n	80012c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ae:	4b22      	ldr	r3, [pc, #136]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <HAL_RCC_ClockConfig+0x1b8>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d001      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e032      	b.n	800132e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d008      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	4916      	ldr	r1, [pc, #88]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d009      	beq.n	8001306 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	490e      	ldr	r1, [pc, #56]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	4313      	orrs	r3, r2
 8001304:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001306:	f000 f821 	bl	800134c <HAL_RCC_GetSysClockFreq>
 800130a:	4602      	mov	r2, r0
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	490a      	ldr	r1, [pc, #40]	; (8001340 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	fa22 f303 	lsr.w	r3, r2, r3
 800131e:	4a09      	ldr	r2, [pc, #36]	; (8001344 <HAL_RCC_ClockConfig+0x1c4>)
 8001320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_RCC_ClockConfig+0x1c8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fb70 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00
 800133c:	40023800 	.word	0x40023800
 8001340:	080059a0 	.word	0x080059a0
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800134c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001350:	b094      	sub	sp, #80	; 0x50
 8001352:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
 8001358:	2300      	movs	r3, #0
 800135a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800135c:	2300      	movs	r3, #0
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001364:	4b79      	ldr	r3, [pc, #484]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b08      	cmp	r3, #8
 800136e:	d00d      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0x40>
 8001370:	2b08      	cmp	r3, #8
 8001372:	f200 80e1 	bhi.w	8001538 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <HAL_RCC_GetSysClockFreq+0x34>
 800137a:	2b04      	cmp	r3, #4
 800137c:	d003      	beq.n	8001386 <HAL_RCC_GetSysClockFreq+0x3a>
 800137e:	e0db      	b.n	8001538 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001380:	4b73      	ldr	r3, [pc, #460]	; (8001550 <HAL_RCC_GetSysClockFreq+0x204>)
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001384:	e0db      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_GetSysClockFreq+0x208>)
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800138a:	e0d8      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800138c:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001394:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001396:	4b6d      	ldr	r3, [pc, #436]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	099b      	lsrs	r3, r3, #6
 80013a8:	2200      	movs	r2, #0
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80013ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
 80013b6:	2300      	movs	r3, #0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
 80013ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80013be:	4622      	mov	r2, r4
 80013c0:	462b      	mov	r3, r5
 80013c2:	f04f 0000 	mov.w	r0, #0
 80013c6:	f04f 0100 	mov.w	r1, #0
 80013ca:	0159      	lsls	r1, r3, #5
 80013cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013d0:	0150      	lsls	r0, r2, #5
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4621      	mov	r1, r4
 80013d8:	1a51      	subs	r1, r2, r1
 80013da:	6139      	str	r1, [r7, #16]
 80013dc:	4629      	mov	r1, r5
 80013de:	eb63 0301 	sbc.w	r3, r3, r1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013f0:	4659      	mov	r1, fp
 80013f2:	018b      	lsls	r3, r1, #6
 80013f4:	4651      	mov	r1, sl
 80013f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013fa:	4651      	mov	r1, sl
 80013fc:	018a      	lsls	r2, r1, #6
 80013fe:	4651      	mov	r1, sl
 8001400:	ebb2 0801 	subs.w	r8, r2, r1
 8001404:	4659      	mov	r1, fp
 8001406:	eb63 0901 	sbc.w	r9, r3, r1
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001416:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800141a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800141e:	4690      	mov	r8, r2
 8001420:	4699      	mov	r9, r3
 8001422:	4623      	mov	r3, r4
 8001424:	eb18 0303 	adds.w	r3, r8, r3
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	462b      	mov	r3, r5
 800142c:	eb49 0303 	adc.w	r3, r9, r3
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800143e:	4629      	mov	r1, r5
 8001440:	024b      	lsls	r3, r1, #9
 8001442:	4621      	mov	r1, r4
 8001444:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001448:	4621      	mov	r1, r4
 800144a:	024a      	lsls	r2, r1, #9
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001452:	2200      	movs	r2, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
 8001456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001458:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800145c:	f7fe fec2 	bl	80001e4 <__aeabi_uldivmod>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4613      	mov	r3, r2
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001468:	e058      	b.n	800151c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	099b      	lsrs	r3, r3, #6
 8001470:	2200      	movs	r2, #0
 8001472:	4618      	mov	r0, r3
 8001474:	4611      	mov	r1, r2
 8001476:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
 8001480:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001484:	4642      	mov	r2, r8
 8001486:	464b      	mov	r3, r9
 8001488:	f04f 0000 	mov.w	r0, #0
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	0159      	lsls	r1, r3, #5
 8001492:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001496:	0150      	lsls	r0, r2, #5
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4641      	mov	r1, r8
 800149e:	ebb2 0a01 	subs.w	sl, r2, r1
 80014a2:	4649      	mov	r1, r9
 80014a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014bc:	ebb2 040a 	subs.w	r4, r2, sl
 80014c0:	eb63 050b 	sbc.w	r5, r3, fp
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	00eb      	lsls	r3, r5, #3
 80014ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014d2:	00e2      	lsls	r2, r4, #3
 80014d4:	4614      	mov	r4, r2
 80014d6:	461d      	mov	r5, r3
 80014d8:	4643      	mov	r3, r8
 80014da:	18e3      	adds	r3, r4, r3
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	464b      	mov	r3, r9
 80014e0:	eb45 0303 	adc.w	r3, r5, r3
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	f04f 0300 	mov.w	r3, #0
 80014ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014f2:	4629      	mov	r1, r5
 80014f4:	028b      	lsls	r3, r1, #10
 80014f6:	4621      	mov	r1, r4
 80014f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014fc:	4621      	mov	r1, r4
 80014fe:	028a      	lsls	r2, r1, #10
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001506:	2200      	movs	r2, #0
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	61fa      	str	r2, [r7, #28]
 800150c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001510:	f7fe fe68 	bl	80001e4 <__aeabi_uldivmod>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4613      	mov	r3, r2
 800151a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_GetSysClockFreq+0x200>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	0c1b      	lsrs	r3, r3, #16
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	3301      	adds	r3, #1
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800152c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800152e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001530:	fbb2 f3f3 	udiv	r3, r2, r3
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001536:	e002      	b.n	800153e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <HAL_RCC_GetSysClockFreq+0x204>)
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800153c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001540:	4618      	mov	r0, r3
 8001542:	3750      	adds	r7, #80	; 0x50
 8001544:	46bd      	mov	sp, r7
 8001546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800
 8001550:	00f42400 	.word	0x00f42400
 8001554:	007a1200 	.word	0x007a1200

08001558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_RCC_GetHCLKFreq+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff0 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	0a9b      	lsrs	r3, r3, #10
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	080059b0 	.word	0x080059b0

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffdc 	bl	8001558 <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	0b5b      	lsrs	r3, r3, #13
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	080059b0 	.word	0x080059b0

080015c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e041      	b.n	8001656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff f90c 	bl	8000804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f000 f82e 	bl	8001660 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a40      	ldr	r2, [pc, #256]	; (8001774 <TIM_Base_SetConfig+0x114>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d013      	beq.n	80016a0 <TIM_Base_SetConfig+0x40>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167e:	d00f      	beq.n	80016a0 <TIM_Base_SetConfig+0x40>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a3d      	ldr	r2, [pc, #244]	; (8001778 <TIM_Base_SetConfig+0x118>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d00b      	beq.n	80016a0 <TIM_Base_SetConfig+0x40>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a3c      	ldr	r2, [pc, #240]	; (800177c <TIM_Base_SetConfig+0x11c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d007      	beq.n	80016a0 <TIM_Base_SetConfig+0x40>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a3b      	ldr	r2, [pc, #236]	; (8001780 <TIM_Base_SetConfig+0x120>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d003      	beq.n	80016a0 <TIM_Base_SetConfig+0x40>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a3a      	ldr	r2, [pc, #232]	; (8001784 <TIM_Base_SetConfig+0x124>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d108      	bne.n	80016b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a2f      	ldr	r2, [pc, #188]	; (8001774 <TIM_Base_SetConfig+0x114>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d027      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a2c      	ldr	r2, [pc, #176]	; (8001778 <TIM_Base_SetConfig+0x118>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d023      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <TIM_Base_SetConfig+0x11c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <TIM_Base_SetConfig+0x120>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01b      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a29      	ldr	r2, [pc, #164]	; (8001784 <TIM_Base_SetConfig+0x124>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d017      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <TIM_Base_SetConfig+0x128>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a27      	ldr	r2, [pc, #156]	; (800178c <TIM_Base_SetConfig+0x12c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00f      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a26      	ldr	r2, [pc, #152]	; (8001790 <TIM_Base_SetConfig+0x130>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00b      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a25      	ldr	r2, [pc, #148]	; (8001794 <TIM_Base_SetConfig+0x134>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a24      	ldr	r2, [pc, #144]	; (8001798 <TIM_Base_SetConfig+0x138>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d003      	beq.n	8001712 <TIM_Base_SetConfig+0xb2>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a23      	ldr	r2, [pc, #140]	; (800179c <TIM_Base_SetConfig+0x13c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d108      	bne.n	8001724 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a0a      	ldr	r2, [pc, #40]	; (8001774 <TIM_Base_SetConfig+0x114>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d003      	beq.n	8001758 <TIM_Base_SetConfig+0xf8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <TIM_Base_SetConfig+0x124>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d103      	bne.n	8001760 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	615a      	str	r2, [r3, #20]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40010000 	.word	0x40010000
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800
 8001780:	40000c00 	.word	0x40000c00
 8001784:	40010400 	.word	0x40010400
 8001788:	40014000 	.word	0x40014000
 800178c:	40014400 	.word	0x40014400
 8001790:	40014800 	.word	0x40014800
 8001794:	40001800 	.word	0x40001800
 8001798:	40001c00 	.word	0x40001c00
 800179c:	40002000 	.word	0x40002000

080017a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e03f      	b.n	8001832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff f83e 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2224      	movs	r2, #36	; 0x24
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fd25 	bl	8002234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	695a      	ldr	r2, [r3, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	4613      	mov	r3, r2
 8001846:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d130      	bne.n	80018b6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_UART_Transmit_IT+0x26>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e029      	b.n	80018b8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_UART_Transmit_IT+0x38>
 800186e:	2302      	movs	r3, #2
 8001870:	e022      	b.n	80018b8 <HAL_UART_Transmit_IT+0x7e>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	88fa      	ldrh	r2, [r7, #6]
 8001884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	88fa      	ldrh	r2, [r7, #6]
 800188a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2200      	movs	r2, #0
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2221      	movs	r2, #33	; 0x21
 8001896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80018b6:	2302      	movs	r3, #2
  }
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b20      	cmp	r3, #32
 80018dc:	d11d      	bne.n	800191a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_UART_Receive_IT+0x26>
 80018e4:	88fb      	ldrh	r3, [r7, #6]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e016      	b.n	800191c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_UART_Receive_IT+0x38>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e00f      	b.n	800191c <HAL_UART_Receive_IT+0x58>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	461a      	mov	r2, r3
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fab7 	bl	8001e84 <UART_Start_Receive_IT>
 8001916:	4603      	mov	r3, r0
 8001918:	e000      	b.n	800191c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800191a:	2302      	movs	r3, #2
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0ba      	sub	sp, #232	; 0xe8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10f      	bne.n	800198a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800196a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_UART_IRQHandler+0x66>
 8001976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800197a:	f003 0320 	and.w	r3, r3, #32
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fb9b 	bl	80020be <UART_Receive_IT>
      return;
 8001988:	e256      	b.n	8001e38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800198a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 80de 	beq.w	8001b50 <HAL_UART_IRQHandler+0x22c>
 8001994:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d106      	bne.n	80019ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80d1 	beq.w	8001b50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_UART_IRQHandler+0xae>
 80019ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80019be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d005      	beq.n	80019d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f043 0201 	orr.w	r2, r3, #1
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_UART_IRQHandler+0xd2>
 80019de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d005      	beq.n	80019f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f043 0202 	orr.w	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00b      	beq.n	8001a1a <HAL_UART_IRQHandler+0xf6>
 8001a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f043 0204 	orr.w	r2, r3, #4
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d011      	beq.n	8001a4a <HAL_UART_IRQHandler+0x126>
 8001a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a2a:	f003 0320 	and.w	r3, r3, #32
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0208 	orr.w	r2, r3, #8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 81ed 	beq.w	8001e2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001a58:	f003 0320 	and.w	r3, r3, #32
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_UART_IRQHandler+0x14e>
 8001a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001a64:	f003 0320 	and.w	r3, r3, #32
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 fb26 	bl	80020be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7c:	2b40      	cmp	r3, #64	; 0x40
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <HAL_UART_IRQHandler+0x17a>
 8001a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d04f      	beq.n	8001b3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa2e 	bl	8001f00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aae:	2b40      	cmp	r3, #64	; 0x40
 8001ab0:	d141      	bne.n	8001b36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3314      	adds	r3, #20
 8001ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ac0:	e853 3f00 	ldrex	r3, [r3]
 8001ac4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001ac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	3314      	adds	r3, #20
 8001ada:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001ade:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001aea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001aee:	e841 2300 	strex	r3, r2, [r1]
 8001af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001af6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1d9      	bne.n	8001ab2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d013      	beq.n	8001b2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	4a7d      	ldr	r2, [pc, #500]	; (8001d00 <HAL_UART_IRQHandler+0x3dc>)
 8001b0c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f94b 	bl	8000dae <HAL_DMA_Abort_IT>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d016      	beq.n	8001b4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b2c:	e00e      	b.n	8001b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f986 	bl	8001e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b34:	e00a      	b.n	8001b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f982 	bl	8001e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b3c:	e006      	b.n	8001b4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f97e 	bl	8001e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001b4a:	e170      	b.n	8001e2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b4c:	bf00      	nop
    return;
 8001b4e:	e16e      	b.n	8001e2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	f040 814a 	bne.w	8001dee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 8143 	beq.w	8001dee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 813c 	beq.w	8001dee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b40      	cmp	r3, #64	; 0x40
 8001b98:	f040 80b4 	bne.w	8001d04 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001ba8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8140 	beq.w	8001e32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	f080 8139 	bcs.w	8001e32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001bc6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd2:	f000 8088 	beq.w	8001ce6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	330c      	adds	r3, #12
 8001bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be4:	e853 3f00 	ldrex	r3, [r3]
 8001be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8001bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	330c      	adds	r3, #12
 8001bfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c12:	e841 2300 	strex	r3, r2, [r1]
 8001c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8001c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1d9      	bne.n	8001bd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	3314      	adds	r3, #20
 8001c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c2c:	e853 3f00 	ldrex	r3, [r3]
 8001c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8001c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3314      	adds	r3, #20
 8001c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8001c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001c52:	e841 2300 	strex	r3, r2, [r1]
 8001c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8001c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1e1      	bne.n	8001c22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3314      	adds	r3, #20
 8001c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c68:	e853 3f00 	ldrex	r3, [r3]
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8001c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	3314      	adds	r3, #20
 8001c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c8a:	e841 2300 	strex	r3, r2, [r1]
 8001c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8001c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1e3      	bne.n	8001c5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cae:	e853 3f00 	ldrex	r3, [r3]
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb6:	f023 0310 	bic.w	r3, r3, #16
 8001cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	330c      	adds	r3, #12
 8001cc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 8001cca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ccc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001cd0:	e841 2300 	strex	r3, r2, [r1]
 8001cd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8001cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e3      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fff4 	bl	8000cce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8ac 	bl	8001e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001cfc:	e099      	b.n	8001e32 <HAL_UART_IRQHandler+0x50e>
 8001cfe:	bf00      	nop
 8001d00:	08001fc7 	.word	0x08001fc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 808b 	beq.w	8001e36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8001d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8086 	beq.w	8001e36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d34:	e853 3f00 	ldrex	r3, [r3]
 8001d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8001d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d56:	e841 2300 	strex	r3, r2, [r1]
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8001d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1e3      	bne.n	8001d2a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	3314      	adds	r3, #20
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	623b      	str	r3, [r7, #32]
   return(result);
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3314      	adds	r3, #20
 8001d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001d86:	633a      	str	r2, [r7, #48]	; 0x30
 8001d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d8e:	e841 2300 	strex	r3, r2, [r1]
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8001d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e3      	bne.n	8001d62 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	330c      	adds	r3, #12
 8001dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	e853 3f00 	ldrex	r3, [r3]
 8001db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f023 0310 	bic.w	r3, r3, #16
 8001dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	330c      	adds	r3, #12
 8001dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001dcc:	61fa      	str	r2, [r7, #28]
 8001dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	e841 2300 	strex	r3, r2, [r1]
 8001dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e3      	bne.n	8001da8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f834 	bl	8001e54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001dec:	e023      	b.n	8001e36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d009      	beq.n	8001e0e <HAL_UART_IRQHandler+0x4ea>
 8001dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8f1 	bl	8001fee <UART_Transmit_IT>
    return;
 8001e0c:	e014      	b.n	8001e38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00e      	beq.n	8001e38 <HAL_UART_IRQHandler+0x514>
 8001e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d008      	beq.n	8001e38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f931 	bl	800208e <UART_EndTransmit_IT>
    return;
 8001e2c:	e004      	b.n	8001e38 <HAL_UART_IRQHandler+0x514>
    return;
 8001e2e:	bf00      	nop
 8001e30:	e002      	b.n	8001e38 <HAL_UART_IRQHandler+0x514>
      return;
 8001e32:	bf00      	nop
 8001e34:	e000      	b.n	8001e38 <HAL_UART_IRQHandler+0x514>
      return;
 8001e36:	bf00      	nop
  }
}
 8001e38:	37e8      	adds	r7, #232	; 0xe8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	88fa      	ldrh	r2, [r7, #6]
 8001e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	88fa      	ldrh	r2, [r7, #6]
 8001ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2222      	movs	r2, #34	; 0x22
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ed0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0220 	orr.w	r2, r2, #32
 8001ef0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b095      	sub	sp, #84	; 0x54
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f12:	e853 3f00 	ldrex	r3, [r3]
 8001f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f28:	643a      	str	r2, [r7, #64]	; 0x40
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f30:	e841 2300 	strex	r3, r2, [r1]
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e5      	bne.n	8001f08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3314      	adds	r3, #20
 8001f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	e853 3f00 	ldrex	r3, [r3]
 8001f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f023 0301 	bic.w	r3, r3, #1
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f64:	e841 2300 	strex	r3, r2, [r1]
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1e5      	bne.n	8001f3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d119      	bne.n	8001fac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	e853 3f00 	ldrex	r3, [r3]
 8001f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	f023 0310 	bic.w	r3, r3, #16
 8001f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	330c      	adds	r3, #12
 8001f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f98:	61ba      	str	r2, [r7, #24]
 8001f9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9c:	6979      	ldr	r1, [r7, #20]
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	e841 2300 	strex	r3, r2, [r1]
 8001fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1e5      	bne.n	8001f78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001fba:	bf00      	nop
 8001fbc:	3754      	adds	r7, #84	; 0x54
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff2d 	bl	8001e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fe6:	bf00      	nop
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b21      	cmp	r3, #33	; 0x21
 8002000:	d13e      	bne.n	8002080 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800200a:	d114      	bne.n	8002036 <UART_Transmit_IT+0x48>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d110      	bne.n	8002036 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002028:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	1c9a      	adds	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	e008      	b.n	8002048 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	1c59      	adds	r1, r3, #1
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6211      	str	r1, [r2, #32]
 8002040:	781a      	ldrb	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29b      	uxth	r3, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4619      	mov	r1, r3
 8002056:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800207a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e000      	b.n	8002082 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002080:	2302      	movs	r3, #2
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 fa50 	bl	8003554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b08c      	sub	sp, #48	; 0x30
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b22      	cmp	r3, #34	; 0x22
 80020d0:	f040 80ab 	bne.w	800222a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020dc:	d117      	bne.n	800210e <UART_Receive_IT+0x50>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28
 800210c:	e026      	b.n	800215c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002120:	d007      	beq.n	8002132 <UART_Receive_IT+0x74>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <UART_Receive_IT+0x82>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	e008      	b.n	8002152 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800214c:	b2da      	uxtb	r2, r3
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29b      	uxth	r3, r3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4619      	mov	r1, r3
 800216a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800216c:	2b00      	cmp	r3, #0
 800216e:	d15a      	bne.n	8002226 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0220 	bic.w	r2, r2, #32
 800217e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d135      	bne.n	800221c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	613b      	str	r3, [r7, #16]
   return(result);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f023 0310 	bic.w	r3, r3, #16
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	623a      	str	r2, [r7, #32]
 80021d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021da:	69f9      	ldr	r1, [r7, #28]
 80021dc:	6a3a      	ldr	r2, [r7, #32]
 80021de:	e841 2300 	strex	r3, r2, [r1]
 80021e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1e5      	bne.n	80021b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d10a      	bne.n	800220e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe1d 	bl	8001e54 <HAL_UARTEx_RxEventCallback>
 800221a:	e002      	b.n	8002222 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 f9a5 	bl	800356c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e002      	b.n	800222c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800222a:	2302      	movs	r3, #2
  }
}
 800222c:	4618      	mov	r0, r3
 800222e:	3730      	adds	r7, #48	; 0x30
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002238:	b0c0      	sub	sp, #256	; 0x100
 800223a:	af00      	add	r7, sp, #0
 800223c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	ea40 0301 	orr.w	r3, r0, r1
 800225c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	431a      	orrs	r2, r3
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	431a      	orrs	r2, r3
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800228c:	f021 010c 	bic.w	r1, r1, #12
 8002290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800229a:	430b      	orrs	r3, r1
 800229c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800229e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80022aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ae:	6999      	ldr	r1, [r3, #24]
 80022b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	ea40 0301 	orr.w	r3, r0, r1
 80022ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b8f      	ldr	r3, [pc, #572]	; (8002500 <UART_SetConfig+0x2cc>)
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d005      	beq.n	80022d4 <UART_SetConfig+0xa0>
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b8d      	ldr	r3, [pc, #564]	; (8002504 <UART_SetConfig+0x2d0>)
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d104      	bne.n	80022de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022d4:	f7ff f960 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 80022d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022dc:	e003      	b.n	80022e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022de:	f7ff f947 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 80022e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f0:	f040 810c 	bne.w	800250c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022f8:	2200      	movs	r2, #0
 80022fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002306:	4622      	mov	r2, r4
 8002308:	462b      	mov	r3, r5
 800230a:	1891      	adds	r1, r2, r2
 800230c:	65b9      	str	r1, [r7, #88]	; 0x58
 800230e:	415b      	adcs	r3, r3
 8002310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002316:	4621      	mov	r1, r4
 8002318:	eb12 0801 	adds.w	r8, r2, r1
 800231c:	4629      	mov	r1, r5
 800231e:	eb43 0901 	adc.w	r9, r3, r1
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800232e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	4623      	mov	r3, r4
 800233c:	eb18 0303 	adds.w	r3, r8, r3
 8002340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002344:	462b      	mov	r3, r5
 8002346:	eb49 0303 	adc.w	r3, r9, r3
 800234a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800235a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800235e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002362:	460b      	mov	r3, r1
 8002364:	18db      	adds	r3, r3, r3
 8002366:	653b      	str	r3, [r7, #80]	; 0x50
 8002368:	4613      	mov	r3, r2
 800236a:	eb42 0303 	adc.w	r3, r2, r3
 800236e:	657b      	str	r3, [r7, #84]	; 0x54
 8002370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002378:	f7fd ff34 	bl	80001e4 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4b61      	ldr	r3, [pc, #388]	; (8002508 <UART_SetConfig+0x2d4>)
 8002382:	fba3 2302 	umull	r2, r3, r3, r2
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	011c      	lsls	r4, r3, #4
 800238a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800238e:	2200      	movs	r2, #0
 8002390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800239c:	4642      	mov	r2, r8
 800239e:	464b      	mov	r3, r9
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80023a4:	415b      	adcs	r3, r3
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023ac:	4641      	mov	r1, r8
 80023ae:	eb12 0a01 	adds.w	sl, r2, r1
 80023b2:	4649      	mov	r1, r9
 80023b4:	eb43 0b01 	adc.w	fp, r3, r1
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023cc:	4692      	mov	sl, r2
 80023ce:	469b      	mov	fp, r3
 80023d0:	4643      	mov	r3, r8
 80023d2:	eb1a 0303 	adds.w	r3, sl, r3
 80023d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023da:	464b      	mov	r3, r9
 80023dc:	eb4b 0303 	adc.w	r3, fp, r3
 80023e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023f8:	460b      	mov	r3, r1
 80023fa:	18db      	adds	r3, r3, r3
 80023fc:	643b      	str	r3, [r7, #64]	; 0x40
 80023fe:	4613      	mov	r3, r2
 8002400:	eb42 0303 	adc.w	r3, r2, r3
 8002404:	647b      	str	r3, [r7, #68]	; 0x44
 8002406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800240a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800240e:	f7fd fee9 	bl	80001e4 <__aeabi_uldivmod>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4611      	mov	r1, r2
 8002418:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <UART_SetConfig+0x2d4>)
 800241a:	fba3 2301 	umull	r2, r3, r3, r1
 800241e:	095b      	lsrs	r3, r3, #5
 8002420:	2264      	movs	r2, #100	; 0x64
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	1acb      	subs	r3, r1, r3
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <UART_SetConfig+0x2d4>)
 8002430:	fba3 2302 	umull	r2, r3, r3, r2
 8002434:	095b      	lsrs	r3, r3, #5
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800243c:	441c      	add	r4, r3
 800243e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002442:	2200      	movs	r2, #0
 8002444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800244c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002450:	4642      	mov	r2, r8
 8002452:	464b      	mov	r3, r9
 8002454:	1891      	adds	r1, r2, r2
 8002456:	63b9      	str	r1, [r7, #56]	; 0x38
 8002458:	415b      	adcs	r3, r3
 800245a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002460:	4641      	mov	r1, r8
 8002462:	1851      	adds	r1, r2, r1
 8002464:	6339      	str	r1, [r7, #48]	; 0x30
 8002466:	4649      	mov	r1, r9
 8002468:	414b      	adcs	r3, r1
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002478:	4659      	mov	r1, fp
 800247a:	00cb      	lsls	r3, r1, #3
 800247c:	4651      	mov	r1, sl
 800247e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002482:	4651      	mov	r1, sl
 8002484:	00ca      	lsls	r2, r1, #3
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	4603      	mov	r3, r0
 800248c:	4642      	mov	r2, r8
 800248e:	189b      	adds	r3, r3, r2
 8002490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002494:	464b      	mov	r3, r9
 8002496:	460a      	mov	r2, r1
 8002498:	eb42 0303 	adc.w	r3, r2, r3
 800249c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80024ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80024b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80024b4:	460b      	mov	r3, r1
 80024b6:	18db      	adds	r3, r3, r3
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ba:	4613      	mov	r3, r2
 80024bc:	eb42 0303 	adc.w	r3, r2, r3
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024ca:	f7fd fe8b 	bl	80001e4 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <UART_SetConfig+0x2d4>)
 80024d4:	fba3 1302 	umull	r1, r3, r3, r2
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	2164      	movs	r1, #100	; 0x64
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	3332      	adds	r3, #50	; 0x32
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <UART_SetConfig+0x2d4>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4422      	add	r2, r4
 80024fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024fc:	e106      	b.n	800270c <UART_SetConfig+0x4d8>
 80024fe:	bf00      	nop
 8002500:	40011000 	.word	0x40011000
 8002504:	40011400 	.word	0x40011400
 8002508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800250c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002510:	2200      	movs	r2, #0
 8002512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800251a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800251e:	4642      	mov	r2, r8
 8002520:	464b      	mov	r3, r9
 8002522:	1891      	adds	r1, r2, r2
 8002524:	6239      	str	r1, [r7, #32]
 8002526:	415b      	adcs	r3, r3
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800252e:	4641      	mov	r1, r8
 8002530:	1854      	adds	r4, r2, r1
 8002532:	4649      	mov	r1, r9
 8002534:	eb43 0501 	adc.w	r5, r3, r1
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	00eb      	lsls	r3, r5, #3
 8002542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002546:	00e2      	lsls	r2, r4, #3
 8002548:	4614      	mov	r4, r2
 800254a:	461d      	mov	r5, r3
 800254c:	4643      	mov	r3, r8
 800254e:	18e3      	adds	r3, r4, r3
 8002550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002554:	464b      	mov	r3, r9
 8002556:	eb45 0303 	adc.w	r3, r5, r3
 800255a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800255e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800256a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800257a:	4629      	mov	r1, r5
 800257c:	008b      	lsls	r3, r1, #2
 800257e:	4621      	mov	r1, r4
 8002580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002584:	4621      	mov	r1, r4
 8002586:	008a      	lsls	r2, r1, #2
 8002588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800258c:	f7fd fe2a 	bl	80001e4 <__aeabi_uldivmod>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4b60      	ldr	r3, [pc, #384]	; (8002718 <UART_SetConfig+0x4e4>)
 8002596:	fba3 2302 	umull	r2, r3, r3, r2
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	011c      	lsls	r4, r3, #4
 800259e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80025ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80025b0:	4642      	mov	r2, r8
 80025b2:	464b      	mov	r3, r9
 80025b4:	1891      	adds	r1, r2, r2
 80025b6:	61b9      	str	r1, [r7, #24]
 80025b8:	415b      	adcs	r3, r3
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025c0:	4641      	mov	r1, r8
 80025c2:	1851      	adds	r1, r2, r1
 80025c4:	6139      	str	r1, [r7, #16]
 80025c6:	4649      	mov	r1, r9
 80025c8:	414b      	adcs	r3, r1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025d8:	4659      	mov	r1, fp
 80025da:	00cb      	lsls	r3, r1, #3
 80025dc:	4651      	mov	r1, sl
 80025de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025e2:	4651      	mov	r1, sl
 80025e4:	00ca      	lsls	r2, r1, #3
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	4642      	mov	r2, r8
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025f4:	464b      	mov	r3, r9
 80025f6:	460a      	mov	r2, r1
 80025f8:	eb42 0303 	adc.w	r3, r2, r3
 80025fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	67bb      	str	r3, [r7, #120]	; 0x78
 800260a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002618:	4649      	mov	r1, r9
 800261a:	008b      	lsls	r3, r1, #2
 800261c:	4641      	mov	r1, r8
 800261e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002622:	4641      	mov	r1, r8
 8002624:	008a      	lsls	r2, r1, #2
 8002626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800262a:	f7fd fddb 	bl	80001e4 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4611      	mov	r1, r2
 8002634:	4b38      	ldr	r3, [pc, #224]	; (8002718 <UART_SetConfig+0x4e4>)
 8002636:	fba3 2301 	umull	r2, r3, r3, r1
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2264      	movs	r2, #100	; 0x64
 800263e:	fb02 f303 	mul.w	r3, r2, r3
 8002642:	1acb      	subs	r3, r1, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a33      	ldr	r2, [pc, #204]	; (8002718 <UART_SetConfig+0x4e4>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002654:	441c      	add	r4, r3
 8002656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800265a:	2200      	movs	r2, #0
 800265c:	673b      	str	r3, [r7, #112]	; 0x70
 800265e:	677a      	str	r2, [r7, #116]	; 0x74
 8002660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002664:	4642      	mov	r2, r8
 8002666:	464b      	mov	r3, r9
 8002668:	1891      	adds	r1, r2, r2
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	415b      	adcs	r3, r3
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002674:	4641      	mov	r1, r8
 8002676:	1851      	adds	r1, r2, r1
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	4649      	mov	r1, r9
 800267c:	414b      	adcs	r3, r1
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800268c:	4659      	mov	r1, fp
 800268e:	00cb      	lsls	r3, r1, #3
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002696:	4651      	mov	r1, sl
 8002698:	00ca      	lsls	r2, r1, #3
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	4642      	mov	r2, r8
 80026a2:	189b      	adds	r3, r3, r2
 80026a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80026a6:	464b      	mov	r3, r9
 80026a8:	460a      	mov	r2, r1
 80026aa:	eb42 0303 	adc.w	r3, r2, r3
 80026ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	663b      	str	r3, [r7, #96]	; 0x60
 80026ba:	667a      	str	r2, [r7, #100]	; 0x64
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026c8:	4649      	mov	r1, r9
 80026ca:	008b      	lsls	r3, r1, #2
 80026cc:	4641      	mov	r1, r8
 80026ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d2:	4641      	mov	r1, r8
 80026d4:	008a      	lsls	r2, r1, #2
 80026d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026da:	f7fd fd83 	bl	80001e4 <__aeabi_uldivmod>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <UART_SetConfig+0x4e4>)
 80026e4:	fba3 1302 	umull	r1, r3, r3, r2
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	2164      	movs	r1, #100	; 0x64
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	3332      	adds	r3, #50	; 0x32
 80026f6:	4a08      	ldr	r2, [pc, #32]	; (8002718 <UART_SetConfig+0x4e4>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4422      	add	r2, r4
 800270a:	609a      	str	r2, [r3, #8]
}
 800270c:	bf00      	nop
 800270e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002712:	46bd      	mov	sp, r7
 8002714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <TbxAssertTrigger>:
** \param     line The line number inside the file where the assertion occurred.
**
****************************************************************************************/
void TbxAssertTrigger(char     const * const file, 
                      uint32_t               line)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Check if there is an application specific assertion handler configured. */
  if (tbxAssertHandlerPtr != NULL)
 8002726:	4b07      	ldr	r3, [pc, #28]	; (8002744 <TbxAssertTrigger+0x28>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <TbxAssertTrigger+0x1e>
  {
    /* Call the application specific assertion handler. */
    tbxAssertHandlerPtr(file, line);
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <TbxAssertTrigger+0x28>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
    for (;;)
    {
      ;
    }
  }
} /*** end of TbxAssertTrigger ***/
 8002738:	e000      	b.n	800273c <TbxAssertTrigger+0x20>
    for (;;)
 800273a:	e7fe      	b.n	800273a <TbxAssertTrigger+0x1e>
} /*** end of TbxAssertTrigger ***/
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200000c0 	.word	0x200000c0

08002748 <TbxCriticalSectionEnter>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionEnter(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* Disable the interrupts and store the CPU status register value in a local variable.
   * Note that it should not write directly to tbxCritSectCpuSR yet, because the
   * tbxCritSectCpuSR variable is a shared resource and should only be accessed with
   * interrupts disabled.
   */
  cpuSR = TbxPortInterruptsDisable();
 800274e:	f7fd fd41 	bl	80001d4 <TbxPortInterruptsDisable>
 8002752:	6078      	str	r0, [r7, #4]

  /* It this the first time we enter the critical section, as opposed to a nested
   * entry?
   */
  if (tbxCritSectNestingCounter == 0U)
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <TbxCriticalSectionEnter+0x2c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <TbxCriticalSectionEnter+0x1a>
  {
    /* Store the CPU status register value in tbxCritSectCpuSR, since it is now safe
     * to access it. It is needed to restore the interrupt status upon exiting the
     * critical section.
     */
    tbxCritSectCpuSR = cpuSR;
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <TbxCriticalSectionEnter+0x30>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  }
  /* Increment the nesting counter. */
  tbxCritSectNestingCounter++;
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <TbxCriticalSectionEnter+0x2c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	4a02      	ldr	r2, [pc, #8]	; (8002774 <TbxCriticalSectionEnter+0x2c>)
 800276a:	6013      	str	r3, [r2, #0]
} /*** end of TbxCriticalSectionEnter ***/
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200000c4 	.word	0x200000c4
 8002778:	200000c8 	.word	0x200000c8

0800277c <TbxCriticalSectionExit>:
**              ...access shared resource...
**              TbxCriticalSectionExit();
**
****************************************************************************************/
void TbxCriticalSectionExit(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* A call to this function must always be preceeded by a call to
   * TbxCriticalSectionEnter(). This means the tbxCritSectNestingCounter must be > 0.
   */
  TBX_ASSERT(tbxCritSectNestingCounter > 0U);
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <TbxCriticalSectionExit+0x3c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <TbxCriticalSectionExit+0x14>
 8002788:	2170      	movs	r1, #112	; 0x70
 800278a:	480c      	ldr	r0, [pc, #48]	; (80027bc <TbxCriticalSectionExit+0x40>)
 800278c:	f7ff ffc6 	bl	800271c <TbxAssertTrigger>

  /* Only continue if this function call was preceeded by a call to 
   * TbxCriticalSectionEnter().
   */
  if (tbxCritSectNestingCounter > 0U)
 8002790:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <TbxCriticalSectionExit+0x3c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <TbxCriticalSectionExit+0x38>
  {
    /* Decrement the nesting counter. */
    tbxCritSectNestingCounter--;
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <TbxCriticalSectionExit+0x3c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3b01      	subs	r3, #1
 800279e:	4a06      	ldr	r2, [pc, #24]	; (80027b8 <TbxCriticalSectionExit+0x3c>)
 80027a0:	6013      	str	r3, [r2, #0]

    /* Is this the final call meaning that it is time we exit the critical section by
     * actually restoring the interrupt status again?
     */
    if (tbxCritSectNestingCounter == 0U)
 80027a2:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <TbxCriticalSectionExit+0x3c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <TbxCriticalSectionExit+0x38>
    {
      /* Restore the interrupt status to the state it was right before the interrupts
       * were all disabled upon the first time the critical section was entered.
      */
      TbxPortInterruptsRestore(tbxCritSectCpuSR);
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <TbxCriticalSectionExit+0x44>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fd14 	bl	80001dc <TbxPortInterruptsRestore>
    }
  }
} /*** end of TbxCriticalSectionExit ***/
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200000c4 	.word	0x200000c4
 80027bc:	08005834 	.word	0x08005834
 80027c0:	200000c8 	.word	0x200000c8

080027c4 <TbxHeapAllocate>:
** \return    Pointer to the start of the newly allocated heap memory if successful,
**            NULL otherwise.
**
****************************************************************************************/
void * TbxHeapAllocate(size_t size)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
   * The actual heap buffer. Whenever memory needs to be dynamically allocated, it will
   * be taken from this buffer. As such, it is okay to not be initialized and therefore
   * the warning about no value being assigned to this variable can be ignored.
   */
  static uint8_t   tbxHeapBuffer[TBX_CONF_HEAP_SIZE];
  void           * result = NULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <TbxHeapAllocate+0x1a>
 80027d6:	2151      	movs	r1, #81	; 0x51
 80027d8:	4813      	ldr	r0, [pc, #76]	; (8002828 <TbxHeapAllocate+0x64>)
 80027da:	f7ff ff9f 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (size > 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01c      	beq.n	800281e <TbxHeapAllocate+0x5a>
  {
    /* Align the desired size to the address size to make it work on all targets. */
    size_t sizeWanted = (size + (sizeof(void *) - 1U)) & ~(sizeof(void *) - 1U);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3303      	adds	r3, #3
 80027e8:	f023 0303 	bic.w	r3, r3, #3
 80027ec:	613b      	str	r3, [r7, #16]
    /* Obtain mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionEnter();
 80027ee:	f7ff ffab 	bl	8002748 <TbxCriticalSectionEnter>
      /* Determine the number of still available bytes in the heap buffer. */
    size_t sizeAvailable = TBX_CONF_HEAP_SIZE - tbxHeapAllocated;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <TbxHeapAllocate+0x68>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80027fa:	60fb      	str	r3, [r7, #12]
    /* Is there enough space left on the heap for this allocation request? */
    if (sizeAvailable >= sizeWanted)
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d30a      	bcc.n	800281a <TbxHeapAllocate+0x56>
    {
      /* Set the address for the newly allocated memory. */
      result = &tbxHeapBuffer[tbxHeapAllocated];
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <TbxHeapAllocate+0x68>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a09      	ldr	r2, [pc, #36]	; (8002830 <TbxHeapAllocate+0x6c>)
 800280a:	4413      	add	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
      /* Perform the actual allocation by incrementing the counter. */
      tbxHeapAllocated += sizeWanted;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <TbxHeapAllocate+0x68>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <TbxHeapAllocate+0x68>)
 8002818:	6013      	str	r3, [r2, #0]
    }
    /* Release mutual exclusive access to tbxHeapAllocated. */
    TbxCriticalSectionExit();
 800281a:	f7ff ffaf 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Return the address of the allocated memory to the caller. */
  return result;
 800281e:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxHeapAllocate ***/
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	08005858 	.word	0x08005858
 800282c:	200000cc 	.word	0x200000cc
 8002830:	200000d0 	.word	0x200000d0

08002834 <TbxListCreate>:
**            is needed when calling the other API functions in this module.
** \return    The pointer to the created linked list or NULL in case or error.
**
****************************************************************************************/
tTbxList * TbxListCreate(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
  tTbxList         * result = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
  static uint8_t     memPoolsCreated = TBX_FALSE;
  uint8_t            errorDetected = TBX_FALSE;
 800283e:	2300      	movs	r3, #0
 8002840:	72fb      	strb	r3, [r7, #11]
  tTbxList         * newListPtr;

  /* Check if this is the first time that this function is called. */
  if (memPoolsCreated == TBX_FALSE)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <TbxListCreate+0x90>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <TbxListCreate+0x40>
  {
    /* Invert flag because this part only needs to run one time. */
    memPoolsCreated = TBX_TRUE;
 800284a:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <TbxListCreate+0x90>)
 800284c:	2201      	movs	r2, #1
 800284e:	701a      	strb	r2, [r3, #0]
    /* This module allows the dynamic creation and deletion of a linked list and its
     * nodes. For both these times (tTbxList and tTbxListNode) a memory pool needs to be
     * created. An initial size of 1 is sufficient, because the plan is to expand each
     * memory pool whenever more blocks need to be allocated from it.
     */
    if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_ERROR)
 8002850:	210c      	movs	r1, #12
 8002852:	2001      	movs	r0, #1
 8002854:	f000 fa34 	bl	8002cc0 <TbxMemPoolCreate>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <TbxListCreate+0x2e>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 800285e:	2301      	movs	r3, #1
 8002860:	72fb      	strb	r3, [r7, #11]
    }
    if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_ERROR)
 8002862:	210c      	movs	r1, #12
 8002864:	2001      	movs	r0, #1
 8002866:	f000 fa2b 	bl	8002cc0 <TbxMemPoolCreate>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <TbxListCreate+0x40>
    {
      /* Flag the error. */
      errorDetected = TBX_TRUE;
 8002870:	2301      	movs	r3, #1
 8002872:	72fb      	strb	r3, [r7, #11]
    }
  }

  /* Only continue if no error was detected so far. */
  if (errorDetected == TBX_FALSE)
 8002874:	7afb      	ldrb	r3, [r7, #11]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d11f      	bne.n	80028ba <TbxListCreate+0x86>
  {
    /* Attempt to allocate a block for the new list. */
    newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 800287a:	200c      	movs	r0, #12
 800287c:	f000 fac2 	bl	8002e04 <TbxMemPoolAllocate>
 8002880:	6078      	str	r0, [r7, #4]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListPtr == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <TbxListCreate+0x6a>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxList)) == TBX_OK)
 8002888:	210c      	movs	r1, #12
 800288a:	2001      	movs	r0, #1
 800288c:	f000 fa18 	bl	8002cc0 <TbxMemPoolCreate>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d103      	bne.n	800289e <TbxListCreate+0x6a>
      {
        /* Second attempt of the block allocation. */
        newListPtr = TbxMemPoolAllocate(sizeof(tTbxList));
 8002896:	200c      	movs	r0, #12
 8002898:	f000 fab4 	bl	8002e04 <TbxMemPoolAllocate>
 800289c:	6078      	str	r0, [r7, #4]
      }
    }

    /* Only continue if the allocation was successful. */
    if (newListPtr != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <TbxListCreate+0x86>
    {
      /* By default the created list is empty. */
      newListPtr->firstNodePtr = NULL;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	605a      	str	r2, [r3, #4]
      newListPtr->lastNodePtr = NULL;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
      newListPtr->nodeCount = 0U;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
      /* The list was successfully created so update the result to give the pointer to
       * the newly created list back to the caller. This pointer serves as the handle to
       * the list and is needed when calling API function of this module.
       */
      result = newListPtr;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Give the result back to the caller. */
  return result;
 80028ba:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListCreate ***/
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200008d0 	.word	0x200008d0

080028c8 <TbxListGetSize>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    Total number of items currently stored in the list.
**
****************************************************************************************/
size_t TbxListGetSize(tTbxList const * list)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  size_t result = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d103      	bne.n	80028e2 <TbxListGetSize+0x1a>
 80028da:	21d2      	movs	r1, #210	; 0xd2
 80028dc:	4808      	ldr	r0, [pc, #32]	; (8002900 <TbxListGetSize+0x38>)
 80028de:	f7ff ff1d 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (list != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d006      	beq.n	80028f6 <TbxListGetSize+0x2e>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 80028e8:	f7ff ff2e 	bl	8002748 <TbxCriticalSectionEnter>
    /* Store the current number of items in the list in the result variable. */
    result = list->nodeCount;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 80028f2:	f7ff ff43 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 80028f6:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetSize ***/
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	08005878 	.word	0x08005878

08002904 <TbxListInsertItemBack>:
** \return    TBX_OK if the item could be inserted, TBX_ERROR otherwise.
**
****************************************************************************************/
uint8_t TbxListInsertItemBack(tTbxList * list, 
                              void     * item)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint8_t        result = TBX_ERROR;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  tTbxListNode * newListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d104      	bne.n	8002922 <TbxListInsertItemBack+0x1e>
 8002918:	f240 1143 	movw	r1, #323	; 0x143
 800291c:	482d      	ldr	r0, [pc, #180]	; (80029d4 <TbxListInsertItemBack+0xd0>)
 800291e:	f7ff fefd 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d104      	bne.n	8002932 <TbxListInsertItemBack+0x2e>
 8002928:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800292c:	4829      	ldr	r0, [pc, #164]	; (80029d4 <TbxListInsertItemBack+0xd0>)
 800292e:	f7ff fef5 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d047      	beq.n	80029c8 <TbxListInsertItemBack+0xc4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d044      	beq.n	80029c8 <TbxListInsertItemBack+0xc4>
  {
    /* Attempt to allocate a block for a node in the list. */
    newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 800293e:	200c      	movs	r0, #12
 8002940:	f000 fa60 	bl	8002e04 <TbxMemPoolAllocate>
 8002944:	60b8      	str	r0, [r7, #8]
    /* In case the allocation failed, the memory pool could be exhausted. Try to add
     * another block to the memory pool. This works as long as there is enough heap
     * configured.
     */
    if (newListNodePtr == NULL)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <TbxListInsertItemBack+0x5e>
    {
      /* Try to add another block to the memory pool. */
      if (TbxMemPoolCreate(1, sizeof(tTbxListNode)) == TBX_OK)
 800294c:	210c      	movs	r1, #12
 800294e:	2001      	movs	r0, #1
 8002950:	f000 f9b6 	bl	8002cc0 <TbxMemPoolCreate>
 8002954:	4603      	mov	r3, r0
 8002956:	2b01      	cmp	r3, #1
 8002958:	d103      	bne.n	8002962 <TbxListInsertItemBack+0x5e>
      {
        /* Second attempt of the block allocation. */
        newListNodePtr = TbxMemPoolAllocate(sizeof(tTbxListNode));
 800295a:	200c      	movs	r0, #12
 800295c:	f000 fa52 	bl	8002e04 <TbxMemPoolAllocate>
 8002960:	60b8      	str	r0, [r7, #8]
      }
    }
    /* Only continue if the allocation was successful. */
    if (newListNodePtr != NULL)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02f      	beq.n	80029c8 <TbxListInsertItemBack+0xc4>
    {
      /* Initialize the node for the list. */
      newListNodePtr->itemPtr = item;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	601a      	str	r2, [r3, #0]
      newListNodePtr->prevNodePtr = NULL;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
      newListNodePtr->nextNodePtr = NULL;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 800297a:	f7ff fee5 	bl	8002748 <TbxCriticalSectionEnter>
      /* Check if the list is not empty. */
      if (list->firstNodePtr != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d011      	beq.n	80029aa <TbxListInsertItemBack+0xa6>
      {
        /* Sanity check. An non-empty list should have at least one node. */
        TBX_ASSERT(list->nodeCount > 0U);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d104      	bne.n	8002998 <TbxListInsertItemBack+0x94>
 800298e:	f240 1165 	movw	r1, #357	; 0x165
 8002992:	4810      	ldr	r0, [pc, #64]	; (80029d4 <TbxListInsertItemBack+0xd0>)
 8002994:	f7ff fec2 	bl	800271c <TbxAssertTrigger>
        /* The new node that is to be inserted will be added at the end and the current
         * end of the list should be moved up.
         */
        newListNodePtr->prevNodePtr = list->lastNodePtr;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	605a      	str	r2, [r3, #4]
        newListNodePtr->prevNodePtr->nextNodePtr = newListNodePtr;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	e002      	b.n	80029b0 <TbxListInsertItemBack+0xac>
      else
      {
        /* The to be added node will be the only node, so it is not only the last node
         * but also the first node.
         */
        list->firstNodePtr = newListNodePtr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	605a      	str	r2, [r3, #4]
      }
      /* Insert the new node at the end of the list. */
      list->lastNodePtr = newListNodePtr;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	609a      	str	r2, [r3, #8]
      /* Increment the node counter. */
      list->nodeCount++;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access for the list. */
      TbxCriticalSectionExit();
 80029c0:	f7ff fedc 	bl	800277c <TbxCriticalSectionExit>
      /* Update the result for success. */
      result = TBX_OK;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxListInsertItemBack ***/
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08005878 	.word	0x08005878

080029d8 <TbxListRemoveItem>:
** \param     item Pointer to the item to remove.
**
****************************************************************************************/
void TbxListRemoveItem(tTbxList       * list, 
                       void     const * item)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  tTbxListNode * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d104      	bne.n	80029f2 <TbxListRemoveItem+0x1a>
 80029e8:	f240 214a 	movw	r1, #586	; 0x24a
 80029ec:	4867      	ldr	r0, [pc, #412]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 80029ee:	f7ff fe95 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <TbxListRemoveItem+0x2a>
 80029f8:	f240 214b 	movw	r1, #587	; 0x24b
 80029fc:	4863      	ldr	r0, [pc, #396]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 80029fe:	f7ff fe8d 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80bc 	beq.w	8002b82 <TbxListRemoveItem+0x1aa>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80b8 	beq.w	8002b82 <TbxListRemoveItem+0x1aa>
  {
    /* Try to find the node that this item belongs to. */
    listNodePtr = TbxListFindListNode(list, item);
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f919 	bl	8002c4c <TbxListFindListNode>
 8002a1a:	60f8      	str	r0, [r7, #12]
    /* Only continue with removal if the item actually belongs to the list. */
    if (listNodePtr != NULL)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80af 	beq.w	8002b82 <TbxListRemoveItem+0x1aa>
    {
      /* Obtain mutual exclusive access to the list. */
      TbxCriticalSectionEnter();
 8002a24:	f7ff fe90 	bl	8002748 <TbxCriticalSectionEnter>
      /* Remove the node from the list. First check if it is the only node in the
       * list.
       */
      if ( (listNodePtr->prevNodePtr == NULL) && (listNodePtr->nextNodePtr == NULL) )
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d127      	bne.n	8002a80 <TbxListRemoveItem+0xa8>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d123      	bne.n	8002a80 <TbxListRemoveItem+0xa8>
      {
        /* Sanity check. This should also be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d004      	beq.n	8002a4c <TbxListRemoveItem+0x74>
 8002a42:	f240 215d 	movw	r1, #605	; 0x25d
 8002a46:	4851      	ldr	r0, [pc, #324]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002a48:	f7ff fe68 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. This should also be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d004      	beq.n	8002a60 <TbxListRemoveItem+0x88>
 8002a56:	f240 215f 	movw	r1, #607	; 0x25f
 8002a5a:	484c      	ldr	r0, [pc, #304]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002a5c:	f7ff fe5e 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. The list should only have one node. */
        TBX_ASSERT(list->nodeCount == 1U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d004      	beq.n	8002a72 <TbxListRemoveItem+0x9a>
 8002a68:	f240 2161 	movw	r1, #609	; 0x261
 8002a6c:	4847      	ldr	r0, [pc, #284]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002a6e:	f7ff fe55 	bl	800271c <TbxAssertTrigger>
        /* Set the list to empty. */
        list->firstNodePtr = NULL;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	605a      	str	r2, [r3, #4]
        list->lastNodePtr = NULL;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	e076      	b.n	8002b6e <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the start of the list. */
      else if (listNodePtr->prevNodePtr == NULL)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d124      	bne.n	8002ad2 <TbxListRemoveItem+0xfa>
      {
        /* Sanity check. This should be the start of the list. */
        TBX_ASSERT(listNodePtr == list->firstNodePtr);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d004      	beq.n	8002a9c <TbxListRemoveItem+0xc4>
 8002a92:	f240 216a 	movw	r1, #618	; 0x26a
 8002a96:	483d      	ldr	r0, [pc, #244]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002a98:	f7ff fe40 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <TbxListRemoveItem+0xd6>
 8002aa4:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8002aa8:	4838      	ldr	r0, [pc, #224]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002aaa:	f7ff fe37 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d804      	bhi.n	8002ac0 <TbxListRemoveItem+0xe8>
 8002ab6:	f240 216e 	movw	r1, #622	; 0x26e
 8002aba:	4834      	ldr	r0, [pc, #208]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002abc:	f7ff fe2e 	bl	800271c <TbxAssertTrigger>
        /* Make the next node the new start of the list. */
        list->firstNodePtr = listNodePtr->nextNodePtr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	605a      	str	r2, [r3, #4]
        list->firstNodePtr->prevNodePtr = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	e04d      	b.n	8002b6e <TbxListRemoveItem+0x196>
      }
      /* Check if it is at the end of the list. */
      else if (listNodePtr->nextNodePtr == NULL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d124      	bne.n	8002b24 <TbxListRemoveItem+0x14c>
      {
        /* Sanity check. This should be the end of the list. */
        TBX_ASSERT(listNodePtr == list->lastNodePtr);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d004      	beq.n	8002aee <TbxListRemoveItem+0x116>
 8002ae4:	f240 2177 	movw	r1, #631	; 0x277
 8002ae8:	4828      	ldr	r0, [pc, #160]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002aea:	f7ff fe17 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d104      	bne.n	8002b00 <TbxListRemoveItem+0x128>
 8002af6:	f240 2179 	movw	r1, #633	; 0x279
 8002afa:	4824      	ldr	r0, [pc, #144]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002afc:	f7ff fe0e 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. The list should have at least two nodes. */
        TBX_ASSERT(list->nodeCount > 1U);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d804      	bhi.n	8002b12 <TbxListRemoveItem+0x13a>
 8002b08:	f240 217b 	movw	r1, #635	; 0x27b
 8002b0c:	481f      	ldr	r0, [pc, #124]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002b0e:	f7ff fe05 	bl	800271c <TbxAssertTrigger>
        /* Make the previous node the end of the list. */
        list->lastNodePtr = listNodePtr->prevNodePtr;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	609a      	str	r2, [r3, #8]
        list->lastNodePtr->nextNodePtr = NULL;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	e024      	b.n	8002b6e <TbxListRemoveItem+0x196>
       * in the middle.
       */
      else
      {
        /* Sanity check. There should be a previous node. */
        TBX_ASSERT(listNodePtr->prevNodePtr != NULL);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d104      	bne.n	8002b36 <TbxListRemoveItem+0x15e>
 8002b2c:	f240 2187 	movw	r1, #647	; 0x287
 8002b30:	4816      	ldr	r0, [pc, #88]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002b32:	f7ff fdf3 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. There should be a next node. */
        TBX_ASSERT(listNodePtr->nextNodePtr != NULL);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d104      	bne.n	8002b48 <TbxListRemoveItem+0x170>
 8002b3e:	f240 2189 	movw	r1, #649	; 0x289
 8002b42:	4812      	ldr	r0, [pc, #72]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002b44:	f7ff fdea 	bl	800271c <TbxAssertTrigger>
        /* Sanity check. The list should have at least three nodes. */
        TBX_ASSERT(list->nodeCount > 2U);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d804      	bhi.n	8002b5a <TbxListRemoveItem+0x182>
 8002b50:	f240 218b 	movw	r1, #651	; 0x28b
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <TbxListRemoveItem+0x1b4>)
 8002b56:	f7ff fde1 	bl	800271c <TbxAssertTrigger>
        /* Remove ourselves from the list. */
        listNodePtr->prevNodePtr->nextNodePtr = listNodePtr->nextNodePtr;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	6892      	ldr	r2, [r2, #8]
 8002b62:	609a      	str	r2, [r3, #8]
        listNodePtr->nextNodePtr->prevNodePtr = listNodePtr->prevNodePtr;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	6852      	ldr	r2, [r2, #4]
 8002b6c:	605a      	str	r2, [r3, #4]
      }
      /* Decrement the node counter. */
      list->nodeCount--;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	601a      	str	r2, [r3, #0]
      /* Release mutual exclusive access of the list. */
      TbxCriticalSectionExit();
 8002b78:	f7ff fe00 	bl	800277c <TbxCriticalSectionExit>
      /* Give the node back to the memory pool. */
      TbxMemPoolRelease(listNodePtr);
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f991 	bl	8002ea4 <TbxMemPoolRelease>
    }
  }
} /*** end of TbxListRemoveItem ***/
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	08005878 	.word	0x08005878

08002b90 <TbxListGetFirstItem>:
** \param     list Pointer to a previously created linked list to operate on.
** \return    The item at the start of the list or NULL if the list is empty.
**
****************************************************************************************/
void * TbxListGetFirstItem(tTbxList const * list)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  void * result = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d104      	bne.n	8002bac <TbxListGetFirstItem+0x1c>
 8002ba2:	f240 21a7 	movw	r1, #679	; 0x2a7
 8002ba6:	480b      	ldr	r0, [pc, #44]	; (8002bd4 <TbxListGetFirstItem+0x44>)
 8002ba8:	f7ff fdb8 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if (list != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <TbxListGetFirstItem+0x3a>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8002bb2:	f7ff fdc9 	bl	8002748 <TbxCriticalSectionEnter>
    /* Get the first item in the list if there is one. */
    if (list->firstNodePtr != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <TbxListGetFirstItem+0x36>
    {
      result = list->firstNodePtr->itemPtr;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8002bc6:	f7ff fdd9 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002bca:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetFirstItem ***/
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08005878 	.word	0x08005878

08002bd8 <TbxListGetNextItem>:
**            more items in the list after the item given in the parameter.
**
****************************************************************************************/
void * TbxListGetNextItem(tTbxList const * list, 
                          void     const * itemRef)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  void               * result = NULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
  tTbxListNode const * listNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <TbxListGetNextItem+0x1e>
 8002bec:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002bf0:	4815      	ldr	r0, [pc, #84]	; (8002c48 <TbxListGetNextItem+0x70>)
 8002bf2:	f7ff fd93 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(itemRef != NULL);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <TbxListGetNextItem+0x2e>
 8002bfc:	f240 3121 	movw	r1, #801	; 0x321
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <TbxListGetNextItem+0x70>)
 8002c02:	f7ff fd8b 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (itemRef != NULL) )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d017      	beq.n	8002c3c <TbxListGetNextItem+0x64>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <TbxListGetNextItem+0x64>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8002c12:	f7ff fd99 	bl	8002748 <TbxCriticalSectionEnter>
    /* Obtain the node of the item specified in the parameter. */
    listNodePtr = TbxListFindListNode(list, itemRef);
 8002c16:	6839      	ldr	r1, [r7, #0]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f817 	bl	8002c4c <TbxListFindListNode>
 8002c1e:	60b8      	str	r0, [r7, #8]
    /* Only continue if the node could be found. */
    if (listNodePtr != NULL)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <TbxListGetNextItem+0x60>
    {
      /* Get the pointer to the next node. */
      listNodePtr = listNodePtr->nextNodePtr;
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]
      /* Only continue if there is actually a node here. */
      if (listNodePtr != NULL)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d002      	beq.n	8002c38 <TbxListGetNextItem+0x60>
      {
        /* Set the result to the item of the next node. */
        result = listNodePtr->itemPtr;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8002c38:	f7ff fda0 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListGetNextItem ***/
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	08005878 	.word	0x08005878

08002c4c <TbxListFindListNode>:
** \return    Pointer to the node if successful, NULL otherwise.
**
****************************************************************************************/
static tTbxListNode * TbxListFindListNode(tTbxList const * list, 
                                          void     const * item)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  tTbxListNode * result = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
  tTbxListNode * currentListNodePtr;

  /* Verify parameters. */
  TBX_ASSERT(list != NULL);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d104      	bne.n	8002c6a <TbxListFindListNode+0x1e>
 8002c60:	f240 31b3 	movw	r1, #947	; 0x3b3
 8002c64:	4815      	ldr	r0, [pc, #84]	; (8002cbc <TbxListFindListNode+0x70>)
 8002c66:	f7ff fd59 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(item != NULL);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d104      	bne.n	8002c7a <TbxListFindListNode+0x2e>
 8002c70:	f44f 716d 	mov.w	r1, #948	; 0x3b4
 8002c74:	4811      	ldr	r0, [pc, #68]	; (8002cbc <TbxListFindListNode+0x70>)
 8002c76:	f7ff fd51 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (list != NULL) && (item != NULL) )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d018      	beq.n	8002cb2 <TbxListFindListNode+0x66>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d015      	beq.n	8002cb2 <TbxListFindListNode+0x66>
  {
    /* Obtain mutual exclusive access to the list. */
    TbxCriticalSectionEnter();
 8002c86:	f7ff fd5f 	bl	8002748 <TbxCriticalSectionEnter>
    /* Get the pointer to the node at the head of the internal linked list. */
    currentListNodePtr = list->firstNodePtr;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60bb      	str	r3, [r7, #8]
    /* Loop through the nodes to find the node that the item belongs to. */
    while (currentListNodePtr != NULL)
 8002c90:	e00a      	b.n	8002ca8 <TbxListFindListNode+0x5c>
    {
      /* Is this the node we are looking for? */
      if (currentListNodePtr->itemPtr == item)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d102      	bne.n	8002ca2 <TbxListFindListNode+0x56>
      {
        /* Found the node. Update the result and stop looping. */
        result = currentListNodePtr;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	60fb      	str	r3, [r7, #12]
        break;
 8002ca0:	e005      	b.n	8002cae <TbxListFindListNode+0x62>
      }
      /* Update the node pointer to continue with the next node in the following loop
       * iteration.
       */
      currentListNodePtr = currentListNodePtr->nextNodePtr;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]
    while (currentListNodePtr != NULL)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f1      	bne.n	8002c92 <TbxListFindListNode+0x46>
    }
    /* Release mutual exclusive access of the list. */
    TbxCriticalSectionExit();
 8002cae:	f7ff fd65 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxListFindListNode ***/
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08005878 	.word	0x08005878

08002cc0 <TbxMemPoolCreate>:
**            more space available on the heap to statically preallocated the blocks.
**
****************************************************************************************/
uint8_t TbxMemPoolCreate(size_t numBlocks, 
                         size_t blockSize)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint8_t      result = TBX_ERROR;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	77fb      	strb	r3, [r7, #31]
  void       * blockPtr;
  tPool      * poolPtr;

  /* Verify parameters. */
  TBX_ASSERT(numBlocks > 0U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <TbxMemPoolCreate+0x1c>
 8002cd4:	219b      	movs	r1, #155	; 0x9b
 8002cd6:	484a      	ldr	r0, [pc, #296]	; (8002e00 <TbxMemPoolCreate+0x140>)
 8002cd8:	f7ff fd20 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(blockSize > 0U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d103      	bne.n	8002cea <TbxMemPoolCreate+0x2a>
 8002ce2:	219c      	movs	r1, #156	; 0x9c
 8002ce4:	4846      	ldr	r0, [pc, #280]	; (8002e00 <TbxMemPoolCreate+0x140>)
 8002ce6:	f7ff fd19 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (numBlocks > 0U) && (blockSize > 0U) )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8081 	beq.w	8002df4 <TbxMemPoolCreate+0x134>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07d      	beq.n	8002df4 <TbxMemPoolCreate+0x134>
  {
    /* Set the result value to okay. */
    result = TBX_OK;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	77fb      	strb	r3, [r7, #31]
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8002cfc:	f7ff fd24 	bl	8002748 <TbxCriticalSectionEnter>
    /* Attempt to locate a memory pool node in the list that is configured for the same
     * block size.
     */
    tPoolNode * poolNodePtr = TbxMemPoolListFind(blockSize);
 8002d00:	6838      	ldr	r0, [r7, #0]
 8002d02:	f000 f92b 	bl	8002f5c <TbxMemPoolListFind>
 8002d06:	61b8      	str	r0, [r7, #24]
    /* Create a new memory pool node and its associated empty memory pool if a memory
     * pool node for this block size does not yet exist.
     */
    if (poolNodePtr == NULL)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d134      	bne.n	8002d78 <TbxMemPoolCreate+0xb8>
    {
      /* Create a new memory pool node. */
      poolNodePtr = TbxHeapAllocate(sizeof(tPoolNode));
 8002d0e:	2008      	movs	r0, #8
 8002d10:	f7ff fd58 	bl	80027c4 <TbxHeapAllocate>
 8002d14:	61b8      	str	r0, [r7, #24]
      /* Verify that the memory pool node could be created. */
      if (poolNodePtr == NULL)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <TbxMemPoolCreate+0x62>
      {
        /* Flag the error. */
        result = TBX_ERROR;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e02a      	b.n	8002d78 <TbxMemPoolCreate+0xb8>
      }
      /* Continue with creating the memory pool object. */
      else
      {
        /* Create a new memory pool object. */
        poolPtr = TbxHeapAllocate(sizeof(tPool));
 8002d22:	200c      	movs	r0, #12
 8002d24:	f7ff fd4e 	bl	80027c4 <TbxHeapAllocate>
 8002d28:	6138      	str	r0, [r7, #16]
        /* Verify that the memory pool object could be created. */
        if (poolPtr == NULL)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <TbxMemPoolCreate+0x76>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 8002d30:	2300      	movs	r3, #0
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	e020      	b.n	8002d78 <TbxMemPoolCreate+0xb8>
        }
        /* Continue with initializing both the memory pool and its node. */
        else
        {
          /* Initialize the memory pool node. */
          poolNodePtr->nextNodePtr = NULL;
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	605a      	str	r2, [r3, #4]
          poolNodePtr->poolPtr = poolPtr;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	601a      	str	r2, [r3, #0]
          /* Store the data size of the blocks managed by the memory pool. */
          poolPtr->blockSize = blockSize;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	601a      	str	r2, [r3, #0]
          /* Create the block list object that will hold blocks that are still free. */
          poolPtr->freeBlockListPtr = TbxMemPoolBlockListCreate();
 8002d48:	f000 fa8e 	bl	8003268 <TbxMemPoolBlockListCreate>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	605a      	str	r2, [r3, #4]
          /* Create the block list object that will hold blocks that are in use. */
          poolPtr->usedBlockListPtr = TbxMemPoolBlockListCreate();
 8002d52:	f000 fa89 	bl	8003268 <TbxMemPoolBlockListCreate>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]
          /* Verify that the block list objects could be created. */
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <TbxMemPoolCreate+0xac>
               (poolPtr->usedBlockListPtr == NULL) )
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	689b      	ldr	r3, [r3, #8]
          if ( (poolPtr->freeBlockListPtr == NULL) ||
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d102      	bne.n	8002d72 <TbxMemPoolCreate+0xb2>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e002      	b.n	8002d78 <TbxMemPoolCreate+0xb8>
          /* The (empty) memory pool and its node were created. Time to insert it into
           * the list.
           */
          else
          {
            TbxMemPoolListInsert(poolNodePtr);
 8002d72:	69b8      	ldr	r0, [r7, #24]
 8002d74:	f000 f958 	bl	8003028 <TbxMemPoolListInsert>
          }
        }
      }
    }
    /* Only continue if all is okay so far. */
    if (result == TBX_OK)
 8002d78:	7ffb      	ldrb	r3, [r7, #31]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d138      	bne.n	8002df0 <TbxMemPoolCreate+0x130>
      /* The pool node pointer it now valid. It either points to a node that holds a
       * newly created and empty memory pool or to a node that holds an already existing
       * memory pool that can be extended. Create the blocks one by one and add them as
       * nodes to the free block list.
       */
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e031      	b.n	8002de8 <TbxMemPoolCreate+0x128>
      {
        /* Allocate memory for the block node. */
        tBlockNode * blockNodePtr = TbxHeapAllocate(sizeof(tBlockNode));
 8002d84:	2008      	movs	r0, #8
 8002d86:	f7ff fd1d 	bl	80027c4 <TbxHeapAllocate>
 8002d8a:	60f8      	str	r0, [r7, #12]
        /* Verify that the node could be allocated. */
        if (blockNodePtr == NULL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d102      	bne.n	8002d98 <TbxMemPoolCreate+0xd8>
        {
          /* Flag the error. */
          result = TBX_ERROR;
 8002d92:	2300      	movs	r3, #0
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e024      	b.n	8002de2 <TbxMemPoolCreate+0x122>
        }
        /* The node was created. */
        else
        {
          /* Allocate memory for the actual data block itself. */
          blockPtr = TbxMemPoolBlockCreate(blockSize);
 8002d98:	6838      	ldr	r0, [r7, #0]
 8002d9a:	f000 f9dd 	bl	8003158 <TbxMemPoolBlockCreate>
 8002d9e:	60b8      	str	r0, [r7, #8]
          /* Verify that the the data block could be allocated. */
          if (blockPtr == NULL)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d102      	bne.n	8002dac <TbxMemPoolCreate+0xec>
          {
            /* Flag the error. */
            result = TBX_ERROR;
 8002da6:	2300      	movs	r3, #0
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e01a      	b.n	8002de2 <TbxMemPoolCreate+0x122>
          }
          /* The data block was created. */
          else
          {
            /* Initialize the block node. */
            blockNodePtr->blockPtr = blockPtr;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	601a      	str	r2, [r3, #0]
            blockNodePtr->nextNodePtr = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]
            /* Sanity check. The pool node pointer should not be NULL here. */
            TBX_ASSERT(poolNodePtr != NULL);
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d104      	bne.n	8002dc8 <TbxMemPoolCreate+0x108>
 8002dbe:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002dc2:	480f      	ldr	r0, [pc, #60]	; (8002e00 <TbxMemPoolCreate+0x140>)
 8002dc4:	f7ff fcaa 	bl	800271c <TbxAssertTrigger>
            /* Flag error in case the sanity check failed. */
            if (poolNodePtr == NULL)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <TbxMemPoolCreate+0x114>
            {
              /* Flag the error. */
              result = TBX_ERROR;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	77fb      	strb	r3, [r7, #31]
 8002dd2:	e006      	b.n	8002de2 <TbxMemPoolCreate+0x122>
            }
            else
            {
              /* Insert the block node into the free block list. */
              TbxMemPoolBlockListInsert(poolNodePtr->poolPtr->freeBlockListPtr,
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	68f9      	ldr	r1, [r7, #12]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fa55 	bl	800328c <TbxMemPoolBlockListInsert>
      for (size_t blockNodeIdx = 0U; blockNodeIdx < numBlocks; blockNodeIdx++)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	3301      	adds	r3, #1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3c9      	bcc.n	8002d84 <TbxMemPoolCreate+0xc4>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8002df0:	f7ff fcc4 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMemPoolCreate ***/
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08005898 	.word	0x08005898

08002e04 <TbxMemPoolAllocate>:
** \return    Pointer to the start of the newly allocated memory if successful, NULL
**            otherwise.
**
****************************************************************************************/
void * TbxMemPoolAllocate(size_t size)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  void            * result = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  void            * blockDataPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <TbxMemPoolAllocate+0x1c>
 8002e16:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002e1a:	4821      	ldr	r0, [pc, #132]	; (8002ea0 <TbxMemPoolAllocate+0x9c>)
 8002e1c:	f7ff fc7e 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d037      	beq.n	8002e96 <TbxMemPoolAllocate+0x92>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8002e26:	f7ff fc8f 	bl	8002748 <TbxCriticalSectionEnter>
    /* Try to find the best fitting memory pool that has a block available. */
    poolNodePtr = TbxMemPoolListFindBestFit(size);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f8c4 	bl	8002fb8 <TbxMemPoolListFindBestFit>
 8002e30:	61b8      	str	r0, [r7, #24]
    /* Only continue with the allocation of a memory pool candidate was found. */
    if (poolNodePtr != NULL)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02c      	beq.n	8002e92 <TbxMemPoolAllocate+0x8e>
    {
      /* Get the pointer to the actual memory pool. */
      tPool const * poolPtr = poolNodePtr->poolPtr;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	617b      	str	r3, [r7, #20]
      /* Sanity check. The memory pool should not be NULL here. */
      TBX_ASSERT(poolPtr != NULL);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d104      	bne.n	8002e4e <TbxMemPoolAllocate+0x4a>
 8002e44:	f240 1147 	movw	r1, #327	; 0x147
 8002e48:	4815      	ldr	r0, [pc, #84]	; (8002ea0 <TbxMemPoolAllocate+0x9c>)
 8002e4a:	f7ff fc67 	bl	800271c <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolPtr != NULL)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01e      	beq.n	8002e92 <TbxMemPoolAllocate+0x8e>
      {
        /* Attempt to extract a block node from the linked list with free block nodes. */
        tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->freeBlockListPtr);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fa47 	bl	80032ec <TbxMemPoolBlockListExtract>
 8002e5e:	6138      	str	r0, [r7, #16]
        /* Only continue if a free block node could be extracted. */
        if (blockNodePtr != NULL)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d015      	beq.n	8002e92 <TbxMemPoolAllocate+0x8e>
        {
          /* Read and store the pointer that points to the block's data. */
          blockDataPtr = TbxMemPoolBlockGetDataPtr(blockNodePtr->blockPtr);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 f99c 	bl	80031a8 <TbxMemPoolBlockGetDataPtr>
 8002e70:	60f8      	str	r0, [r7, #12]
          /* Now the node itself needs to be inserted into the linked list with used
           * block nodes. This way this node can be reused when freeing this or another
           * block.
           */
          TbxMemPoolBlockListInsert(poolPtr->usedBlockListPtr, blockNodePtr);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	6939      	ldr	r1, [r7, #16]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fa07 	bl	800328c <TbxMemPoolBlockListInsert>
          /* Perform a sanity check. The block's data pointer should not be NULL here. */
          TBX_ASSERT(blockDataPtr != NULL);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <TbxMemPoolAllocate+0x8a>
 8002e84:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e88:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <TbxMemPoolAllocate+0x9c>)
 8002e8a:	f7ff fc47 	bl	800271c <TbxAssertTrigger>
          /* Set the result value. */
          result = blockDataPtr;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8002e92:	f7ff fc73 	bl	800277c <TbxCriticalSectionExit>
  }

  /* Give the result back to the caller. */
  return result;
 8002e96:	69fb      	ldr	r3, [r7, #28]
} /*** end of TbxMemPoolAllocate ***/
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	08005898 	.word	0x08005898

08002ea4 <TbxMemPoolRelease>:
**            that was returned by function TbxMemPoolAllocate(), when the memory was
**            initially allocated.
**
****************************************************************************************/
void TbxMemPoolRelease(void * memPtr)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  void            * blockPtr;
  tPoolNode const * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <TbxMemPoolRelease+0x18>
 8002eb2:	f240 1177 	movw	r1, #375	; 0x177
 8002eb6:	4828      	ldr	r0, [pc, #160]	; (8002f58 <TbxMemPoolRelease+0xb4>)
 8002eb8:	f7ff fc30 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d045      	beq.n	8002f4e <TbxMemPoolRelease+0xaa>
  {
    /* Obtain mutual exclusive access to the memory pool list. */
    TbxCriticalSectionEnter();
 8002ec2:	f7ff fc41 	bl	8002748 <TbxCriticalSectionEnter>
    /* First convert the block's data pointer to the block's base memory pointer. */
    blockPtr = TbxMemPoolBlockGetMemPtr(memPtr);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f9ae 	bl	8003228 <TbxMemPoolBlockGetMemPtr>
 8002ecc:	61f8      	str	r0, [r7, #28]
    /* Only continue if the block pointer is valid. */
    if (blockPtr != NULL)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d03a      	beq.n	8002f4a <TbxMemPoolRelease+0xa6>
    {
      /* Get the block's data size. */
      size_t blockSize = TbxMemPoolBlockGetBlockSize(blockPtr);
 8002ed4:	69f8      	ldr	r0, [r7, #28]
 8002ed6:	f000 f987 	bl	80031e8 <TbxMemPoolBlockGetBlockSize>
 8002eda:	61b8      	str	r0, [r7, #24]
      /* Attempt to locate the memory pool node that holds the memory pool with this
       * block size.
       */
      poolNodePtr = TbxMemPoolListFind(blockSize);
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f000 f83d 	bl	8002f5c <TbxMemPoolListFind>
 8002ee2:	6178      	str	r0, [r7, #20]
      /* Sanity check. The memory pool node that the to be released memory originally
       * belonged to should have been found.
       */
      TBX_ASSERT(poolNodePtr != NULL);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <TbxMemPoolRelease+0x50>
 8002eea:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8002eee:	481a      	ldr	r0, [pc, #104]	; (8002f58 <TbxMemPoolRelease+0xb4>)
 8002ef0:	f7ff fc14 	bl	800271c <TbxAssertTrigger>
      /* Only continue if the sanity check passed. */
      if (poolNodePtr != NULL)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d027      	beq.n	8002f4a <TbxMemPoolRelease+0xa6>
      {
        /* Get the pointer to the actual memory pool. */
        tPool const * poolPtr = poolNodePtr->poolPtr;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	613b      	str	r3, [r7, #16]
        /* Sanity check. The memory pool should not be NULL here. */
        TBX_ASSERT(poolPtr != NULL);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d104      	bne.n	8002f10 <TbxMemPoolRelease+0x6c>
 8002f06:	f240 1193 	movw	r1, #403	; 0x193
 8002f0a:	4813      	ldr	r0, [pc, #76]	; (8002f58 <TbxMemPoolRelease+0xb4>)
 8002f0c:	f7ff fc06 	bl	800271c <TbxAssertTrigger>
        /* Only continue if the sanity check passed. */
        if (poolPtr != NULL)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d019      	beq.n	8002f4a <TbxMemPoolRelease+0xa6>
        {
          /* Attempt to extract a block node from the linked list with used block
           * nodes.
           */
          tBlockNode * blockNodePtr = TbxMemPoolBlockListExtract(poolPtr->usedBlockListPtr);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f9e6 	bl	80032ec <TbxMemPoolBlockListExtract>
 8002f20:	60f8      	str	r0, [r7, #12]
          /* Sanity check. A node should be available, otherwise more blocks were
           * released than actually allocated, which shouldn't happen.
           */
          TBX_ASSERT(blockNodePtr != NULL);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d104      	bne.n	8002f32 <TbxMemPoolRelease+0x8e>
 8002f28:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8002f2c:	480a      	ldr	r0, [pc, #40]	; (8002f58 <TbxMemPoolRelease+0xb4>)
 8002f2e:	f7ff fbf5 	bl	800271c <TbxAssertTrigger>
          /* Only continue if a block node could be extracted. */
          if (blockNodePtr != NULL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <TbxMemPoolRelease+0xa6>
          {
            /* Initialize the block. */
            blockNodePtr->blockPtr = blockPtr;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	601a      	str	r2, [r3, #0]
            /* Now the node itself needs to be inserted into the linked list with free
             * block nodes. This way this node can be allocated again in the future.
             */
            TbxMemPoolBlockListInsert(poolPtr->freeBlockListPtr, blockNodePtr);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f9a1 	bl	800328c <TbxMemPoolBlockListInsert>
          }
        }
      }
    }
    /* Release mutual exclusive access to the memory pool list. */
    TbxCriticalSectionExit();
 8002f4a:	f7ff fc17 	bl	800277c <TbxCriticalSectionExit>
  }
} /*** end of TbxMemPoolRelease ***/
 8002f4e:	bf00      	nop
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	08005898 	.word	0x08005898

08002f5c <TbxMemPoolListFind>:
** \param     blockSize Size of the blocks managed by the memory pool.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFind(size_t blockSize)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <TbxMemPoolListFind+0x1c>
 8002f6e:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8002f72:	480f      	ldr	r0, [pc, #60]	; (8002fb0 <TbxMemPoolListFind+0x54>)
 8002f74:	f7ff fbd2 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <TbxMemPoolListFind+0x48>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <TbxMemPoolListFind+0x58>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a match is found. */
    while (poolNodePtr != NULL)
 8002f84:	e00b      	b.n	8002f9e <TbxMemPoolListFind+0x42>
    {
      /* Does this node hold a memory pool created for the same block size as we are
       * trying to find?
       */
      if (poolNodePtr->poolPtr->blockSize == blockSize)
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d102      	bne.n	8002f98 <TbxMemPoolListFind+0x3c>
      {
        /* Update the result because a match was found. */
        result = poolNodePtr;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	60fb      	str	r3, [r7, #12]
        /* No need to continue looping since a match was found. */
        break;
 8002f96:	e005      	b.n	8002fa4 <TbxMemPoolListFind+0x48>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f0      	bne.n	8002f86 <TbxMemPoolListFind+0x2a>
    }
  }

  /* Give the result back to the caller. */
  return result;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFind ***/
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	08005898 	.word	0x08005898
 8002fb4:	200008d4 	.word	0x200008d4

08002fb8 <TbxMemPoolListFindBestFit>:
** \param     blockSize Size of the block to fit.
** \return    Pointer to the found memory pool node if successful, NULL otherwise.
**
****************************************************************************************/
static tPoolNode * TbxMemPoolListFindBestFit(size_t blockSize)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  tPoolNode * result = NULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
  tPoolNode * poolNodePtr;

  /* Verify parameter. */
  TBX_ASSERT(blockSize > 0U);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <TbxMemPoolListFindBestFit+0x1c>
 8002fca:	f240 11f9 	movw	r1, #505	; 0x1f9
 8002fce:	4814      	ldr	r0, [pc, #80]	; (8003020 <TbxMemPoolListFindBestFit+0x68>)
 8002fd0:	f7ff fba4 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (blockSize > 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d01d      	beq.n	8003016 <TbxMemPoolListFindBestFit+0x5e>
  {
    /* Get pointer to the pool node at the head of the linked list. */
    poolNodePtr = tbxPoolList;
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <TbxMemPoolListFindBestFit+0x6c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60bb      	str	r3, [r7, #8]
    /* Loop through all nodes until a fit is found. */
    while (poolNodePtr != NULL)
 8002fe0:	e014      	b.n	800300c <TbxMemPoolListFindBestFit+0x54>
    {
      /* Does this memory pool hold blocks that would fit the specified block size? */
      if (poolNodePtr->poolPtr->blockSize >= blockSize)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d80b      	bhi.n	8003006 <TbxMemPoolListFindBestFit+0x4e>
      {
        /* A fit is found. Now check if this memory pool has free blocks available. */
        if (TbxMemPoolBlockListIsEmpty(poolNodePtr->poolPtr->freeBlockListPtr) \
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 f9a5 	bl	8003344 <TbxMemPoolBlockListIsEmpty>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <TbxMemPoolListFindBestFit+0x5c>
            == TBX_FALSE)
        {
          /* Found a match so update the result value. */
          result = poolNodePtr;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60fb      	str	r3, [r7, #12]
        }
        /* Best fit is found, so no need to continue searching even if the memory pool
         * does not have any free blocks available.
         */
        break;
 8003004:	e006      	b.n	8003014 <TbxMemPoolListFindBestFit+0x5c>
      }
      /* Continue with the next pool node in the list. */
      poolNodePtr = poolNodePtr->nextNodePtr;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	60bb      	str	r3, [r7, #8]
    while (poolNodePtr != NULL)
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1e7      	bne.n	8002fe2 <TbxMemPoolListFindBestFit+0x2a>
 8003012:	e000      	b.n	8003016 <TbxMemPoolListFindBestFit+0x5e>
        break;
 8003014:	bf00      	nop
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003016:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolListFindBestFit ***/
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08005898 	.word	0x08005898
 8003024:	200008d4 	.word	0x200008d4

08003028 <TbxMemPoolListInsert>:
**            this function should insert.
** \param     nodePtr Pointer to the memory pool node to insert.
**
****************************************************************************************/
static void TbxMemPoolListInsert(tPoolNode * nodePtr)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  tPoolNode * currentNodePtr;
  tPoolNode * prevNodePtr = NULL;
 8003030:	2300      	movs	r3, #0
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t     nodeInserted = TBX_FALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(nodePtr != NULL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <TbxMemPoolListInsert+0x20>
 800303e:	f44f 710b 	mov.w	r1, #556	; 0x22c
 8003042:	4843      	ldr	r0, [pc, #268]	; (8003150 <TbxMemPoolListInsert+0x128>)
 8003044:	f7ff fb6a 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (nodePtr != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d07c      	beq.n	8003148 <TbxMemPoolListInsert+0x120>
  {
    /* Sanity check. The pointer to the memory pool should not be NULL here. */
    TBX_ASSERT(nodePtr->poolPtr != NULL);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <TbxMemPoolListInsert+0x38>
 8003056:	f240 2132 	movw	r1, #562	; 0x232
 800305a:	483d      	ldr	r0, [pc, #244]	; (8003150 <TbxMemPoolListInsert+0x128>)
 800305c:	f7ff fb5e 	bl	800271c <TbxAssertTrigger>
    /* Is the list with memory pools empty? */
    if (tbxPoolList == NULL)
 8003060:	4b3c      	ldr	r3, [pc, #240]	; (8003154 <TbxMemPoolListInsert+0x12c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d106      	bne.n	8003076 <TbxMemPoolListInsert+0x4e>
    {
      /* Add the node at the start of the list. */
      nodePtr->nextNodePtr = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
      tbxPoolList = nodePtr;
 800306e:	4a39      	ldr	r2, [pc, #228]	; (8003154 <TbxMemPoolListInsert+0x12c>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6013      	str	r3, [r2, #0]
        prevNodePtr = currentNodePtr;
        currentNodePtr = currentNodePtr->nextNodePtr;
      }
    }
  }
} /*** end of TbxMemPoolListInsert ***/
 8003074:	e068      	b.n	8003148 <TbxMemPoolListInsert+0x120>
      currentNodePtr = tbxPoolList;
 8003076:	4b37      	ldr	r3, [pc, #220]	; (8003154 <TbxMemPoolListInsert+0x12c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 800307c:	e05f      	b.n	800313e <TbxMemPoolListInsert+0x116>
        TBX_ASSERT(currentNodePtr->poolPtr != NULL);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <TbxMemPoolListInsert+0x68>
 8003086:	f240 2145 	movw	r1, #581	; 0x245
 800308a:	4831      	ldr	r0, [pc, #196]	; (8003150 <TbxMemPoolListInsert+0x128>)
 800308c:	f7ff fb46 	bl	800271c <TbxAssertTrigger>
        if (currentNodePtr->poolPtr != NULL)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03b      	beq.n	8003110 <TbxMemPoolListInsert+0xe8>
          TBX_ASSERT(currentNodePtr->poolPtr->blockSize != nodePtr->poolPtr->blockSize);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d104      	bne.n	80030b2 <TbxMemPoolListInsert+0x8a>
 80030a8:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80030ac:	4828      	ldr	r0, [pc, #160]	; (8003150 <TbxMemPoolListInsert+0x128>)
 80030ae:	f7ff fb35 	bl	800271c <TbxAssertTrigger>
          if (currentNodePtr->poolPtr->blockSize > nodePtr->poolPtr->blockSize)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d926      	bls.n	8003110 <TbxMemPoolListInsert+0xe8>
            if (currentNodePtr == tbxPoolList)
 80030c2:	4b24      	ldr	r3, [pc, #144]	; (8003154 <TbxMemPoolListInsert+0x12c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d10e      	bne.n	80030ea <TbxMemPoolListInsert+0xc2>
              TBX_ASSERT(prevNodePtr == NULL);
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <TbxMemPoolListInsert+0xb4>
 80030d2:	f240 2156 	movw	r1, #598	; 0x256
 80030d6:	481e      	ldr	r0, [pc, #120]	; (8003150 <TbxMemPoolListInsert+0x128>)
 80030d8:	f7ff fb20 	bl	800271c <TbxAssertTrigger>
              nodePtr->nextNodePtr = currentNodePtr;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	605a      	str	r2, [r3, #4]
              tbxPoolList = nodePtr;
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <TbxMemPoolListInsert+0x12c>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e010      	b.n	800310c <TbxMemPoolListInsert+0xe4>
              TBX_ASSERT(prevNodePtr != NULL);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <TbxMemPoolListInsert+0xd2>
 80030f0:	f240 2161 	movw	r1, #609	; 0x261
 80030f4:	4816      	ldr	r0, [pc, #88]	; (8003150 <TbxMemPoolListInsert+0x128>)
 80030f6:	f7ff fb11 	bl	800271c <TbxAssertTrigger>
              if (prevNodePtr != NULL)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <TbxMemPoolListInsert+0xe4>
                nodePtr->nextNodePtr = currentNodePtr;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	605a      	str	r2, [r3, #4]
                prevNodePtr->nextNodePtr = nodePtr;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	605a      	str	r2, [r3, #4]
            nodeInserted = TBX_TRUE;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
        if ( (currentNodePtr->nextNodePtr == NULL) && (nodeInserted == TBX_FALSE) )
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <TbxMemPoolListInsert+0x106>
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d107      	bne.n	800312e <TbxMemPoolListInsert+0x106>
          nodePtr->nextNodePtr = NULL;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
          currentNodePtr->nextNodePtr = nodePtr;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	605a      	str	r2, [r3, #4]
          nodeInserted = TBX_TRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
        if (nodeInserted == TBX_TRUE)
 800312e:	7bfb      	ldrb	r3, [r7, #15]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d008      	beq.n	8003146 <TbxMemPoolListInsert+0x11e>
        prevNodePtr = currentNodePtr;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	613b      	str	r3, [r7, #16]
        currentNodePtr = currentNodePtr->nextNodePtr;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	617b      	str	r3, [r7, #20]
      while (currentNodePtr != NULL)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d19c      	bne.n	800307e <TbxMemPoolListInsert+0x56>
} /*** end of TbxMemPoolListInsert ***/
 8003144:	e000      	b.n	8003148 <TbxMemPoolListInsert+0x120>
          break;
 8003146:	bf00      	nop
} /*** end of TbxMemPoolListInsert ***/
 8003148:	bf00      	nop
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	08005898 	.word	0x08005898
 8003154:	200008d4 	.word	0x200008d4

08003158 <TbxMemPoolBlockCreate>:
** \param     size The data size of the block in bytes.
** \return    Pointer to the memory of the created block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockCreate(size_t size)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;

  /* Verify parameter. */
  TBX_ASSERT(size > 0U);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <TbxMemPoolBlockCreate+0x1c>
 800316a:	f240 21a1 	movw	r1, #673	; 0x2a1
 800316e:	480d      	ldr	r0, [pc, #52]	; (80031a4 <TbxMemPoolBlockCreate+0x4c>)
 8003170:	f7ff fad4 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (size > 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00f      	beq.n	800319a <TbxMemPoolBlockCreate+0x42>
  {
    /* Allocate memory for the block data and an extra size_t value at the start. */
    blockMemPtr = TbxHeapAllocate(sizeof(size_t) + size);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fb20 	bl	80027c4 <TbxHeapAllocate>
 8003184:	6138      	str	r0, [r7, #16]
    /* Only continue if the memory allocation was successful. */
    if (blockMemPtr != NULL)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <TbxMemPoolBlockCreate+0x42>
    {
      /* Set the result value. */
      result = blockMemPtr;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	617b      	str	r3, [r7, #20]
      /* Create a pointer to an array of size_t elements. */
      size_t * blockSizeArray = blockMemPtr;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	60fb      	str	r3, [r7, #12]
      /* Write to the first element, which should hold the block size. */
      blockSizeArray[0U] = size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	601a      	str	r2, [r3, #0]
    }
  }

  /* Give the result back to the caller. */
  return result;
 800319a:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockCreate ***/
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08005898 	.word	0x08005898

080031a8 <TbxMemPoolBlockGetDataPtr>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Pointer to where the block's data starts if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetDataPtr(void * memPtr)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	617b      	str	r3, [r7, #20]
  size_t * blockSizeArray;
  void   * dataPtr;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d104      	bne.n	80031c4 <TbxMemPoolBlockGetDataPtr+0x1c>
 80031ba:	f240 21c7 	movw	r1, #711	; 0x2c7
 80031be:	4809      	ldr	r0, [pc, #36]	; (80031e4 <TbxMemPoolBlockGetDataPtr+0x3c>)
 80031c0:	f7ff faac 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d006      	beq.n	80031d8 <TbxMemPoolBlockGetDataPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	613b      	str	r3, [r7, #16]
    /* The block data starts after the block size value. */
    dataPtr = &blockSizeArray[1U];
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	3304      	adds	r3, #4
 80031d2:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = dataPtr;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 80031d8:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetDataPtr ***/
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	08005898 	.word	0x08005898

080031e8 <TbxMemPoolBlockGetBlockSize>:
** \param     memPtr Pointer to the start of the block's allocated memory.
** \return    Size in bytes of the block's data if successful, 0 otherwise.
**
****************************************************************************************/
static size_t TbxMemPoolBlockGetBlockSize(void const * memPtr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  size_t         result = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  size_t const * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(memPtr != NULL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d104      	bne.n	8003204 <TbxMemPoolBlockGetBlockSize+0x1c>
 80031fa:	f240 21e6 	movw	r1, #742	; 0x2e6
 80031fe:	4809      	ldr	r0, [pc, #36]	; (8003224 <TbxMemPoolBlockGetBlockSize+0x3c>)
 8003200:	f7ff fa8c 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (memPtr != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d006      	beq.n	8003218 <TbxMemPoolBlockGetBlockSize+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = memPtr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	613b      	str	r3, [r7, #16]
    /* The block size value is located at the start of the block, */
    size_t blockSize = blockSizeArray[0U];
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockSize;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8003218:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetBlockSize ***/
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	08005898 	.word	0x08005898

08003228 <TbxMemPoolBlockGetMemPtr>:
** \param     dataPtr Pointer to the start of the block's data.
** \return    Pointer to the memory of the block if successful, NULL otherwise.
**
****************************************************************************************/
static void * TbxMemPoolBlockGetMemPtr(void * dataPtr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  void   * result = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  void   * blockMemPtr;
  size_t * blockSizeArray;

  /* Verify parameter. */
  TBX_ASSERT(dataPtr != NULL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <TbxMemPoolBlockGetMemPtr+0x1c>
 800323a:	f240 3106 	movw	r1, #774	; 0x306
 800323e:	4809      	ldr	r0, [pc, #36]	; (8003264 <TbxMemPoolBlockGetMemPtr+0x3c>)
 8003240:	f7ff fa6c 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (dataPtr != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <TbxMemPoolBlockGetMemPtr+0x30>
  {
    /* Create a pointer to an array of size_t elements. */
    blockSizeArray = dataPtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	613b      	str	r3, [r7, #16]
    /* Get pointer to the start of the block, which is one size_t element before the
     * pointer to the block's data.
     */
    blockMemPtr = &blockSizeArray[-1];
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	3b04      	subs	r3, #4
 8003252:	60fb      	str	r3, [r7, #12]
    /* Set the result value. */
    result = blockMemPtr;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	617b      	str	r3, [r7, #20]
  }

  /* Give the result back to the caller. */
  return result;
 8003258:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMemPoolBlockGetMemPtr ***/
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	08005898 	.word	0x08005898

08003268 <TbxMemPoolBlockListCreate>:
**            allocated on the heap.
** \return    Pointer to the newly created blocks list if successful, NULL otherwise.
**
****************************************************************************************/
static tBlockList * TbxMemPoolBlockListCreate(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
  tBlockList * result;

  /* Attempt to create the linked list object on the heap. */
  result = TbxHeapAllocate(sizeof(tBlockList));
 800326e:	2004      	movs	r0, #4
 8003270:	f7ff faa8 	bl	80027c4 <TbxHeapAllocate>
 8003274:	6078      	str	r0, [r7, #4]
  /* Only continue with the linked list initialization when the allocation was
   * successful.
   */
  if (result != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <TbxMemPoolBlockListCreate+0x1a>
  {
    /* Initialize the linked list to be empty. */
    *result = NULL;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Give the result back to the caller. */
  return result;
 8003282:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMemPoolBlockListCreate ***/
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <TbxMemPoolBlockListInsert>:
** \param     nodePtr Pointer to the block node to insert.
**
****************************************************************************************/
static void TbxMemPoolBlockListInsert(tBlockList * listPtr, 
                                      tBlockNode * nodePtr)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  /* Verify parameters. */
  TBX_ASSERT(listPtr != NULL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d104      	bne.n	80032a6 <TbxMemPoolBlockListInsert+0x1a>
 800329c:	f240 3143 	movw	r1, #835	; 0x343
 80032a0:	4811      	ldr	r0, [pc, #68]	; (80032e8 <TbxMemPoolBlockListInsert+0x5c>)
 80032a2:	f7ff fa3b 	bl	800271c <TbxAssertTrigger>
  TBX_ASSERT(nodePtr != NULL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d104      	bne.n	80032b6 <TbxMemPoolBlockListInsert+0x2a>
 80032ac:	f44f 7151 	mov.w	r1, #836	; 0x344
 80032b0:	480d      	ldr	r0, [pc, #52]	; (80032e8 <TbxMemPoolBlockListInsert+0x5c>)
 80032b2:	f7ff fa33 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameters are valid. */
  if ( (listPtr != NULL) && (nodePtr != NULL) )
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d011      	beq.n	80032e0 <TbxMemPoolBlockListInsert+0x54>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00e      	beq.n	80032e0 <TbxMemPoolBlockListInsert+0x54>
  {
    /* Is the list currently empty? */
    if (*listPtr == NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <TbxMemPoolBlockListInsert+0x46>
    {
      /* There is no next node. */
      nodePtr->nextNodePtr = NULL;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	2200      	movs	r2, #0
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	e003      	b.n	80032da <TbxMemPoolBlockListInsert+0x4e>
    }
    /* Linked list is not empty. */
    else
    {
      /* The new node will be the current head of the list. */
      nodePtr->nextNodePtr = *listPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	605a      	str	r2, [r3, #4]
    }
    /* Insert the new node at the start of the list. */
    *listPtr = nodePtr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	601a      	str	r2, [r3, #0]
  }
} /*** end of TbxMemPoolBlockListInsert ***/
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	08005898 	.word	0x08005898

080032ec <TbxMemPoolBlockListExtract>:
** \return    Pointer to the block node that was extracted or NULL if the linked list
**            contained no more nodes.
**
****************************************************************************************/
static tBlockNode * TbxMemPoolBlockListExtract(tBlockList * listPtr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  tBlockNode * result = NULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <TbxMemPoolBlockListExtract+0x1c>
 80032fe:	f240 3167 	movw	r1, #871	; 0x367
 8003302:	480f      	ldr	r0, [pc, #60]	; (8003340 <TbxMemPoolBlockListExtract+0x54>)
 8003304:	f7ff fa0a 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d013      	beq.n	8003336 <TbxMemPoolBlockListExtract+0x4a>
  {
    /* Only extract a node if the list currently not empty. */
    if (*listPtr != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <TbxMemPoolBlockListExtract+0x4a>
    {
      /* Get the first node. */
      result = *listPtr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60fb      	str	r3, [r7, #12]
      /* Is there currently only one node in the list? */
      if ((*listPtr)->nextNodePtr == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <TbxMemPoolBlockListExtract+0x42>
      {
        /* Set the list to be empty. */
        *listPtr = NULL;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e003      	b.n	8003336 <TbxMemPoolBlockListExtract+0x4a>
      }
      /* There are currently at least two nodes in the list. */
      else
      {
        /* Make the second node the first one. */
        *listPtr = result->nextNodePtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003336:	68fb      	ldr	r3, [r7, #12]
} /*** end of TbxMemPoolBlockListExtract ***/
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	08005898 	.word	0x08005898

08003344 <TbxMemPoolBlockListIsEmpty>:
** \param     listPtr Pointer to the linked list with blocks.
** \return    TBX_TRUE if the block list is empty, TBX_FALSE otherwise.
**
****************************************************************************************/
static uint8_t TbxMemPoolBlockListIsEmpty(tBlockList const * listPtr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_FALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	73fb      	strb	r3, [r7, #15]

  /* Verify parameter. */
  TBX_ASSERT(listPtr != NULL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <TbxMemPoolBlockListIsEmpty+0x1c>
 8003356:	f240 3191 	movw	r1, #913	; 0x391
 800335a:	4808      	ldr	r0, [pc, #32]	; (800337c <TbxMemPoolBlockListIsEmpty+0x38>)
 800335c:	f7ff f9de 	bl	800271c <TbxAssertTrigger>

  /* Only continue if the parameter is valid. */
  if (listPtr != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <TbxMemPoolBlockListIsEmpty+0x2e>
  {
    /* Is the list empty? */
    if (*listPtr == NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <TbxMemPoolBlockListIsEmpty+0x2e>
    {
      /* Update the result value. */
      result = TBX_TRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Give the result back to the caller. */
  return result;
 8003372:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMemPoolBlockListIsEmpty ***/
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	08005898 	.word	0x08005898

08003380 <TbxMbEventTask>:
**            For this reason it is recommended to use an RTOS in combination with a
**            Modbus client.
**
****************************************************************************************/
void TbxMbEventTask(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
  static tTbxList       * pollerList = NULL;
  static uint8_t          pollerListInitialized = TBX_FALSE;
  static const uint16_t   defaultWaitTimeoutMs = 5000U;
  static uint16_t         waitTimeoutMS = defaultWaitTimeoutMs;
  tTbxMbEvent             newEvent = { 0 };
 8003386:	463b      	mov	r3, r7
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	605a      	str	r2, [r3, #4]

  /* Only initialize the event poller once, */
  if (pollerListInitialized == TBX_FALSE)
 800338e:	4b41      	ldr	r3, [pc, #260]	; (8003494 <TbxMbEventTask+0x114>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <TbxMbEventTask+0x36>
  {
    pollerListInitialized = TBX_TRUE;
 8003396:	4b3f      	ldr	r3, [pc, #252]	; (8003494 <TbxMbEventTask+0x114>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    /* Ceate the queue for storing context of which the pollFcn should be called. */
    pollerList = TbxListCreate();
 800339c:	f7ff fa4a 	bl	8002834 <TbxListCreate>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a3d      	ldr	r2, [pc, #244]	; (8003498 <TbxMbEventTask+0x118>)
 80033a4:	6013      	str	r3, [r2, #0]
    /* Verify that the queue creation succeeded. If this assertion fails, increase the
     * heap size using configuration macro TBX_CONF_HEAP_SIZE.
     */
    TBX_ASSERT(pollerList != NULL);
 80033a6:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <TbxMbEventTask+0x118>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <TbxMbEventTask+0x36>
 80033ae:	2168      	movs	r1, #104	; 0x68
 80033b0:	483a      	ldr	r0, [pc, #232]	; (800349c <TbxMbEventTask+0x11c>)
 80033b2:	f7ff f9b3 	bl	800271c <TbxAssertTrigger>

  /* Wait for a new event to be posted to the event queue. Note that that wait time only
   * applies in case an RTOS is configured for the OSAL. Otherwise (TBX_MB_OPT_OSAL_NONE)
   * this function returns immediately.
   */
  if (TbxMbOsalEventWait(&newEvent, waitTimeoutMS) == TBX_TRUE)
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <TbxMbEventTask+0x120>)
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	463b      	mov	r3, r7
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f002 f80a 	bl	80053d8 <TbxMbOsalEventWait>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d137      	bne.n	800343a <TbxMbEventTask+0xba>
  {
    /* Check the opaque context pointer. */
    TBX_ASSERT(newEvent.context != NULL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <TbxMbEventTask+0x58>
 80033d0:	2172      	movs	r1, #114	; 0x72
 80033d2:	4832      	ldr	r0, [pc, #200]	; (800349c <TbxMbEventTask+0x11c>)
 80033d4:	f7ff f9a2 	bl	800271c <TbxAssertTrigger>
    /* Only continue with a valid opaque context pointer. */
    if (newEvent.context != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02d      	beq.n	800343a <TbxMbEventTask+0xba>
    {
      /* Filter on the event identifier. */
      switch (newEvent.id)
 80033de:	783b      	ldrb	r3, [r7, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <TbxMbEventTask+0x6a>
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d011      	beq.n	800340c <TbxMbEventTask+0x8c>
 80033e8:	e018      	b.n	800341c <TbxMbEventTask+0x9c>
      {
        case TBX_MB_EVENT_ID_START_POLLING:
        {
          /* Add the context at the end of the event poller list. */
          uint8_t insertResult = TbxListInsertItemBack(pollerList, newEvent.context);
 80033ea:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <TbxMbEventTask+0x118>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fa86 	bl	8002904 <TbxListInsertItemBack>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]
          /* Check that the item could be added to the queue. If not, then the heaps size
           * is configured too small. In this case increase the heap size using
           * configuration macro TBX_CONF_HEAP_SIZE. 
           */
          TBX_ASSERT(insertResult == TBX_OK);
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d018      	beq.n	8003434 <TbxMbEventTask+0xb4>
 8003402:	2181      	movs	r1, #129	; 0x81
 8003404:	4825      	ldr	r0, [pc, #148]	; (800349c <TbxMbEventTask+0x11c>)
 8003406:	f7ff f989 	bl	800271c <TbxAssertTrigger>
        }
        break;
 800340a:	e013      	b.n	8003434 <TbxMbEventTask+0xb4>
      
        case TBX_MB_EVENT_ID_STOP_POLLING:
        {
          /* Remove the context from the event poller list. */
          TbxListRemoveItem(pollerList, newEvent.context);
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <TbxMbEventTask+0x118>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4611      	mov	r1, r2
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fadf 	bl	80029d8 <TbxListRemoveItem>
        }
        break;
 800341a:	e00e      	b.n	800343a <TbxMbEventTask+0xba>

        default:
        {
          /* Convert the opaque pointer to the event context structure. */
          tTbxMbEventCtx * eventCtx = (tTbxMbEventCtx *)newEvent.context;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60fb      	str	r3, [r7, #12]
          /* Pass the event on to the context's event processor. */
          if (eventCtx->processFcn != NULL)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <TbxMbEventTask+0xb8>
          {
            eventCtx->processFcn(&newEvent);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	463a      	mov	r2, r7
 800342e:	4610      	mov	r0, r2
 8003430:	4798      	blx	r3
          }
        }
        break;
 8003432:	e001      	b.n	8003438 <TbxMbEventTask+0xb8>
        break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <TbxMbEventTask+0xba>
        break;
 8003438:	bf00      	nop
      }
    }
  }

  /* Iterate over the event poller list. */
  void * listItem = TbxListGetFirstItem(pollerList);
 800343a:	4b17      	ldr	r3, [pc, #92]	; (8003498 <TbxMbEventTask+0x118>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fba6 	bl	8002b90 <TbxListGetFirstItem>
 8003444:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 8003446:	e010      	b.n	800346a <TbxMbEventTask+0xea>
  {
    /* Convert the opaque pointer to the event context structure. */
    tTbxMbEventCtx * eventPollCtx = (tTbxMbEventCtx *)listItem;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	60bb      	str	r3, [r7, #8]
    /* Call its poll function if configured. */
    if (eventPollCtx->pollFcn != NULL)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <TbxMbEventTask+0xdc>
    {
      eventPollCtx->pollFcn(listItem);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	6978      	ldr	r0, [r7, #20]
 800345a:	4798      	blx	r3
    }
    /* Move on to the next item in the list. */
    listItem = TbxListGetNextItem(pollerList, listItem);
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <TbxMbEventTask+0x118>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6979      	ldr	r1, [r7, #20]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fbb8 	bl	8002bd8 <TbxListGetNextItem>
 8003468:	6178      	str	r0, [r7, #20]
  while (listItem != NULL)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1eb      	bne.n	8003448 <TbxMbEventTask+0xc8>
  /* Set the event wait timeout for the next call to this task function. If the event
   * poller list is not empty, keep the wait time short to make sure the poll functions
   * get continuously called. Otherwise go back to the default wait time to not hog up
   * CPU time unnecessarily.
   */
  waitTimeoutMS = (TbxListGetSize(pollerList) > 0U) ? 1U : defaultWaitTimeoutMs;
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <TbxMbEventTask+0x118>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fa27 	bl	80028c8 <TbxListGetSize>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <TbxMbEventTask+0x106>
 8003480:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <TbxMbEventTask+0x124>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	e000      	b.n	8003488 <TbxMbEventTask+0x108>
 8003486:	2301      	movs	r3, #1
 8003488:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <TbxMbEventTask+0x120>)
 800348a:	8013      	strh	r3, [r2, #0]
} /*** end of TbxMbEventTask ***/
 800348c:	bf00      	nop
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200008d8 	.word	0x200008d8
 8003498:	200008dc 	.word	0x200008dc
 800349c:	080058bc 	.word	0x080058bc
 80034a0:	2000000a 	.word	0x2000000a
 80034a4:	080059b8 	.word	0x080059b8

080034a8 <TbxMbPortUartInit>:
void TbxMbPortUartInit(tTbxMbUartPort     port, 
                       tTbxMbUartBaudrate baudrate,
                       tTbxMbUartDatabits databits, 
                       tTbxMbUartStopbits stopbits,
                       tTbxMbUartParity   parity)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4604      	mov	r4, r0
 80034b0:	4608      	mov	r0, r1
 80034b2:	4611      	mov	r1, r2
 80034b4:	461a      	mov	r2, r3
 80034b6:	4623      	mov	r3, r4
 80034b8:	71fb      	strb	r3, [r7, #7]
 80034ba:	4603      	mov	r3, r0
 80034bc:	71bb      	strb	r3, [r7, #6]
 80034be:	460b      	mov	r3, r1
 80034c0:	717b      	strb	r3, [r7, #5]
 80034c2:	4613      	mov	r3, r2
 80034c4:	713b      	strb	r3, [r7, #4]
  /* Kick off first byte reception. */
  HAL_UART_Receive_IT(&huart2, &rxByte, 1U);
 80034c6:	2201      	movs	r2, #1
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <TbxMbPortUartInit+0x30>)
 80034ca:	4804      	ldr	r0, [pc, #16]	; (80034dc <TbxMbPortUartInit+0x34>)
 80034cc:	f7fe f9fa 	bl	80018c4 <HAL_UART_Receive_IT>
} /*** end of TbxMbPortUartInit ***/
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	200008e0 	.word	0x200008e0
 80034dc:	20000070 	.word	0x20000070

080034e0 <TbxMbPortUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbPortUartTransmit(tTbxMbUartPort         port, 
                              uint8_t        const * data, 
                              uint16_t               len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
 80034ec:	4613      	mov	r3, r2
 80034ee:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_ERROR;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_UART_Transmit_IT(&huart2, (uint8_t *)data, len) == HAL_OK)
 80034f4:	88bb      	ldrh	r3, [r7, #4]
 80034f6:	461a      	mov	r2, r3
 80034f8:	6839      	ldr	r1, [r7, #0]
 80034fa:	4806      	ldr	r0, [pc, #24]	; (8003514 <TbxMbPortUartTransmit+0x34>)
 80034fc:	f7fe f99d 	bl	800183a <HAL_UART_Transmit_IT>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <TbxMbPortUartTransmit+0x2a>
  {
    result = TBX_OK;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 800350a:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbPortUartTransmit ***/
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000070 	.word	0x20000070

08003518 <TbxMbPortTimerCount>:
**            accuracy of the T1_5 and T3_5 timings, so there's a trade off involved.
** \return    Free running counter value.
**
****************************************************************************************/
uint16_t TbxMbPortTimerCount(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  static uint8_t counterStarted = TBX_FALSE;

  /* Start the counter the first time this function is called. */
  if (counterStarted == TBX_FALSE)
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <TbxMbPortTimerCount+0x34>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10a      	bne.n	800353a <TbxMbPortTimerCount+0x22>
  {
    counterStarted = TBX_TRUE;
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <TbxMbPortTimerCount+0x34>)
 8003526:	2201      	movs	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_ENABLE(&htim10);
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <TbxMbPortTimerCount+0x38>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <TbxMbPortTimerCount+0x38>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
  }
  /* Read out the current value of counter.. */
  return (uint16_t)__HAL_TIM_GET_COUNTER(&htim10);
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <TbxMbPortTimerCount+0x38>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	b29b      	uxth	r3, r3
} /*** end of TbxMbPortTimerCount ***/
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	200008e1 	.word	0x200008e1
 8003550:	20000028 	.word	0x20000028

08003554 <HAL_UART_TxCpltCallback>:
** \brief     UART transmit complete callback.
** \param     handle Pointer to the channel's handle.
**
****************************************************************************************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef * handle)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Inform the Modbus UART module about the transmission completed event. */
  TbxMbUartTransmitComplete(TBX_MB_UART_PORT1);
 800355c:	2000      	movs	r0, #0
 800355e:	f002 f8d7 	bl	8005710 <TbxMbUartTransmitComplete>
} /*** end of HAL_UART_TxCpltCallback ***/
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_UART_RxCpltCallback>:
** \brief     UART reception complete callback.
** \param     handle Pointer to the channel's handle.
**
****************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * handle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t errorCode = HAL_UART_GetError(&huart2);
 8003574:	480b      	ldr	r0, [pc, #44]	; (80035a4 <HAL_UART_RxCpltCallback+0x38>)
 8003576:	f7fe fc79 	bl	8001e6c <HAL_UART_GetError>
 800357a:	60f8      	str	r0, [r7, #12]
  /* Only process the byte if no noise, framing or parity error was detected. */
  if ((errorCode & (HAL_UART_ERROR_NE | HAL_UART_ERROR_PE | HAL_UART_ERROR_FE)) == 0U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <HAL_UART_RxCpltCallback+0x24>
  {
    /* Inform the Modbus UART module about the newly received data byte. */
    TbxMbUartDataReceived(TBX_MB_UART_PORT1, &rxByte, 1U);
 8003586:	2201      	movs	r2, #1
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <HAL_UART_RxCpltCallback+0x3c>)
 800358a:	2000      	movs	r0, #0
 800358c:	f002 f8e4 	bl	8005758 <TbxMbUartDataReceived>
  }
  /* Restart reception for the next byte. */
  HAL_UART_Receive_IT(&huart2, &rxByte, 1U);
 8003590:	2201      	movs	r2, #1
 8003592:	4905      	ldr	r1, [pc, #20]	; (80035a8 <HAL_UART_RxCpltCallback+0x3c>)
 8003594:	4803      	ldr	r0, [pc, #12]	; (80035a4 <HAL_UART_RxCpltCallback+0x38>)
 8003596:	f7fe f995 	bl	80018c4 <HAL_UART_Receive_IT>
} /*** end of HAL_UART_RxCpltCallback ***/
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000070 	.word	0x20000070
 80035a8:	200008e0 	.word	0x200008e0

080035ac <TbxMbRtuCreate>:
tTbxMbTp TbxMbRtuCreate(uint8_t            nodeAddr, 
                        tTbxMbUartPort     port, 
                        tTbxMbUartBaudrate baudrate,
                        tTbxMbUartStopbits stopbits,
                        tTbxMbUartParity   parity)
{
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b08f      	sub	sp, #60	; 0x3c
 80035b0:	af04      	add	r7, sp, #16
 80035b2:	4604      	mov	r4, r0
 80035b4:	4608      	mov	r0, r1
 80035b6:	4611      	mov	r1, r2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4623      	mov	r3, r4
 80035bc:	71fb      	strb	r3, [r7, #7]
 80035be:	4603      	mov	r3, r0
 80035c0:	71bb      	strb	r3, [r7, #6]
 80035c2:	460b      	mov	r3, r1
 80035c4:	717b      	strb	r3, [r7, #5]
 80035c6:	4613      	mov	r3, r2
 80035c8:	713b      	strb	r3, [r7, #4]
  tTbxMbTp result = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make sure the OSAL event module is initialized. The application will always first
   * create a transport layer object before a channel object. Consequently, this is the
   * best place to do the OSAL module initialization.
   */
  TbxMbOsalEventInit();
 80035ce:	f001 fe95 	bl	80052fc <TbxMbOsalEventInit>

  /* Verify parameters. */
  TBX_ASSERT((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	2bf7      	cmp	r3, #247	; 0xf7
 80035d6:	d80c      	bhi.n	80035f2 <TbxMbRtuCreate+0x46>
 80035d8:	79bb      	ldrb	r3, [r7, #6]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d809      	bhi.n	80035f2 <TbxMbRtuCreate+0x46>
 80035de:	797b      	ldrb	r3, [r7, #5]
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	d806      	bhi.n	80035f2 <TbxMbRtuCreate+0x46>
 80035e4:	793b      	ldrb	r3, [r7, #4]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d803      	bhi.n	80035f2 <TbxMbRtuCreate+0x46>
 80035ea:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d903      	bls.n	80035fa <TbxMbRtuCreate+0x4e>
 80035f2:	218f      	movs	r1, #143	; 0x8f
 80035f4:	486a      	ldr	r0, [pc, #424]	; (80037a0 <TbxMbRtuCreate+0x1f4>)
 80035f6:	f7ff f891 	bl	800271c <TbxAssertTrigger>
             (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((nodeAddr <= TBX_MB_TP_NODE_ADDR_MAX) &&
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2bf7      	cmp	r3, #247	; 0xf7
 80035fe:	f200 80c9 	bhi.w	8003794 <TbxMbRtuCreate+0x1e8>
 8003602:	79bb      	ldrb	r3, [r7, #6]
 8003604:	2b07      	cmp	r3, #7
 8003606:	f200 80c5 	bhi.w	8003794 <TbxMbRtuCreate+0x1e8>
      (port < TBX_MB_UART_NUM_PORT) && 
 800360a:	797b      	ldrb	r3, [r7, #5]
 800360c:	2b07      	cmp	r3, #7
 800360e:	f200 80c1 	bhi.w	8003794 <TbxMbRtuCreate+0x1e8>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8003612:	793b      	ldrb	r3, [r7, #4]
 8003614:	2b01      	cmp	r3, #1
 8003616:	f200 80bd 	bhi.w	8003794 <TbxMbRtuCreate+0x1e8>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 800361a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800361e:	2b02      	cmp	r3, #2
 8003620:	f200 80b8 	bhi.w	8003794 <TbxMbRtuCreate+0x1e8>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Allocate memory for the new transport context. */
    tTbxMbTpCtx * newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));
 8003624:	f44f 7015 	mov.w	r0, #596	; 0x254
 8003628:	f7ff fbec 	bl	8002e04 <TbxMemPoolAllocate>
 800362c:	6238      	str	r0, [r7, #32]
    /* Automatically increase the memory pool, if it was too small. */
    if (newTpCtx == NULL)
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <TbxMbRtuCreate+0x9c>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbTpCtx));
 8003634:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003638:	2001      	movs	r0, #1
 800363a:	f7ff fb41 	bl	8002cc0 <TbxMemPoolCreate>
      newTpCtx = TbxMemPoolAllocate(sizeof(tTbxMbTpCtx));      
 800363e:	f44f 7015 	mov.w	r0, #596	; 0x254
 8003642:	f7ff fbdf 	bl	8002e04 <TbxMemPoolAllocate>
 8003646:	6238      	str	r0, [r7, #32]
    }
    /* Verify memory allocation of the transport context. */
    TBX_ASSERT(newTpCtx != NULL);
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <TbxMbRtuCreate+0xaa>
 800364e:	21a8      	movs	r1, #168	; 0xa8
 8003650:	4853      	ldr	r0, [pc, #332]	; (80037a0 <TbxMbRtuCreate+0x1f4>)
 8003652:	f7ff f863 	bl	800271c <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newTpCtx != NULL)
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 809b 	beq.w	8003794 <TbxMbRtuCreate+0x1e8>
    {
      /* Initialize the transport context. */
      newTpCtx->type = TBX_MB_RTU_CONTEXT_TYPE;
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2254      	movs	r2, #84	; 0x54
 8003662:	731a      	strb	r2, [r3, #12]
      newTpCtx->instancePtr = NULL;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
      newTpCtx->pollFcn = TbxMbRtuPoll;
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	4a4d      	ldr	r2, [pc, #308]	; (80037a4 <TbxMbRtuCreate+0x1f8>)
 800366e:	605a      	str	r2, [r3, #4]
      newTpCtx->processFcn = NULL;
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
      newTpCtx->transmitFcn = TbxMbRtuTransmit;
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <TbxMbRtuCreate+0x1fc>)
 800367a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
      newTpCtx->receptionDoneFcn = TbxMbRtuReceptionDone;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <TbxMbRtuCreate+0x200>)
 8003682:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
      newTpCtx->getRxPacketFcn = TbxMbRtuGetRxPacket;
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	4a49      	ldr	r2, [pc, #292]	; (80037b0 <TbxMbRtuCreate+0x204>)
 800368a:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
      newTpCtx->getTxPacketFcn = TbxMbRtuGetTxPacket;
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	4a48      	ldr	r2, [pc, #288]	; (80037b4 <TbxMbRtuCreate+0x208>)
 8003692:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
      newTpCtx->nodeAddr = nodeAddr;
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	79fa      	ldrb	r2, [r7, #7]
 800369a:	735a      	strb	r2, [r3, #13]
      newTpCtx->port = port;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	79ba      	ldrb	r2, [r7, #6]
 80036a0:	739a      	strb	r2, [r3, #14]
      newTpCtx->state = TBX_MB_RTU_STATE_INIT;
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      newTpCtx->rxTime = TbxMbPortTimerCount();
 80036aa:	f7ff ff35 	bl	8003518 <TbxMbPortTimerCount>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461a      	mov	r2, r3
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
      newTpCtx->initStateExitSem = TbxMbOsalSemCreate();
 80036b8:	f001 feda 	bl	8005470 <TbxMbOsalSemCreate>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
      newTpCtx->diagInfo.busMsgCnt = 0U;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
      newTpCtx->diagInfo.busCommErrCnt = 0U;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
      newTpCtx->diagInfo.busExcpErrCnt = 0U;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
      newTpCtx->diagInfo.srvMsgCnt = 0U;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2200      	movs	r2, #0
 80036e0:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
      newTpCtx->diagInfo.srvNoRespCnt = 0U;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
      /* Store the transport context in the lookup table. */
      tbxMbRtuCtx[port] = newTpCtx;
 80036ec:	79bb      	ldrb	r3, [r7, #6]
 80036ee:	4932      	ldr	r1, [pc, #200]	; (80037b8 <TbxMbRtuCreate+0x20c>)
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      /* Initialize the port. Note the RTU always uses 8 databits. */
      TbxMbUartInit(port, baudrate, TBX_MB_UART_8_DATABITS, stopbits, parity,
 80036f6:	793a      	ldrb	r2, [r7, #4]
 80036f8:	7979      	ldrb	r1, [r7, #5]
 80036fa:	79b8      	ldrb	r0, [r7, #6]
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <TbxMbRtuCreate+0x210>)
 80036fe:	9302      	str	r3, [sp, #8]
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <TbxMbRtuCreate+0x214>)
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	4613      	mov	r3, r2
 800370c:	2201      	movs	r2, #1
 800370e:	f001 ff81 	bl	8005614 <TbxMbUartInit>
      /* Determine the 1.5 and 3.5 character times in units of 50us ticks. If the
       * baudrate is greater than 19200, then these are fixed to 750us and 1750us,
       * respectively. Make sure to add one extra to adjust for timer resolution
       * inaccuracy.
       */
      if (baudrate > TBX_MB_UART_19200BPS)
 8003712:	797b      	ldrb	r3, [r7, #5]
 8003714:	2b04      	cmp	r3, #4
 8003716:	d908      	bls.n	800372a <TbxMbRtuCreate+0x17e>
      {
        newTpCtx->t1_5Ticks = 16U;                         /* 750us / 50us ticks.      */
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2210      	movs	r2, #16
 800371c:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
        newTpCtx->t3_5Ticks = 36U;                         /* 1750us / 50us ticks      */
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
 8003728:	e028      	b.n	800377c <TbxMbRtuCreate+0x1d0>
         * 
         * t1_5CharTicks = (16500000 / 50) / baudrate = 330000 / baudrate
         * t3_5CharTicks = (38500000 / 50) / baudrate = 770000 / baudrate
         * 
         */
        const uint16_t baudrateLookup[] =
 800372a:	4a26      	ldr	r2, [pc, #152]	; (80037c4 <TbxMbRtuCreate+0x218>)
 800372c:	f107 0308 	add.w	r3, r7, #8
 8003730:	ca07      	ldmia	r2, {r0, r1, r2}
 8003732:	c303      	stmia	r3!, {r0, r1}
 8003734:	801a      	strh	r2, [r3, #0]
          19200                                            /* TBX_MB_UART_19200BPS     */
        };
        /* The following calculation does integer roundup (A + (B-1)) / B and adds one
         * extra to adjust for timer resolution inaccuracy.
         */
        uint16_t baudBps = baudrateLookup[baudrate];
 8003736:	797b      	ldrb	r3, [r7, #5]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	3328      	adds	r3, #40	; 0x28
 800373c:	443b      	add	r3, r7
 800373e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003742:	83fb      	strh	r3, [r7, #30]
        newTpCtx->t1_5Ticks = (uint16_t)(((330000UL + (baudBps - 1UL)) / baudBps) + 1U);
 8003744:	8bfb      	ldrh	r3, [r7, #30]
 8003746:	f503 23a1 	add.w	r3, r3, #329728	; 0x50800
 800374a:	f203 130f 	addw	r3, r3, #271	; 0x10f
 800374e:	8bfa      	ldrh	r2, [r7, #30]
 8003750:	fbb3 f3f2 	udiv	r3, r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	3301      	adds	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f8a3 2228 	strh.w	r2, [r3, #552]	; 0x228
        newTpCtx->t3_5Ticks = (uint16_t)(((770000UL + (baudBps - 1UL)) / baudBps) + 1U);
 8003760:	8bfb      	ldrh	r3, [r7, #30]
 8003762:	f503 233b 	add.w	r3, r3, #765952	; 0xbb000
 8003766:	f603 73cf 	addw	r3, r3, #4047	; 0xfcf
 800376a:	8bfa      	ldrh	r2, [r7, #30]
 800376c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003770:	b29b      	uxth	r3, r3
 8003772:	3301      	adds	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f8a3 222a 	strh.w	r2, [r3, #554]	; 0x22a
      }
      /* Instruct the event task to call our polling function to be able to determine
       * when it's time to transition from INIT to IDLE.
       */
      tTbxMbEvent newEvent = {.context = newTpCtx, .id = TBX_MB_EVENT_ID_START_POLLING};
 800377c:	2300      	movs	r3, #0
 800377e:	753b      	strb	r3, [r7, #20]
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	61bb      	str	r3, [r7, #24]
      TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fdd4 	bl	8005338 <TbxMbOsalEventPost>
      /* Update the result. */
      result = newTpCtx;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
} /*** end of TbxMbRtuCreate ***/  
 8003796:	4618      	mov	r0, r3
 8003798:	372c      	adds	r7, #44	; 0x2c
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}
 800379e:	bf00      	nop
 80037a0:	080058e8 	.word	0x080058e8
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080039e1 	.word	0x080039e1
 80037ac:	08003b79 	.word	0x08003b79
 80037b0:	08003bf1 	.word	0x08003bf1
 80037b4:	08003c55 	.word	0x08003c55
 80037b8:	200008e4 	.word	0x200008e4
 80037bc:	08003e91 	.word	0x08003e91
 80037c0:	08003df1 	.word	0x08003df1
 80037c4:	08005910 	.word	0x08005910

080037c8 <TbxMbRtuPoll>:
**            TBX_MB_EVENT_ID_STOP_POLLING events to activate and deactivate.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuPoll(tTbxMbTp transport)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b090      	sub	sp, #64	; 0x40
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d104      	bne.n	80037e0 <TbxMbRtuPoll+0x18>
 80037d6:	f240 112d 	movw	r1, #301	; 0x12d
 80037da:	4880      	ldr	r0, [pc, #512]	; (80039dc <TbxMbRtuPoll+0x214>)
 80037dc:	f7fe ff9e 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 80f5 	beq.w	80039d2 <TbxMbRtuPoll+0x20a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 80037ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ee:	7b1b      	ldrb	r3, [r3, #12]
 80037f0:	2b54      	cmp	r3, #84	; 0x54
 80037f2:	d004      	beq.n	80037fe <TbxMbRtuPoll+0x36>
 80037f4:	f240 1135 	movw	r1, #309	; 0x135
 80037f8:	4878      	ldr	r0, [pc, #480]	; (80039dc <TbxMbRtuPoll+0x214>)
 80037fa:	f7fe ff8f 	bl	800271c <TbxAssertTrigger>
    /* Filter on the current state. */
    TbxCriticalSectionEnter();
 80037fe:	f7fe ffa3 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003804:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003808:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    TbxCriticalSectionExit();
 800380c:	f7fe ffb6 	bl	800277c <TbxCriticalSectionExit>
    switch (currentState)
 8003810:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003814:	2b03      	cmp	r3, #3
 8003816:	d008      	beq.n	800382a <TbxMbRtuPoll+0x62>
 8003818:	2b03      	cmp	r3, #3
 800381a:	f300 80d3 	bgt.w	80039c4 <TbxMbRtuPoll+0x1fc>
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 80a1 	beq.w	8003966 <TbxMbRtuPoll+0x19e>
 8003824:	2b02      	cmp	r3, #2
 8003826:	d06a      	beq.n	80038fe <TbxMbRtuPoll+0x136>

      default:
      {
        /* In the current state, nothing needs to be done. */
      }
      break;
 8003828:	e0cc      	b.n	80039c4 <TbxMbRtuPoll+0x1fc>
        TbxCriticalSectionEnter();
 800382a:	f7fe ff8d 	bl	8002748 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 800382e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003830:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8003834:	873b      	strh	r3, [r7, #56]	; 0x38
        TbxCriticalSectionExit();
 8003836:	f7fe ffa1 	bl	800277c <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 800383a:	f7ff fe6d 	bl	8003518 <TbxMbPortTimerCount>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	86fb      	strh	r3, [r7, #54]	; 0x36
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800384a:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800384e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003850:	429a      	cmp	r2, r3
 8003852:	f0c0 80b9 	bcc.w	80039c8 <TbxMbRtuPoll+0x200>
          newEvent.context = tpCtx;
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fd66 	bl	8005338 <TbxMbOsalEventPost>
          TbxCriticalSectionEnter();
 800386c:	f7fe ff6c 	bl	8002748 <TbxCriticalSectionEnter>
          uint8_t rxAduOkayCpy = tpCtx->rxAduOkay;
 8003870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003872:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 8003876:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
          TbxCriticalSectionExit();
 800387a:	f7fe ff7f 	bl	800277c <TbxCriticalSectionExit>
          if (rxAduOkayCpy == TBX_TRUE)
 800387e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003882:	2b01      	cmp	r3, #1
 8003884:	d132      	bne.n	80038ec <TbxMbRtuPoll+0x124>
            TbxCriticalSectionEnter();
 8003886:	f7fe ff5f 	bl	8002748 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_VALIDATION;
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	2204      	movs	r2, #4
 800388e:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
            TbxCriticalSectionExit();
 8003892:	f7fe ff73 	bl	800277c <TbxCriticalSectionExit>
            tpCtx->rxPacket.dataLen = tpCtx->rxAduWrIdx - 4U;
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 800389c:	b2db      	uxtb	r3, r3
 800389e:	3b04      	subs	r3, #4
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a4:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
            tpCtx->rxPacket.node = tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 80038a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038aa:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
            if (TbxMbRtuValidate(tpCtx) != TBX_OK)
 80038b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80038b6:	f000 f9ff 	bl	8003cb8 <TbxMbRtuValidate>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d008      	beq.n	80038d2 <TbxMbRtuPoll+0x10a>
              TbxCriticalSectionEnter();
 80038c0:	f7fe ff42 	bl	8002748 <TbxCriticalSectionEnter>
              tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 80038c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
              TbxCriticalSectionExit();
 80038cc:	f7fe ff56 	bl	800277c <TbxCriticalSectionExit>
      break;
 80038d0:	e07a      	b.n	80039c8 <TbxMbRtuPoll+0x200>
              pduRxEvent.context = tpCtx->channelCtx;
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80038d8:	623b      	str	r3, [r7, #32]
              pduRxEvent.id = TBX_MB_EVENT_ID_PDU_RECEIVED;
 80038da:	2302      	movs	r3, #2
 80038dc:	773b      	strb	r3, [r7, #28]
              TbxMbOsalEventPost(&pduRxEvent, TBX_FALSE);
 80038de:	f107 031c 	add.w	r3, r7, #28
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fd27 	bl	8005338 <TbxMbOsalEventPost>
      break;
 80038ea:	e06d      	b.n	80039c8 <TbxMbRtuPoll+0x200>
            TbxCriticalSectionEnter();
 80038ec:	f7fe ff2c 	bl	8002748 <TbxCriticalSectionEnter>
            tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 80038f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
            TbxCriticalSectionExit();
 80038f8:	f7fe ff40 	bl	800277c <TbxCriticalSectionExit>
      break;
 80038fc:	e064      	b.n	80039c8 <TbxMbRtuPoll+0x200>
        TbxCriticalSectionEnter();
 80038fe:	f7fe ff23 	bl	8002748 <TbxCriticalSectionEnter>
        uint16_t txDoneTimeCopy = tpCtx->txDoneTime;
 8003902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003904:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8003908:	867b      	strh	r3, [r7, #50]	; 0x32
        TbxCriticalSectionExit();
 800390a:	f7fe ff37 	bl	800277c <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - txDoneTimeCopy;
 800390e:	f7ff fe03 	bl	8003518 <TbxMbPortTimerCount>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	863b      	strh	r3, [r7, #48]	; 0x30
        if (deltaTicks >= tpCtx->t3_5Ticks)
 800391c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391e:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 8003922:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003924:	429a      	cmp	r2, r3
 8003926:	d351      	bcc.n	80039cc <TbxMbRtuPoll+0x204>
          TbxCriticalSectionEnter();
 8003928:	f7fe ff0e 	bl	8002748 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 800392c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800392e:	2201      	movs	r2, #1
 8003930:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
          TbxCriticalSectionExit();
 8003934:	f7fe ff22 	bl	800277c <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 800393c:	2301      	movs	r3, #1
 800393e:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003940:	f107 0314 	add.w	r3, r7, #20
 8003944:	2100      	movs	r1, #0
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fcf6 	bl	8005338 <TbxMbOsalEventPost>
          newEvent.context = tpCtx->channelCtx;
 800394c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800394e:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003952:	61bb      	str	r3, [r7, #24]
          newEvent.id = TBX_MB_EVENT_ID_PDU_TRANSMITTED;
 8003954:	2303      	movs	r3, #3
 8003956:	753b      	strb	r3, [r7, #20]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 8003958:	f107 0314 	add.w	r3, r7, #20
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 fcea 	bl	8005338 <TbxMbOsalEventPost>
      break;
 8003964:	e032      	b.n	80039cc <TbxMbRtuPoll+0x204>
        TbxCriticalSectionEnter();
 8003966:	f7fe feef 	bl	8002748 <TbxCriticalSectionEnter>
        uint16_t rxTimeCopy = tpCtx->rxTime;
 800396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396c:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8003970:	85fb      	strh	r3, [r7, #46]	; 0x2e
        TbxCriticalSectionExit();
 8003972:	f7fe ff03 	bl	800277c <TbxCriticalSectionExit>
        uint16_t deltaTicks = TbxMbPortTimerCount() - rxTimeCopy;
 8003976:	f7ff fdcf 	bl	8003518 <TbxMbPortTimerCount>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (deltaTicks >= tpCtx->t3_5Ticks)
 8003984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003986:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 800398a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800398c:	429a      	cmp	r2, r3
 800398e:	d31f      	bcc.n	80039d0 <TbxMbRtuPoll+0x208>
          TbxCriticalSectionEnter();
 8003990:	f7fe feda 	bl	8002748 <TbxCriticalSectionEnter>
          tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003996:	2201      	movs	r2, #1
 8003998:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
          TbxCriticalSectionExit();
 800399c:	f7fe feee 	bl	800277c <TbxCriticalSectionExit>
          newEvent.context = tpCtx;
 80039a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039a2:	613b      	str	r3, [r7, #16]
          newEvent.id = TBX_MB_EVENT_ID_STOP_POLLING;
 80039a4:	2301      	movs	r3, #1
 80039a6:	733b      	strb	r3, [r7, #12]
          TbxMbOsalEventPost(&newEvent, TBX_FALSE);
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fcc2 	bl	8005338 <TbxMbOsalEventPost>
          TbxMbOsalSemGive(tpCtx->initStateExitSem, TBX_FALSE);
 80039b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fd85 	bl	80054cc <TbxMbOsalSemGive>
      break;
 80039c2:	e005      	b.n	80039d0 <TbxMbRtuPoll+0x208>
      break;
 80039c4:	bf00      	nop
 80039c6:	e004      	b.n	80039d2 <TbxMbRtuPoll+0x20a>
      break;
 80039c8:	bf00      	nop
 80039ca:	e002      	b.n	80039d2 <TbxMbRtuPoll+0x20a>
      break;
 80039cc:	bf00      	nop
 80039ce:	e000      	b.n	80039d2 <TbxMbRtuPoll+0x20a>
      break;
 80039d0:	bf00      	nop
    }
  }
} /*** end of TbxMbRtuPoll ***/
 80039d2:	bf00      	nop
 80039d4:	3740      	adds	r7, #64	; 0x40
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	080058e8 	.word	0x080058e8

080039e0 <TbxMbRtuTransmit>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuTransmit(tTbxMbTp transport)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d104      	bne.n	80039fc <TbxMbRtuTransmit+0x1c>
 80039f2:	f240 11e1 	movw	r1, #481	; 0x1e1
 80039f6:	485e      	ldr	r0, [pc, #376]	; (8003b70 <TbxMbRtuTransmit+0x190>)
 80039f8:	f7fe fe90 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80b0 	beq.w	8003b64 <TbxMbRtuTransmit+0x184>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	7b1b      	ldrb	r3, [r3, #12]
 8003a0c:	2b54      	cmp	r3, #84	; 0x54
 8003a0e:	d004      	beq.n	8003a1a <TbxMbRtuTransmit+0x3a>
 8003a10:	f240 11e9 	movw	r1, #489	; 0x1e9
 8003a14:	4856      	ldr	r0, [pc, #344]	; (8003b70 <TbxMbRtuTransmit+0x190>)
 8003a16:	f7fe fe81 	bl	800271c <TbxAssertTrigger>
    /* Are we requested to transmit an exception response? */
    TbxCriticalSectionEnter();
 8003a1a:	f7fe fe95 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t codeCopy = tpCtx->txPacket.pdu.code;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	7d9b      	ldrb	r3, [r3, #22]
 8003a22:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 8003a24:	f7fe feaa 	bl	800277c <TbxCriticalSectionExit>
    if ((codeCopy & TBX_MB_FC_EXCEPTION_MASK) == TBX_MB_FC_EXCEPTION_MASK)
 8003a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da07      	bge.n	8003a40 <TbxMbRtuTransmit+0x60>
    {
      /* Increment the total number of exception responses. */
      tpCtx->diagInfo.busExcpErrCnt++;
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 8003a36:	3301      	adds	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
    }
    TbxCriticalSectionEnter();
 8003a40:	f7fe fe82 	bl	8002748 <TbxCriticalSectionEnter>
    /* Still in the INIT state and configured as a client? */
    if ( (tpCtx->state == TBX_MB_RTU_STATE_INIT) && (tpCtx->isClient == TBX_TRUE) )
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d11d      	bne.n	8003a8a <TbxMbRtuTransmit+0xaa>
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d118      	bne.n	8003a8a <TbxMbRtuTransmit+0xaa>
       * The largest ADU to receive is 256 bytes. Adding the t3_5 end-of-frame time, 
       * means the longest time to wait for a transition to the IDLE state is:
       * 256 + 3.5 = 259.5 characters. This is ceil(259.5/3.5) = 75 times the t3_5
       * timer interval. Use this to calculate the timeout in ticks of the RTU timer.
       */
      uint16_t waitTimeoutTicks = tpCtx->t3_5Ticks * 75U;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f8b3 322a 	ldrh.w	r3, [r3, #554]	; 0x22a
 8003a5e:	461a      	mov	r2, r3
 8003a60:	0092      	lsls	r2, r2, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	461a      	mov	r2, r3
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	82bb      	strh	r3, [r7, #20]
      /* Convert it to milliseconds. Knowing that the RTU timer always runs at 20 kHz,
       * divide by 20. Just make sure to do integer roundup (A + (B-1)) / B.
       */
      uint16_t waitTimeoutMs = (waitTimeoutTicks + 19U) / 20U;
 8003a6c:	8abb      	ldrh	r3, [r7, #20]
 8003a6e:	3313      	adds	r3, #19
 8003a70:	4a40      	ldr	r2, [pc, #256]	; (8003b74 <TbxMbRtuTransmit+0x194>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	827b      	strh	r3, [r7, #18]
      /* Wait for the transition from INIT to IDLE with the calculated timeout. Note
       * that there is not need to check the return value. This would just mean that
       * no transition to IDLE took place before the timeout. The IDLE state check if
       * done later on in this function, so that error situation is already handled.
       */
      (void)TbxMbOsalSemTake(tpCtx->initStateExitSem, waitTimeoutMs);
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8003a80:	8a7a      	ldrh	r2, [r7, #18]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 fd4b 	bl	8005520 <TbxMbOsalSemTake>
    }
    /* New transmissions are only possible from the IDLE state. */
    uint8_t okayToTransmit = TBX_FALSE;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	77bb      	strb	r3, [r7, #30]
    if (tpCtx->state == TBX_MB_RTU_STATE_IDLE)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d112      	bne.n	8003abe <TbxMbRtuTransmit+0xde>
      /* Should a response actually be transmitted? If we are a server, then upon
       * reception packet validation, txPacket.node was already set to 
       * TBX_MB_TP_NODE_ADDR_BROADCAST for us, in case of a broadcast request, which
       * does not require a response.
       */
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d107      	bne.n	8003ab2 <TbxMbRtuTransmit+0xd2>
           (tpCtx->txPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST) )
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
      if ( (tpCtx->isClient == TBX_FALSE) && 
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d102      	bne.n	8003ab2 <TbxMbRtuTransmit+0xd2>
      {
        /* To bypass the actual response transmission, simply update the result to
         * indicate success and keep the okayToTransmit set to its default TBX_FALSE.
         */
        result = TBX_OK;
 8003aac:	2301      	movs	r3, #1
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e005      	b.n	8003abe <TbxMbRtuTransmit+0xde>
      }
      /* Okay to transmit the response. */
      else
      {
        okayToTransmit = TBX_TRUE;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	77bb      	strb	r3, [r7, #30]
        /* Transition to the TRANSMISSION state to lock access to the txPacket for the
         * duration of the transmission. Note that the unlock happens once the state 
         * transitions back to IDLE. This happens 3.5 character times after the 
         * completion of the transmission.
         */
        tpCtx->state = TBX_MB_RTU_STATE_TRANSMISSION;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      }
    }
    TbxCriticalSectionExit();
 8003abe:	f7fe fe5d 	bl	800277c <TbxCriticalSectionExit>
    /* Only continue if no other packet transmission is already in progress. */
    if (okayToTransmit == TBX_TRUE)
 8003ac2:	7fbb      	ldrb	r3, [r7, #30]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d142      	bne.n	8003b4e <TbxMbRtuTransmit+0x16e>
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t * aduPtr = &tpCtx->txPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	3315      	adds	r3, #21
 8003acc:	60fb      	str	r3, [r7, #12]
      uint16_t  aduLen = tpCtx->txPacket.dataLen + 4U;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	817b      	strh	r3, [r7, #10]
       * PDU. For client->server transfers the address field is the servers's node
       * address (unicast) or 0 (broadcast) and the client channel will have stored it in
       * the txPacket.node element. For server-client transfers it always the servers's
       * node address as stored when creating the RTU transport layer context.
       */
      aduPtr[0] = (tpCtx->isClient == TBX_TRUE) ? tpCtx->txPacket.node : tpCtx->nodeAddr;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d103      	bne.n	8003aec <TbxMbRtuTransmit+0x10c>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f893 3116 	ldrb.w	r3, [r3, #278]	; 0x116
 8003aea:	e001      	b.n	8003af0 <TbxMbRtuTransmit+0x110>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	7b5b      	ldrb	r3, [r3, #13]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	7013      	strb	r3, [r2, #0]
      /* Populate the ADU tail. For RTU it is the CRC16 right after the PDU's data. */
      uint16_t adu_crc = TbxMbRtuCalculatCrc(aduPtr, aduLen - 2U);
 8003af4:	897b      	ldrh	r3, [r7, #10]
 8003af6:	3b02      	subs	r3, #2
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	4619      	mov	r1, r3
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 faa9 	bl	8004054 <TbxMbRtuCalculatCrc>
 8003b02:	4603      	mov	r3, r0
 8003b04:	813b      	strh	r3, [r7, #8]
      aduPtr[aduLen - 2U] = (uint8_t)adu_crc;                         /* CRC16 low.  */
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	3b02      	subs	r3, #2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	893a      	ldrh	r2, [r7, #8]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]
      aduPtr[aduLen - 1U] = (uint8_t)(adu_crc >> 8U);                 /* CRC16 high. */
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b299      	uxth	r1, r3
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4413      	add	r3, r2
 8003b22:	b2ca      	uxtb	r2, r1
 8003b24:	701a      	strb	r2, [r3, #0]
      /* Pass ADU transmit request on to the UART module. */
      result = TbxMbUartTransmit(tpCtx->port, aduPtr, aduLen);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	7b9b      	ldrb	r3, [r3, #14]
 8003b2a:	897a      	ldrh	r2, [r7, #10]
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fdbe 	bl	80056b0 <TbxMbUartTransmit>
 8003b34:	4603      	mov	r3, r0
 8003b36:	77fb      	strb	r3, [r7, #31]
      /* Transition back to the IDLE state, because the transmission could not be
       * started. The unlocks access to txPacket for a possible future transmission.
       */
      if (result != TBX_OK)
 8003b38:	7ffb      	ldrb	r3, [r7, #31]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d007      	beq.n	8003b4e <TbxMbRtuTransmit+0x16e>
      {
        TbxCriticalSectionEnter();
 8003b3e:	f7fe fe03 	bl	8002748 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
        TbxCriticalSectionExit();
 8003b4a:	f7fe fe17 	bl	800277c <TbxCriticalSectionExit>
      }
    }
    /* Problem detected that prevented the response from being sent? */
    if (result == TBX_ERROR)
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <TbxMbRtuTransmit+0x184>
    {
      /* Increment the total number of not sent responses. */
      tpCtx->diagInfo.srvNoRespCnt++;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f8b3 3240 	ldrh.w	r3, [r3, #576]	; 0x240
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003b64:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuTransmit ***/
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	080058e8 	.word	0x080058e8
 8003b74:	cccccccd 	.word	0xcccccccd

08003b78 <TbxMbRtuReceptionDone>:
**            context.
** \param     transport Handle to RTU transport layer object.
**
****************************************************************************************/
static void TbxMbRtuReceptionDone(tTbxMbTp transport)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d104      	bne.n	8003b90 <TbxMbRtuReceptionDone+0x18>
 8003b86:	f240 216a 	movw	r1, #618	; 0x26a
 8003b8a:	4818      	ldr	r0, [pc, #96]	; (8003bec <TbxMbRtuReceptionDone+0x74>)
 8003b8c:	f7fe fdc6 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d025      	beq.n	8003be2 <TbxMbRtuReceptionDone+0x6a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	7b1b      	ldrb	r3, [r3, #12]
 8003b9e:	2b54      	cmp	r3, #84	; 0x54
 8003ba0:	d004      	beq.n	8003bac <TbxMbRtuReceptionDone+0x34>
 8003ba2:	f240 2172 	movw	r1, #626	; 0x272
 8003ba6:	4811      	ldr	r0, [pc, #68]	; (8003bec <TbxMbRtuReceptionDone+0x74>)
 8003ba8:	f7fe fdb8 	bl	800271c <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 8003bac:	f7fe fdcc 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003bb6:	72fb      	strb	r3, [r7, #11]
    TbxCriticalSectionExit();
 8003bb8:	f7fe fde0 	bl	800277c <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d004      	beq.n	8003bcc <TbxMbRtuReceptionDone+0x54>
 8003bc2:	f240 2177 	movw	r1, #631	; 0x277
 8003bc6:	4809      	ldr	r0, [pc, #36]	; (8003bec <TbxMbRtuReceptionDone+0x74>)
 8003bc8:	f7fe fda8 	bl	800271c <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made, which is
     * handled by this function.
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d107      	bne.n	8003be2 <TbxMbRtuReceptionDone+0x6a>
    {
      /* Transistion back to the IDLE state to unlock the data reception path, allowing
       * the reception of new packets.
       */
      TbxCriticalSectionEnter();
 8003bd2:	f7fe fdb9 	bl	8002748 <TbxCriticalSectionEnter>
      tpCtx->state = TBX_MB_RTU_STATE_IDLE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
      TbxCriticalSectionExit();
 8003bde:	f7fe fdcd 	bl	800277c <TbxCriticalSectionExit>
    }
  }
} /*** end of TbxMbRtuReceptionDone ****/
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	080058e8 	.word	0x080058e8

08003bf0 <TbxMbRtuGetRxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetRxPacket(tTbxMbTp transport)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <TbxMbRtuGetRxPacket+0x1c>
 8003c02:	f240 2196 	movw	r1, #662	; 0x296
 8003c06:	4812      	ldr	r0, [pc, #72]	; (8003c50 <TbxMbRtuGetRxPacket+0x60>)
 8003c08:	f7fe fd88 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <TbxMbRtuGetRxPacket+0x56>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	7b1b      	ldrb	r3, [r3, #12]
 8003c1a:	2b54      	cmp	r3, #84	; 0x54
 8003c1c:	d004      	beq.n	8003c28 <TbxMbRtuGetRxPacket+0x38>
 8003c1e:	f240 219e 	movw	r1, #670	; 0x29e
 8003c22:	480b      	ldr	r0, [pc, #44]	; (8003c50 <TbxMbRtuGetRxPacket+0x60>)
 8003c24:	f7fe fd7a 	bl	800271c <TbxAssertTrigger>
    /* Access to the reception packet by a channel is only allowed in the VALIDATION
     * state. In this state the reception path is locked until a transition back to IDLE
     * state is made. This happens once the channel called receptionDoneFcn().
     */
    TbxCriticalSectionEnter();
 8003c28:	f7fe fd8e 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003c32:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 8003c34:	f7fe fda2 	bl	800277c <TbxCriticalSectionExit>
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d103      	bne.n	8003c46 <TbxMbRtuGetRxPacket+0x56>
    {
      /* Update the result. */
      result = &tpCtx->rxPacket;
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f503 738d 	add.w	r3, r3, #282	; 0x11a
 8003c44:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003c46:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetRxPacket ***/
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	080058e8 	.word	0x080058e8

08003c54 <TbxMbRtuGetTxPacket>:
** \param     transport Handle to RTU transport layer object.
** \return    Pointer to the packet or NULL if currently not accessible.
**
****************************************************************************************/
static tTbxMbTpPacket * TbxMbRtuGetTxPacket(tTbxMbTp transport)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  tTbxMbTpPacket * result = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <TbxMbRtuGetTxPacket+0x1c>
 8003c66:	f240 21bf 	movw	r1, #703	; 0x2bf
 8003c6a:	4812      	ldr	r0, [pc, #72]	; (8003cb4 <TbxMbRtuGetTxPacket+0x60>)
 8003c6c:	f7fe fd56 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <TbxMbRtuGetTxPacket+0x54>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	7b1b      	ldrb	r3, [r3, #12]
 8003c7e:	2b54      	cmp	r3, #84	; 0x54
 8003c80:	d004      	beq.n	8003c8c <TbxMbRtuGetTxPacket+0x38>
 8003c82:	f240 21c7 	movw	r1, #711	; 0x2c7
 8003c86:	480b      	ldr	r0, [pc, #44]	; (8003cb4 <TbxMbRtuGetTxPacket+0x60>)
 8003c88:	f7fe fd48 	bl	800271c <TbxAssertTrigger>
    /* Access to the transmission packet by a channel is only allowed outside the 
     * TRANSMISSION state. In this state the transmission path is locked until a
     * transition back to IDLE state is made. This happens once the transport layer
     * completed the packet transmission.
     */
    TbxCriticalSectionEnter();
 8003c8c:	f7fe fd5c 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003c96:	73fb      	strb	r3, [r7, #15]
    TbxCriticalSectionExit();
 8003c98:	f7fe fd70 	bl	800277c <TbxCriticalSectionExit>
    if (currentState != TBX_MB_RTU_STATE_TRANSMISSION)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d002      	beq.n	8003ca8 <TbxMbRtuGetTxPacket+0x54>
    {
      /* Update the result. */
      result = &tpCtx->txPacket;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	330f      	adds	r3, #15
 8003ca6:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003ca8:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbRtuGetTxPacket ***/
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	080058e8 	.word	0x080058e8

08003cb8 <TbxMbRtuValidate>:
** \param     transport Handle to RTU transport layer object.
** \return    TBX_OK if successful, TBX_ERROR otherwise. 
**
****************************************************************************************/
static uint8_t TbxMbRtuValidate(tTbxMbTp transport)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b088      	sub	sp, #32
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint8_t result = TBX_ERROR;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	77fb      	strb	r3, [r7, #31]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d104      	bne.n	8003cd4 <TbxMbRtuValidate+0x1c>
 8003cca:	f240 21e7 	movw	r1, #743	; 0x2e7
 8003cce:	4847      	ldr	r0, [pc, #284]	; (8003dec <TbxMbRtuValidate+0x134>)
 8003cd0:	f7fe fd24 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8083 	beq.w	8003de2 <TbxMbRtuValidate+0x12a>
  {
    /* Convert the TP channel pointer to the context structure. */
    tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
    /* Sanity check on the context type. */
    TBX_ASSERT(tpCtx->type == TBX_MB_RTU_CONTEXT_TYPE);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	7b1b      	ldrb	r3, [r3, #12]
 8003ce4:	2b54      	cmp	r3, #84	; 0x54
 8003ce6:	d004      	beq.n	8003cf2 <TbxMbRtuValidate+0x3a>
 8003ce8:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003cec:	483f      	ldr	r0, [pc, #252]	; (8003dec <TbxMbRtuValidate+0x134>)
 8003cee:	f7fe fd15 	bl	800271c <TbxAssertTrigger>
    /* This function should only be called in the VALIDATION state. Verify this. */
    TbxCriticalSectionEnter();
 8003cf2:	f7fe fd29 	bl	8002748 <TbxCriticalSectionEnter>
    uint8_t currentState = tpCtx->state;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003cfc:	75fb      	strb	r3, [r7, #23]
    TbxCriticalSectionExit();
 8003cfe:	f7fe fd3d 	bl	800277c <TbxCriticalSectionExit>
    TBX_ASSERT(currentState == TBX_MB_RTU_STATE_VALIDATION);
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d004      	beq.n	8003d12 <TbxMbRtuValidate+0x5a>
 8003d08:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 8003d0c:	4837      	ldr	r0, [pc, #220]	; (8003dec <TbxMbRtuValidate+0x134>)
 8003d0e:	f7fe fd05 	bl	800271c <TbxAssertTrigger>
    /* Only continue in the VALIDATION state. Note that in the VALIDATION state, the data
     * reception path is locked until a transition back to IDLE state is made.
     * Consequenty, there is no need for critical sections when accessing the .rxXyz
     * elements of the TP context. 
     */
    if (currentState == TBX_MB_RTU_STATE_VALIDATION)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d164      	bne.n	8003de2 <TbxMbRtuValidate+0x12a>
    {
      /* Increment the total number of received packets, regardless of addressing or
       * CRC.
       */
      tpCtx->diagInfo.busMsgCnt++;
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f8b3 3238 	ldrh.w	r3, [r3, #568]	; 0x238
 8003d1e:	3301      	adds	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003d2e:	613b      	str	r3, [r7, #16]
       * - Node address (1 byte)
       * - Function code (1 byte)
       * - Packet data (dataLen bytes)
       * - CRC16 (2 bytes)
       */
      uint8_t * crcPtr = &aduPtr[2U + tpCtx->rxPacket.dataLen];
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8003d36:	3302      	adds	r3, #2
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
      /* Read out the CRC16 stored in the ADU packet. */
      uint16_t packetCrc = crcPtr[0] | (uint16_t)(crcPtr[1] << 8U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3301      	adds	r3, #1
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4313      	orrs	r3, r2
 8003d52:	817b      	strh	r3, [r7, #10]
      /* Calculate the CRC16 based on the packet contents. It's calculated over the
       * entire ADU data, just excluding the last two byte with the CRC16.
       */
      uint16_t calcCrc = TbxMbRtuCalculatCrc(aduPtr, tpCtx->rxPacket.dataLen + 2U);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4619      	mov	r1, r3
 8003d62:	6938      	ldr	r0, [r7, #16]
 8003d64:	f000 f976 	bl	8004054 <TbxMbRtuCalculatCrc>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	813b      	strh	r3, [r7, #8]
      /* Are the two CRC16s a mismatch? */
      if (packetCrc != calcCrc)
 8003d6c:	897a      	ldrh	r2, [r7, #10]
 8003d6e:	893b      	ldrh	r3, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d008      	beq.n	8003d86 <TbxMbRtuValidate+0xce>
      {
        /* Increment the total number of received packets with an incorrect CRC. */
        tpCtx->diagInfo.busCommErrCnt++;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
 8003d84:	e02d      	b.n	8003de2 <TbxMbRtuValidate+0x12a>
      else
      {
        /* Continue checking if the ADU is addressed to us. This check is different for a
         * server and a client. Start with the server case.
         */
        if (tpCtx->isClient == TBX_FALSE)
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11c      	bne.n	8003dca <TbxMbRtuValidate+0x112>
        {
          /* Only process frames that are addressed to us (unicast or broadcast). */
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	f893 2221 	ldrb.w	r2, [r3, #545]	; 0x221
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	7b5b      	ldrb	r3, [r3, #13]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d004      	beq.n	8003da8 <TbxMbRtuValidate+0xf0>
              (tpCtx->rxPacket.node == TBX_MB_TP_NODE_ADDR_BROADCAST))
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
          if ((tpCtx->rxPacket.node == tpCtx->nodeAddr) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11c      	bne.n	8003de2 <TbxMbRtuValidate+0x12a>
          {
            /* Increment the total number of received packets with a correct CRC, that
             * were addressed to us. Either via unicast of broadcast.
             */
            tpCtx->diagInfo.srvMsgCnt++;
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f8b3 323e 	ldrh.w	r3, [r3, #574]	; 0x23e
 8003dae:	3301      	adds	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
             * transmission to decide if the actual sending of the response should be
             * suppressed, which is the case for TBX_MB_TP_NODE_ADDR_BROADCAST. No need
             * for a critical section, because we are guaranteed not in the IDLE or
             * TRANSMISSION states.
             */
            tpCtx->txPacket.node = tpCtx->rxPacket.node;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	f893 2221 	ldrb.w	r2, [r3, #545]	; 0x221
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e00b      	b.n	8003de2 <TbxMbRtuValidate+0x12a>
        }
        /* Linked to a client channel. */
        else
        {
          /* Only process frames that are send from a valid server. */
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <TbxMbRtuValidate+0x126>
               (tpCtx->rxPacket.node <= TBX_MB_TP_NODE_ADDR_MAX) )
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
          if ( (tpCtx->rxPacket.node >= TBX_MB_TP_NODE_ADDR_MIN) ||
 8003dda:	2bf7      	cmp	r3, #247	; 0xf7
 8003ddc:	d801      	bhi.n	8003de2 <TbxMbRtuValidate+0x12a>
          {
            /* Packet is valid. Update the result accordingly. */
            result = TBX_OK;
 8003dde:	2301      	movs	r3, #1
 8003de0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }
  }
  /* Give the result back to the caller. */
  return result;
 8003de2:	7ffb      	ldrb	r3, [r7, #31]
} /*** end of TbxMbRtuValidate ***/
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	080058e8 	.word	0x080058e8

08003df0 <TbxMbRtuTransmitComplete>:
**            access to the shared resource.
** \param     port The serial port that the transfer completed on.
**
****************************************************************************************/
static void TbxMbRtuTransmitComplete(tTbxMbUartPort port)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	4603      	mov	r3, r0
 8003df8:	71fb      	strb	r3, [r7, #7]
  /* Verify parameters. */
  TBX_ASSERT(port < TBX_MB_UART_NUM_PORT);
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b07      	cmp	r3, #7
 8003dfe:	d904      	bls.n	8003e0a <TbxMbRtuTransmitComplete+0x1a>
 8003e00:	f240 3155 	movw	r1, #853	; 0x355
 8003e04:	4820      	ldr	r0, [pc, #128]	; (8003e88 <TbxMbRtuTransmitComplete+0x98>)
 8003e06:	f7fe fc89 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (port < TBX_MB_UART_NUM_PORT)
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	2b07      	cmp	r3, #7
 8003e0e:	d837      	bhi.n	8003e80 <TbxMbRtuTransmitComplete+0x90>
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TbxMbRtuTransmitComplete+0x9c>)
 8003e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e18:	617b      	str	r3, [r7, #20]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d104      	bne.n	8003e2a <TbxMbRtuTransmitComplete+0x3a>
 8003e20:	f240 315d 	movw	r1, #861	; 0x35d
 8003e24:	4818      	ldr	r0, [pc, #96]	; (8003e88 <TbxMbRtuTransmitComplete+0x98>)
 8003e26:	f7fe fc79 	bl	800271c <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d027      	beq.n	8003e80 <TbxMbRtuTransmitComplete+0x90>
    {
      TbxCriticalSectionEnter();
 8003e30:	f7fe fc8a 	bl	8002748 <TbxCriticalSectionEnter>
      uint8_t stateCopy = tpCtx->state;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003e3a:	74fb      	strb	r3, [r7, #19]
      TbxCriticalSectionExit();
 8003e3c:	f7fe fc9e 	bl	800277c <TbxCriticalSectionExit>
      /* This function should only be called when in the TRANSMISSION state. Verify
       * this. 
       */
      TBX_ASSERT(stateCopy == TBX_MB_RTU_STATE_TRANSMISSION);
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d004      	beq.n	8003e50 <TbxMbRtuTransmitComplete+0x60>
 8003e46:	f240 316a 	movw	r1, #874	; 0x36a
 8003e4a:	480f      	ldr	r0, [pc, #60]	; (8003e88 <TbxMbRtuTransmitComplete+0x98>)
 8003e4c:	f7fe fc66 	bl	800271c <TbxAssertTrigger>
      /* Only continue in the TRANSMISSION state. */
      if (stateCopy == TBX_MB_RTU_STATE_TRANSMISSION)
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d114      	bne.n	8003e80 <TbxMbRtuTransmitComplete+0x90>
      {
        /* Store the time that the transmission completed. */
        TbxCriticalSectionEnter();
 8003e56:	f7fe fc77 	bl	8002748 <TbxCriticalSectionEnter>
        tpCtx->txDoneTime = TbxMbPortTimerCount();
 8003e5a:	f7ff fb5d 	bl	8003518 <TbxMbPortTimerCount>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	461a      	mov	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
        TbxCriticalSectionExit();
 8003e68:	f7fe fc88 	bl	800277c <TbxCriticalSectionExit>
        /* Instruct the event task to start calling our polling function. Needed to
         * detect the 3.5 character timeout, after which we can transition back to the
         * IDLE state.
         */
        tTbxMbEvent newEvent;
        newEvent.context = (void *)tpCtx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	60fb      	str	r3, [r7, #12]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 8003e70:	2300      	movs	r3, #0
 8003e72:	723b      	strb	r3, [r7, #8]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fa5c 	bl	8005338 <TbxMbOsalEventPost>
      }
    }
  }
} /*** end of TbxMbRtuTransmitComplete ***/
 8003e80:	bf00      	nop
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	080058e8 	.word	0x080058e8
 8003e8c:	200008e4 	.word	0x200008e4

08003e90 <TbxMbRtuDataReceived>:
**
****************************************************************************************/
static void TbxMbRtuDataReceived(tTbxMbUartPort         port, 
                                 uint8_t        const * data, 
                                 uint8_t                len)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	6039      	str	r1, [r7, #0]
 8003e9a:	71fb      	strb	r3, [r7, #7]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	71bb      	strb	r3, [r7, #6]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d805      	bhi.n	8003eb2 <TbxMbRtuDataReceived+0x22>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <TbxMbRtuDataReceived+0x22>
 8003eac:	79bb      	ldrb	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <TbxMbRtuDataReceived+0x2c>
 8003eb2:	f44f 7165 	mov.w	r1, #916	; 0x394
 8003eb6:	4865      	ldr	r0, [pc, #404]	; (800404c <TbxMbRtuDataReceived+0x1bc>)
 8003eb8:	f7fe fc30 	bl	800271c <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	2b07      	cmp	r3, #7
 8003ec0:	f200 80bf 	bhi.w	8004042 <TbxMbRtuDataReceived+0x1b2>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80bb 	beq.w	8004042 <TbxMbRtuDataReceived+0x1b2>
      (data != NULL) &&
 8003ecc:	79bb      	ldrb	r3, [r7, #6]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80b7 	beq.w	8004042 <TbxMbRtuDataReceived+0x1b2>
      (len > 0U))
  {
    /* Obtain transport layer context linked to UART port of this event. */
    tTbxMbTpCtx volatile * tpCtx = tbxMbRtuCtx[port];
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <TbxMbRtuDataReceived+0x1c0>)
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	623b      	str	r3, [r7, #32]
    /* Verify transport layer context. */
    TBX_ASSERT(tpCtx != NULL)
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d104      	bne.n	8003eee <TbxMbRtuDataReceived+0x5e>
 8003ee4:	f44f 7168 	mov.w	r1, #928	; 0x3a0
 8003ee8:	4858      	ldr	r0, [pc, #352]	; (800404c <TbxMbRtuDataReceived+0x1bc>)
 8003eea:	f7fe fc17 	bl	800271c <TbxAssertTrigger>
    /* Only continue with a valid transport layer context. Note that there is no need
     * to also check the transport layer type, because only RTU types are stored in the
     * tbxMbRtuCtx[] array.
     */
    if (tpCtx != NULL)
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a6 	beq.w	8004042 <TbxMbRtuDataReceived+0x1b2>
    {
      /* Get current time in RTU timer ticks. */
      uint16_t currentTime = TbxMbPortTimerCount();
 8003ef6:	f7ff fb0f 	bl	8003518 <TbxMbPortTimerCount>
 8003efa:	4603      	mov	r3, r0
 8003efc:	83fb      	strh	r3, [r7, #30]
      TbxCriticalSectionEnter();
 8003efe:	f7fe fc23 	bl	8002748 <TbxCriticalSectionEnter>
      /* Store the reception timestamp but first make a backup of the old timestamp, 
       * which is needed later on to do the 1.5 character timeout detection.
       */
      #if (TBX_MB_RTU_T1_5_TIMEOUT_ENABLE > 0U)        
      uint16_t oldRxTime = tpCtx->rxTime;
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8003f08:	83bb      	strh	r3, [r7, #28]
      #endif
      tpCtx->rxTime = currentTime;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	8bfa      	ldrh	r2, [r7, #30]
 8003f0e:	f8a3 2222 	strh.w	r2, [r3, #546]	; 0x222
      /* The ADU for an RTU packet starts at one byte before the PDU, which is the last
       * byte of head[]. Get the pointer of where the ADU starts in the rxPacket.
       */
      uint8_t volatile * aduPtr = &tpCtx->rxPacket.head[TBX_MB_TP_ADU_HEAD_LEN_MAX-1U];
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003f18:	61bb      	str	r3, [r7, #24]
      /* Get copy of the state so the we can exit the critical section. */
      uint8_t stateCopy = tpCtx->state;
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	f893 322c 	ldrb.w	r3, [r3, #556]	; 0x22c
 8003f20:	75fb      	strb	r3, [r7, #23]
      TbxCriticalSectionExit();
 8003f22:	f7fe fc2b 	bl	800277c <TbxCriticalSectionExit>
      /* Are we in the RECEPTION state? Make sure to check this one first, as it will 
       * happen the most.
       */
      if (stateCopy == TBX_MB_RTU_STATE_RECEPTION)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d154      	bne.n	8003fd6 <TbxMbRtuDataReceived+0x146>
      {
        TbxCriticalSectionEnter();
 8003f2c:	f7fe fc0c 	bl	8002748 <TbxCriticalSectionEnter>
        #if (TBX_MB_RTU_T1_5_TIMEOUT_ENABLE > 0U)        
        /* Check if a 1.5 character timeout occurred since the last reception. Note that
         * this calculation works, even if the RTU timer counter overflowed.
         */
        uint16_t deltaTicks = tpCtx->rxTime - oldRxTime;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	f8b3 3222 	ldrh.w	r3, [r3, #546]	; 0x222
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	8bbb      	ldrh	r3, [r7, #28]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	82bb      	strh	r3, [r7, #20]
        if (deltaTicks >= tpCtx->t1_5Ticks)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f8b3 3228 	ldrh.w	r3, [r3, #552]	; 0x228
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	8aba      	ldrh	r2, [r7, #20]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d303      	bcc.n	8003f54 <TbxMbRtuDataReceived+0xc4>
        {
          /* Flag frame as not okay (NOK). */
          tpCtx->rxAduOkay = TBX_FALSE;
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
         * - Node address (1 byte)
         * - Function code (1 byte)
         * - Packet data (max 252 bytes)
         * - CRC16 (2 bytes)
         */
        if ((tpCtx->rxAduWrIdx + len) > 256U)
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79bb      	ldrb	r3, [r7, #6]
 8003f60:	4413      	add	r3, r2
 8003f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f66:	d903      	bls.n	8003f70 <TbxMbRtuDataReceived+0xe0>
        {
          /* Flag frame as not okay (NOK). */
          tpCtx->rxAduOkay = TBX_FALSE;
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
        /* Only process the newly received data if the ADU reception frame is still
         * flagged as OK. If not, then eventually a 3.5 character idle time will be
         * detected to mark the end of the packet/frame. At which point its data will be
         * discarded.
         */
        if (tpCtx->rxAduOkay == TBX_TRUE)
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f893 3226 	ldrb.w	r3, [r3, #550]	; 0x226
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d129      	bne.n	8003fd0 <TbxMbRtuDataReceived+0x140>
        {
          /* Append the received data to the ADU. */
          for (uint8_t idx = 0U; idx < len; idx++)
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f82:	e015      	b.n	8003fb0 <TbxMbRtuDataReceived+0x120>
          {
            aduPtr[tpCtx->rxAduWrIdx + idx] = data[idx];
 8003f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	441a      	add	r2, r3
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	4619      	mov	r1, r3
 8003f96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f9a:	440b      	add	r3, r1
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	440b      	add	r3, r1
 8003fa2:	7812      	ldrb	r2, [r2, #0]
 8003fa4:	701a      	strb	r2, [r3, #0]
          for (uint8_t idx = 0U; idx < len; idx++)
 8003fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003faa:	3301      	adds	r3, #1
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003fb4:	79bb      	ldrb	r3, [r7, #6]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d3e4      	bcc.n	8003f84 <TbxMbRtuDataReceived+0xf4>
          }
          /* Update the write indexer into the ADU reception packet. */
          tpCtx->rxAduWrIdx += len;
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	f8b3 3224 	ldrh.w	r3, [r3, #548]	; 0x224
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	79bb      	ldrb	r3, [r7, #6]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	4413      	add	r3, r2
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
        }
        TbxCriticalSectionExit();
 8003fd0:	f7fe fbd4 	bl	800277c <TbxCriticalSectionExit>
      {
        /* Nothing left to do, but MISRA requires this terminating else statement. */
      }
    }
  }
} /*** end of TbxMbRtuDataReceived ***/
 8003fd4:	e035      	b.n	8004042 <TbxMbRtuDataReceived+0x1b2>
      else if (stateCopy == TBX_MB_RTU_STATE_IDLE)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d132      	bne.n	8004042 <TbxMbRtuDataReceived+0x1b2>
        TbxCriticalSectionEnter();
 8003fdc:	f7fe fbb4 	bl	8002748 <TbxCriticalSectionEnter>
        tpCtx->state = TBX_MB_RTU_STATE_RECEPTION;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 222c 	strb.w	r2, [r3, #556]	; 0x22c
        for (uint8_t idx = 0U; idx < len; idx++)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003fee:	e00e      	b.n	800400e <TbxMbRtuDataReceived+0x17e>
          aduPtr[idx] = data[idx];
 8003ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	440b      	add	r3, r1
 8004000:	7812      	ldrb	r2, [r2, #0]
 8004002:	701a      	strb	r2, [r3, #0]
        for (uint8_t idx = 0U; idx < len; idx++)
 8004004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004008:	3301      	adds	r3, #1
 800400a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800400e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004012:	79bb      	ldrb	r3, [r7, #6]
 8004014:	429a      	cmp	r2, r3
 8004016:	d3eb      	bcc.n	8003ff0 <TbxMbRtuDataReceived+0x160>
        tpCtx->rxAduWrIdx = len;
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	b29a      	uxth	r2, r3
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
        tpCtx->rxAduOkay = TBX_TRUE;
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
        TbxCriticalSectionExit();
 800402a:	f7fe fba7 	bl	800277c <TbxCriticalSectionExit>
        newEvent.context = (void *)tpCtx;
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	613b      	str	r3, [r7, #16]
        newEvent.id = TBX_MB_EVENT_ID_START_POLLING;
 8004032:	2300      	movs	r3, #0
 8004034:	733b      	strb	r3, [r7, #12]
        TbxMbOsalEventPost(&newEvent, TBX_TRUE);
 8004036:	f107 030c 	add.w	r3, r7, #12
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f001 f97b 	bl	8005338 <TbxMbOsalEventPost>
} /*** end of TbxMbRtuDataReceived ***/
 8004042:	bf00      	nop
 8004044:	3728      	adds	r7, #40	; 0x28
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	080058e8 	.word	0x080058e8
 8004050:	200008e4 	.word	0x200008e4

08004054 <TbxMbRtuCalculatCrc>:
** \return    The calculated CRC16 checksum value.
**
****************************************************************************************/
static uint16_t TbxMbRtuCalculatCrc(uint8_t  const * data, 
                                    uint16_t         len)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
  };
  uint16_t result = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	817b      	strh	r3, [r7, #10]
  uint16_t crc = 0xFFFFU;
 8004064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004068:	81fb      	strh	r3, [r7, #14]

  /* Loop over all the data bytes. */
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 800406a:	2300      	movs	r3, #0
 800406c:	81bb      	strh	r3, [r7, #12]
 800406e:	e014      	b.n	800409a <TbxMbRtuCalculatCrc+0x46>
  {
    /* Calculate the index into the CRC lookup table. */
    uint8_t tableIdx = data[byteIdx] ^ crc;
 8004070:	89bb      	ldrh	r3, [r7, #12]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	4413      	add	r3, r2
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4053      	eors	r3, r2
 800407e:	727b      	strb	r3, [r7, #9]
    crc >>= 8;
 8004080:	89fb      	ldrh	r3, [r7, #14]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	81fb      	strh	r3, [r7, #14]
    crc ^= tbxMbRtuCrcTable[tableIdx];
 8004086:	7a7b      	ldrb	r3, [r7, #9]
 8004088:	4a0a      	ldr	r2, [pc, #40]	; (80040b4 <TbxMbRtuCalculatCrc+0x60>)
 800408a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800408e:	89fb      	ldrh	r3, [r7, #14]
 8004090:	4053      	eors	r3, r2
 8004092:	81fb      	strh	r3, [r7, #14]
  for (uint16_t byteIdx = 0; byteIdx < len; byteIdx++)
 8004094:	89bb      	ldrh	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	81bb      	strh	r3, [r7, #12]
 800409a:	89ba      	ldrh	r2, [r7, #12]
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3e6      	bcc.n	8004070 <TbxMbRtuCalculatCrc+0x1c>
  }
  /* Update the result. */
  result = crc;
 80040a2:	89fb      	ldrh	r3, [r7, #14]
 80040a4:	817b      	strh	r3, [r7, #10]
  /* Give the result back to the caller. */
  return result;
 80040a6:	897b      	ldrh	r3, [r7, #10]
} /*** end of TbxMbRtuCalculatCrc ***/
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	080059bc 	.word	0x080059bc

080040b8 <TbxMbCommonExtractUInt16BE>:
**            in the big endian format.
** \return    The 16-bit unsigned integer value.
**
****************************************************************************************/
static inline uint16_t TbxMbCommonExtractUInt16BE(uint8_t const * data)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return ((uint16_t)data[0] << 8U) | data[1];
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3301      	adds	r3, #1
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b21b      	sxth	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b21b      	sxth	r3, r3
 80040d4:	b29b      	uxth	r3, r3
} /*** end of TbxMbCommonExtractUInt16BE ***/
 80040d6:	4618      	mov	r0, r3
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <TbxMbCommonStoreUInt16BE>:
**            format.
**
****************************************************************************************/
static inline void TbxMbCommonStoreUInt16BE(uint16_t   value,
                                            uint8_t  * data)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	4603      	mov	r3, r0
 80040ea:	6039      	str	r1, [r7, #0]
 80040ec:	80fb      	strh	r3, [r7, #6]
  data[0] = (uint8_t)(value >> 8U);
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	0a1b      	lsrs	r3, r3, #8
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)value;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	88fa      	ldrh	r2, [r7, #6]
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]
} /*** end of TbxMbCommonExtractUInt16BE ***/
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <TbxMbServerCreate>:
** \return    Handle to the newly created Modbus server channel object if successful,
**            NULL otherwise.
**
****************************************************************************************/
tTbxMbServer TbxMbServerCreate(tTbxMbTp transport)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  tTbxMbServer result = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]

  /* Verify parameters. */
  TBX_ASSERT(transport != NULL);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <TbxMbServerCreate+0x1a>
 8004122:	2169      	movs	r1, #105	; 0x69
 8004124:	4839      	ldr	r0, [pc, #228]	; (800420c <TbxMbServerCreate+0xfc>)
 8004126:	f7fe faf9 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (transport != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d067      	beq.n	8004200 <TbxMbServerCreate+0xf0>
  {
    /* Allocate memory for the new channel context. */
    tTbxMbServerCtx * newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));
 8004130:	2030      	movs	r0, #48	; 0x30
 8004132:	f7fe fe67 	bl	8002e04 <TbxMemPoolAllocate>
 8004136:	6138      	str	r0, [r7, #16]
    /* Automatically increase the memory pool, if it was too small. */
    if (newServerCtx == NULL)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d107      	bne.n	800414e <TbxMbServerCreate+0x3e>
    {
      /* No need to check the return value, because if it failed, the following
       * allocation fails too, which is verified later on.
       */
      (void)TbxMemPoolCreate(1U, sizeof(tTbxMbServerCtx));
 800413e:	2130      	movs	r1, #48	; 0x30
 8004140:	2001      	movs	r0, #1
 8004142:	f7fe fdbd 	bl	8002cc0 <TbxMemPoolCreate>
      newServerCtx = TbxMemPoolAllocate(sizeof(tTbxMbServerCtx));      
 8004146:	2030      	movs	r0, #48	; 0x30
 8004148:	f7fe fe5c 	bl	8002e04 <TbxMemPoolAllocate>
 800414c:	6138      	str	r0, [r7, #16]
    }
    /* Verify memory allocation of the channel context. */
    TBX_ASSERT(newServerCtx != NULL);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <TbxMbServerCreate+0x4c>
 8004154:	217a      	movs	r1, #122	; 0x7a
 8004156:	482d      	ldr	r0, [pc, #180]	; (800420c <TbxMbServerCreate+0xfc>)
 8004158:	f7fe fae0 	bl	800271c <TbxAssertTrigger>
    /* Only continue if the memory allocation succeeded. */
    if (newServerCtx != NULL)
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d04e      	beq.n	8004200 <TbxMbServerCreate+0xf0>
    {
      /* Convert the TP channel pointer to the context structure. */
      tTbxMbTpCtx * tpCtx = (tTbxMbTpCtx *)transport;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	60fb      	str	r3, [r7, #12]
      /* Sanity check on the transport layer's interface function. That way there is 
       * no need to do it later on, making it more run-time efficient. Also check that
       * it's not already linked to another channel.
       */
      TBX_ASSERT((tpCtx->transmitFcn != NULL) && (tpCtx->receptionDoneFcn != NULL) &&
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 800416c:	2b00      	cmp	r3, #0
 800416e:	d013      	beq.n	8004198 <TbxMbServerCreate+0x88>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00e      	beq.n	8004198 <TbxMbServerCreate+0x88>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <TbxMbServerCreate+0x88>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <TbxMbServerCreate+0x88>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <TbxMbServerCreate+0x90>
 8004198:	2184      	movs	r1, #132	; 0x84
 800419a:	481c      	ldr	r0, [pc, #112]	; (800420c <TbxMbServerCreate+0xfc>)
 800419c:	f7fe fabe 	bl	800271c <TbxAssertTrigger>
                 (tpCtx->getRxPacketFcn != NULL) && (tpCtx->getTxPacketFcn != NULL) &&
                 (tpCtx->channelCtx == NULL));              
      /* Initialize the channel context. Start by crosslinking the transport layer. */
      newServerCtx->type = TBX_MB_SERVER_CONTEXT_TYPE;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2225      	movs	r2, #37	; 0x25
 80041a4:	731a      	strb	r2, [r3, #12]
      newServerCtx->instancePtr = NULL;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
      newServerCtx->pollFcn = NULL;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2200      	movs	r2, #0
 80041b0:	605a      	str	r2, [r3, #4]
      newServerCtx->processFcn = TbxMbServerProcessEvent;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	4a16      	ldr	r2, [pc, #88]	; (8004210 <TbxMbServerCreate+0x100>)
 80041b6:	609a      	str	r2, [r3, #8]
      newServerCtx->readInputFcn = NULL;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2200      	movs	r2, #0
 80041bc:	615a      	str	r2, [r3, #20]
      newServerCtx->readCoilFcn = NULL;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2200      	movs	r2, #0
 80041c2:	619a      	str	r2, [r3, #24]
      newServerCtx->writeCoilFcn = NULL;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2200      	movs	r2, #0
 80041c8:	61da      	str	r2, [r3, #28]
      newServerCtx->readInputRegFcn = NULL;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2200      	movs	r2, #0
 80041ce:	621a      	str	r2, [r3, #32]
      newServerCtx->readHoldingRegFcn = NULL;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2200      	movs	r2, #0
 80041d4:	625a      	str	r2, [r3, #36]	; 0x24
      newServerCtx->writeHoldingRegFcn = NULL;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	2200      	movs	r2, #0
 80041da:	629a      	str	r2, [r3, #40]	; 0x28
      newServerCtx->customFunctionFcn = NULL;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2200      	movs	r2, #0
 80041e0:	62da      	str	r2, [r3, #44]	; 0x2c
      newServerCtx->tpCtx = tpCtx;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	611a      	str	r2, [r3, #16]
      newServerCtx->tpCtx->channelCtx = newServerCtx;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
      newServerCtx->tpCtx->isClient = TBX_FALSE;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
      /* Update the result. */
      result = newServerCtx;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	617b      	str	r3, [r7, #20]
    }
  }
  /* Give the result back to the caller. */
  return result;
 8004200:	697b      	ldr	r3, [r7, #20]
} /*** end of TbxMbServerCreate ****/
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	0800591c 	.word	0x0800591c
 8004210:	08004271 	.word	0x08004271

08004214 <TbxMbServerSetCallbackReadInputReg>:
** \param     callback Pointer to the callback function.
**
****************************************************************************************/
void TbxMbServerSetCallbackReadInputReg(tTbxMbServer             channel,
                                        tTbxMbServerReadInputReg callback)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Verify parameters. */
  TBX_ASSERT((channel != NULL) && (callback != NULL));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <TbxMbServerSetCallbackReadInputReg+0x16>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <TbxMbServerSetCallbackReadInputReg+0x20>
 800422a:	f240 111f 	movw	r1, #287	; 0x11f
 800422e:	480f      	ldr	r0, [pc, #60]	; (800426c <TbxMbServerSetCallbackReadInputReg+0x58>)
 8004230:	f7fe fa74 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((channel != NULL) && (callback != NULL))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d014      	beq.n	8004264 <TbxMbServerSetCallbackReadInputReg+0x50>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <TbxMbServerSetCallbackReadInputReg+0x50>
  {
    /* Convert the server channel pointer to the context structure. */
    tTbxMbServerCtx * serverCtx = (tTbxMbServerCtx *)channel;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(serverCtx->type == TBX_MB_SERVER_CONTEXT_TYPE);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	7b1b      	ldrb	r3, [r3, #12]
 8004248:	2b25      	cmp	r3, #37	; 0x25
 800424a:	d004      	beq.n	8004256 <TbxMbServerSetCallbackReadInputReg+0x42>
 800424c:	f240 1127 	movw	r1, #295	; 0x127
 8004250:	4806      	ldr	r0, [pc, #24]	; (800426c <TbxMbServerSetCallbackReadInputReg+0x58>)
 8004252:	f7fe fa63 	bl	800271c <TbxAssertTrigger>
    /* Store the callback function pointer. */
    TbxCriticalSectionEnter();
 8004256:	f7fe fa77 	bl	8002748 <TbxCriticalSectionEnter>
    serverCtx->readInputRegFcn = callback;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	621a      	str	r2, [r3, #32]
    TbxCriticalSectionExit();
 8004260:	f7fe fa8c 	bl	800277c <TbxCriticalSectionExit>
  }
} /*** end of TbxMbServerSetCallbackReadInputReg ***/
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	0800591c 	.word	0x0800591c

08004270 <TbxMbServerProcessEvent>:
** \param     event Pointer to the event to process. Note that the event->context points
**            to the handle of the Modbus server channel object.
**
****************************************************************************************/
static void TbxMbServerProcessEvent(tTbxMbEvent * event)
{
 8004270:	b590      	push	{r4, r7, lr}
 8004272:	b08b      	sub	sp, #44	; 0x2c
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <TbxMbServerProcessEvent+0x18>
 800427e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8004282:	488d      	ldr	r0, [pc, #564]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 8004284:	f7fe fa4a 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 810f 	beq.w	80044ae <TbxMbServerProcessEvent+0x23e>
  {
    /* Sanity check the context. */
    TBX_ASSERT(event->context != NULL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <TbxMbServerProcessEvent+0x32>
 8004298:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800429c:	4886      	ldr	r0, [pc, #536]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 800429e:	f7fe fa3d 	bl	800271c <TbxAssertTrigger>
    /* Convert the event context to the server channel context structure. */
    tTbxMbServerCtx * serverCtx = (tTbxMbServerCtx *)event->context;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	623b      	str	r3, [r7, #32]
    /* Make sure the context is valid. */
    TBX_ASSERT(serverCtx != NULL);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d104      	bne.n	80042b8 <TbxMbServerProcessEvent+0x48>
 80042ae:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80042b2:	4881      	ldr	r0, [pc, #516]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 80042b4:	f7fe fa32 	bl	800271c <TbxAssertTrigger>
    /* Only continue with a valid context. */
    if (serverCtx != NULL)
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 80f7 	beq.w	80044ae <TbxMbServerProcessEvent+0x23e>
    {
      /* Sanity check on the context type. */
      TBX_ASSERT(serverCtx->type == TBX_MB_SERVER_CONTEXT_TYPE);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	7b1b      	ldrb	r3, [r3, #12]
 80042c4:	2b25      	cmp	r3, #37	; 0x25
 80042c6:	d004      	beq.n	80042d2 <TbxMbServerProcessEvent+0x62>
 80042c8:	f240 119f 	movw	r1, #415	; 0x19f
 80042cc:	487a      	ldr	r0, [pc, #488]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 80042ce:	f7fe fa25 	bl	800271c <TbxAssertTrigger>
      /* Filter on the event identifier. */
      switch (event->id)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d003      	beq.n	80042e2 <TbxMbServerProcessEvent+0x72>
 80042da:	2b03      	cmp	r3, #3
 80042dc:	f000 80e4 	beq.w	80044a8 <TbxMbServerProcessEvent+0x238>
 80042e0:	e0dc      	b.n	800449c <TbxMbServerProcessEvent+0x22c>
      {
        case TBX_MB_EVENT_ID_PDU_RECEIVED:
        {
          uint8_t okayToSendResponse = TBX_FALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          /* Obtain read access to the newly received packet and write access to the
           * response packet. 
           */
          tTbxMbTpPacket * rxPacket = serverCtx->tpCtx->getRxPacketFcn(serverCtx->tpCtx);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80042f0:	6a3a      	ldr	r2, [r7, #32]
 80042f2:	6912      	ldr	r2, [r2, #16]
 80042f4:	4610      	mov	r0, r2
 80042f6:	4798      	blx	r3
 80042f8:	61f8      	str	r0, [r7, #28]
          tTbxMbTpPacket * txPacket = serverCtx->tpCtx->getTxPacketFcn(serverCtx->tpCtx);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8004302:	6a3a      	ldr	r2, [r7, #32]
 8004304:	6912      	ldr	r2, [r2, #16]
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3
 800430a:	61b8      	str	r0, [r7, #24]
          /* Since we're requested to process a newly received PDU, these packet accesses
           * should always succeed. Sanity check anyways, just in case.
           */
          TBX_ASSERT((rxPacket != NULL) && (txPacket != NULL));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <TbxMbServerProcessEvent+0xa8>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <TbxMbServerProcessEvent+0xb2>
 8004318:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800431c:	4866      	ldr	r0, [pc, #408]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 800431e:	f7fe f9fd 	bl	800271c <TbxAssertTrigger>
          /* Only continue with packet access. */
          if ((rxPacket != NULL) && (txPacket != NULL))
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80a4 	beq.w	8004472 <TbxMbServerProcessEvent+0x202>
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a0 	beq.w	8004472 <TbxMbServerProcessEvent+0x202>
          {
            /* Update flag that we can actually send a response, now that we know we 
             * have access to txPacket.
             */
            okayToSendResponse = TBX_TRUE;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            /* Prepare the response packet function code. */
            txPacket->pdu.code = rxPacket->pdu.code;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	79da      	ldrb	r2, [r3, #7]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	71da      	strb	r2, [r3, #7]
            /* Filter on the function code. */
            switch (rxPacket->pdu.code)
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	79db      	ldrb	r3, [r3, #7]
 8004344:	3b01      	subs	r3, #1
 8004346:	2b0f      	cmp	r3, #15
 8004348:	d858      	bhi.n	80043fc <TbxMbServerProcessEvent+0x18c>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <TbxMbServerProcessEvent+0xe0>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004391 	.word	0x08004391
 8004354:	0800439d 	.word	0x0800439d
 8004358:	080043a9 	.word	0x080043a9
 800435c:	080043b5 	.word	0x080043b5
 8004360:	080043c1 	.word	0x080043c1
 8004364:	080043cd 	.word	0x080043cd
 8004368:	080043fd 	.word	0x080043fd
 800436c:	080043d9 	.word	0x080043d9
 8004370:	080043fd 	.word	0x080043fd
 8004374:	080043fd 	.word	0x080043fd
 8004378:	080043fd 	.word	0x080043fd
 800437c:	080043fd 	.word	0x080043fd
 8004380:	080043fd 	.word	0x080043fd
 8004384:	080043fd 	.word	0x080043fd
 8004388:	080043e5 	.word	0x080043e5
 800438c:	080043f1 	.word	0x080043f1
            {
              /* ---------------- FC01 - Read Coils ---------------------------------- */
              case TBX_MB_FC01_READ_COILS:
              {
                TbxMbServerFC01ReadCoils(serverCtx, rxPacket, txPacket);
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	69f9      	ldr	r1, [r7, #28]
 8004394:	6a38      	ldr	r0, [r7, #32]
 8004396:	f000 f891 	bl	80044bc <TbxMbServerFC01ReadCoils>
              }
              break;
 800439a:	e06a      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC02 - Read Discrete Inputs ------------------------ */
              case TBX_MB_FC02_READ_DISCRETE_INPUTS:
              {
                TbxMbServerFC02ReadInputs(serverCtx, rxPacket, txPacket);
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	69f9      	ldr	r1, [r7, #28]
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f000 f96d 	bl	8004680 <TbxMbServerFC02ReadInputs>
              }
              break;
 80043a6:	e064      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC03 - Read Holding Registers ---------------------- */
              case TBX_MB_FC03_READ_HOLDING_REGISTERS:
              {
                TbxMbServerFC03ReadHoldingRegs(serverCtx, rxPacket, txPacket);
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	69f9      	ldr	r1, [r7, #28]
 80043ac:	6a38      	ldr	r0, [r7, #32]
 80043ae:	f000 fa49 	bl	8004844 <TbxMbServerFC03ReadHoldingRegs>
              }
              break;
 80043b2:	e05e      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC04 - Read Input Registers ------------------------ */
              case TBX_MB_FC04_READ_INPUT_REGISTERS:
              {
                TbxMbServerFC04ReadInputRegs(serverCtx, rxPacket, txPacket);
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	69f9      	ldr	r1, [r7, #28]
 80043b8:	6a38      	ldr	r0, [r7, #32]
 80043ba:	f000 faeb 	bl	8004994 <TbxMbServerFC04ReadInputRegs>
              }
              break;
 80043be:	e058      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC05 - Write Single Coil --------------------------- */
              case TBX_MB_FC05_WRITE_SINGLE_COIL:
              {
                TbxMbServerFC05WriteSingleCoil(serverCtx, rxPacket, txPacket);
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	69f9      	ldr	r1, [r7, #28]
 80043c4:	6a38      	ldr	r0, [r7, #32]
 80043c6:	f000 fb8d 	bl	8004ae4 <TbxMbServerFC05WriteSingleCoil>
              }
              break;
 80043ca:	e052      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC06 - Write Single Register ----------------------- */
              case TBX_MB_FC06_WRITE_SINGLE_REGISTER:
              {
                TbxMbServerFC06WriteSingleReg(serverCtx, rxPacket, txPacket);
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	69f9      	ldr	r1, [r7, #28]
 80043d0:	6a38      	ldr	r0, [r7, #32]
 80043d2:	f000 fc1d 	bl	8004c10 <TbxMbServerFC06WriteSingleReg>
              }
              break;
 80043d6:	e04c      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC08 - Diagnostics --------------------------------- */
              case TBX_MB_FC08_DIAGNOSTICS:
              {
                TbxMbServerFC08Diagnostics(serverCtx, rxPacket, txPacket);
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	69f9      	ldr	r1, [r7, #28]
 80043dc:	6a38      	ldr	r0, [r7, #32]
 80043de:	f000 fc8f 	bl	8004d00 <TbxMbServerFC08Diagnostics>
              }
              break;
 80043e2:	e046      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC15 - Write Multiple Coils ------------------------ */
              case TBX_MB_FC15_WRITE_MULTIPLE_COILS:
              {
                TbxMbServerFC15WriteMultipleCoils(serverCtx, rxPacket, txPacket);
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	6a38      	ldr	r0, [r7, #32]
 80043ea:	f000 fde1 	bl	8004fb0 <TbxMbServerFC15WriteMultipleCoils>
              }
              break;
 80043ee:	e040      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- FC16 - Write Multiple Registers -------------------- */
              case TBX_MB_FC16_WRITE_MULTIPLE_REGISTERS:
              {
                TbxMbServerFC16WriteMultipleRegs(serverCtx, rxPacket, txPacket);
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6a38      	ldr	r0, [r7, #32]
 80043f6:	f000 fecd 	bl	8005194 <TbxMbServerFC16WriteMultipleRegs>
              }
              break;
 80043fa:	e03a      	b.n	8004472 <TbxMbServerProcessEvent+0x202>

              /* ---------------- Unsupported function code -------------------------- */
              default:
              {
                uint8_t handled = TBX_FALSE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                /* Is a custom function code callback configured? */
                if (serverCtx->customFunctionFcn != NULL)
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d020      	beq.n	800444c <TbxMbServerProcessEvent+0x1dc>
                {
                  /* Prepare callback parameters. */
                  uint8_t const * rxPdu  = &rxPacket->pdu.code;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3307      	adds	r3, #7
 800440e:	617b      	str	r3, [r7, #20]
                  uint8_t       * txPdu  = &txPacket->pdu.code;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	3307      	adds	r3, #7
 8004414:	613b      	str	r3, [r7, #16]
                  uint8_t         pduLen = rxPacket->dataLen + 1U;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800441c:	3301      	adds	r3, #1
 800441e:	b2db      	uxtb	r3, r3
 8004420:	73fb      	strb	r3, [r7, #15]
                  /* Call the custom function code callback. */
                  handled = serverCtx->customFunctionFcn(serverCtx, rxPdu, txPdu, 
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004426:	f107 030f 	add.w	r3, r7, #15
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	6a38      	ldr	r0, [r7, #32]
 8004430:	47a0      	blx	r4
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                                                         &pduLen);
                  /* Did the callback process the PDU and prepare a response? */
                  if (handled == TBX_TRUE)
 8004438:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <TbxMbServerProcessEvent+0x1dc>
                  {
                    /* Set the response data length. */
                    txPacket->dataLen = pduLen - 1U;
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	3b01      	subs	r3, #1
 8004444:	b2da      	uxtb	r2, r3
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                  }
                }
                /* Did the custom function code callback not handle the PDU? */
                if (handled == TBX_FALSE)
 800444c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10d      	bne.n	8004470 <TbxMbServerProcessEvent+0x200>
                {
                  /* This function code is currently not supported. */
                  txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	79db      	ldrb	r3, [r3, #7]
 8004458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800445c:	b2da      	uxtb	r2, r3
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	71da      	strb	r2, [r3, #7]
                  txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	2201      	movs	r2, #1
 8004466:	721a      	strb	r2, [r3, #8]
                  txPacket->dataLen = 1U;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
                }
              }
              break;
 8004470:	bf00      	nop
            }
          }
          /* Inform the transport layer that were done with the rx packet and no longer
           * need access to it.
           */
          serverCtx->tpCtx->receptionDoneFcn(serverCtx->tpCtx);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	6912      	ldr	r2, [r2, #16]
 800447e:	4610      	mov	r0, r2
 8004480:	4798      	blx	r3
          /* Request the transport layer to transmit the response. Note that
           * transmitFcn() should only be called after calling receptionDoneFcn().
           */
          if (okayToSendResponse == TBX_TRUE)
 8004482:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004486:	2b01      	cmp	r3, #1
 8004488:	d110      	bne.n	80044ac <TbxMbServerProcessEvent+0x23c>
          {
            (void)serverCtx->tpCtx->transmitFcn(serverCtx->tpCtx);
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8004492:	6a3a      	ldr	r2, [r7, #32]
 8004494:	6912      	ldr	r2, [r2, #16]
 8004496:	4610      	mov	r0, r2
 8004498:	4798      	blx	r3
          }
        }
        break;
 800449a:	e007      	b.n	80044ac <TbxMbServerProcessEvent+0x23c>
        break;

        default:
        {
          /* An unsupported event was dispatched to us. Should not happen. */
          TBX_ASSERT(TBX_FALSE);
 800449c:	f240 2135 	movw	r1, #565	; 0x235
 80044a0:	4805      	ldr	r0, [pc, #20]	; (80044b8 <TbxMbServerProcessEvent+0x248>)
 80044a2:	f7fe f93b 	bl	800271c <TbxAssertTrigger>
        }
        break;
 80044a6:	e002      	b.n	80044ae <TbxMbServerProcessEvent+0x23e>
        break;
 80044a8:	bf00      	nop
 80044aa:	e000      	b.n	80044ae <TbxMbServerProcessEvent+0x23e>
        break;
 80044ac:	bf00      	nop
      }
    }
  }
} /*** end of TbxMbServerProcessEvent ***/
 80044ae:	bf00      	nop
 80044b0:	372c      	adds	r7, #44	; 0x2c
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	bf00      	nop
 80044b8:	0800591c 	.word	0x0800591c

080044bc <TbxMbServerFC01ReadCoils>:
**
****************************************************************************************/
static void TbxMbServerFC01ReadCoils(tTbxMbServerCtx       * context,
                                     tTbxMbTpPacket  const * rxPacket,
                                     tTbxMbTpPacket        * txPacket)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <TbxMbServerFC01ReadCoils+0x1e>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <TbxMbServerFC01ReadCoils+0x1e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d104      	bne.n	80044e4 <TbxMbServerFC01ReadCoils+0x28>
 80044da:	f44f 7113 	mov.w	r1, #588	; 0x24c
 80044de:	4867      	ldr	r0, [pc, #412]	; (800467c <TbxMbServerFC01ReadCoils+0x1c0>)
 80044e0:	f7fe f91c 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80c4 	beq.w	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 80c0 	beq.w	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80bc 	beq.w	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	3308      	adds	r3, #8
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff fdd9 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004506:	4603      	mov	r3, r0
 8004508:	843b      	strh	r3, [r7, #32]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	330a      	adds	r3, #10
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fdd2 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004514:	4603      	mov	r3, r0
 8004516:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readCoilFcn == NULL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10e      	bne.n	800453e <TbxMbServerFC01ReadCoils+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	79db      	ldrb	r3, [r3, #7]
 8004524:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004528:	b2da      	uxtb	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC01ReadCoils ***/
 800453c:	e09a      	b.n	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
    else if ((numCoils < 1U) || (numCoils > 2000U))
 800453e:	8bfb      	ldrh	r3, [r7, #30]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <TbxMbServerFC01ReadCoils+0x90>
 8004544:	8bfb      	ldrh	r3, [r7, #30]
 8004546:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800454a:	d90e      	bls.n	800456a <TbxMbServerFC01ReadCoils+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	79db      	ldrb	r3, [r3, #7]
 8004550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004554:	b2da      	uxtb	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2203      	movs	r2, #3
 800455e:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004568:	e084      	b.n	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
      uint8_t numBytes = (uint8_t)(numCoils / 8U);
 800456a:	8bfb      	ldrh	r3, [r7, #30]
 800456c:	08db      	lsrs	r3, r3, #3
 800456e:	b29b      	uxth	r3, r3
 8004570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if ((numCoils % 8U) != 0U)
 8004574:	8bfb      	ldrh	r3, [r7, #30]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d004      	beq.n	800458a <TbxMbServerFC01ReadCoils+0xce>
        numBytes++;
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004584:	3301      	adds	r3, #1
 8004586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      txPacket->pdu.data[0] = numBytes;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004590:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7a1b      	ldrb	r3, [r3, #8]
 8004596:	3301      	adds	r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t   bitIdx  = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      uint8_t   byteIdx = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t * coilData = &txPacket->pdu.data[1];
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3309      	adds	r3, #9
 80045b0:	61bb      	str	r3, [r7, #24]
      coilData[0] = 0U;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80045bc:	e056      	b.n	800466c <TbxMbServerFC01ReadCoils+0x1b0>
        uint8_t            coilValue = TBX_OFF;
 80045be:	2300      	movs	r3, #0
 80045c0:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readCoilFcn(context, startAddr + idx, &coilValue);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	8c39      	ldrh	r1, [r7, #32]
 80045c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045ca:	440a      	add	r2, r1
 80045cc:	b291      	uxth	r1, r2
 80045ce:	f107 0216 	add.w	r2, r7, #22
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	4798      	blx	r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d12c      	bne.n	800463a <TbxMbServerFC01ReadCoils+0x17e>
          if (coilValue != TBX_OFF)
 80045e0:	7dbb      	ldrb	r3, [r7, #22]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <TbxMbServerFC01ReadCoils+0x14e>
            coilData[byteIdx] |= (1U << bitIdx);
 80045e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4413      	add	r3, r2
 80045ee:	7819      	ldrb	r1, [r3, #0]
 80045f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80045f4:	2201      	movs	r2, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004600:	69b8      	ldr	r0, [r7, #24]
 8004602:	4403      	add	r3, r0
 8004604:	430a      	orrs	r2, r1
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 800460a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800460e:	3301      	adds	r3, #1
 8004610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          if (bitIdx == 8U)
 8004614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004618:	2b08      	cmp	r3, #8
 800461a:	d124      	bne.n	8004666 <TbxMbServerFC01ReadCoils+0x1aa>
            bitIdx = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            byteIdx++;
 8004622:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004626:	3301      	adds	r3, #1
 8004628:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            coilData[byteIdx] = 0U;
 800462c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	e015      	b.n	8004666 <TbxMbServerFC01ReadCoils+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	79db      	ldrb	r3, [r3, #7]
 800463e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004642:	b2da      	uxtb	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004648:	7dfb      	ldrb	r3, [r7, #23]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d103      	bne.n	8004656 <TbxMbServerFC01ReadCoils+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	721a      	strb	r2, [r3, #8]
 8004654:	e002      	b.n	800465c <TbxMbServerFC01ReadCoils+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2204      	movs	r2, #4
 800465a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004664:	e006      	b.n	8004674 <TbxMbServerFC01ReadCoils+0x1b8>
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8004666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004668:	3301      	adds	r3, #1
 800466a:	847b      	strh	r3, [r7, #34]	; 0x22
 800466c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800466e:	8bfb      	ldrh	r3, [r7, #30]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3a4      	bcc.n	80045be <TbxMbServerFC01ReadCoils+0x102>
} /*** end of TbxMbServerFC01ReadCoils ***/
 8004674:	bf00      	nop
 8004676:	3728      	adds	r7, #40	; 0x28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	0800591c 	.word	0x0800591c

08004680 <TbxMbServerFC02ReadInputs>:
**
****************************************************************************************/
static void TbxMbServerFC02ReadInputs(tTbxMbServerCtx       * context,
                                      tTbxMbTpPacket  const * rxPacket,
                                      tTbxMbTpPacket        * txPacket)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	; 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <TbxMbServerFC02ReadInputs+0x1e>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <TbxMbServerFC02ReadInputs+0x1e>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <TbxMbServerFC02ReadInputs+0x28>
 800469e:	f240 21be 	movw	r1, #702	; 0x2be
 80046a2:	4867      	ldr	r0, [pc, #412]	; (8004840 <TbxMbServerFC02ReadInputs+0x1c0>)
 80046a4:	f7fe f83a 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80c4 	beq.w	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80c0 	beq.w	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 80bc 	beq.w	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3308      	adds	r3, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fcf7 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80046ca:	4603      	mov	r3, r0
 80046cc:	843b      	strh	r3, [r7, #32]
    uint16_t numInputs = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	330a      	adds	r3, #10
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fcf0 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80046d8:	4603      	mov	r3, r0
 80046da:	83fb      	strh	r3, [r7, #30]

    /* Check if a callback function was registered. */
    if (context->readInputFcn == NULL)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10e      	bne.n	8004702 <TbxMbServerFC02ReadInputs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	79db      	ldrb	r3, [r3, #7]
 80046e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004700:	e09a      	b.n	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
    else if ((numInputs < 1U) || (numInputs > 2000U))
 8004702:	8bfb      	ldrh	r3, [r7, #30]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <TbxMbServerFC02ReadInputs+0x90>
 8004708:	8bfb      	ldrh	r3, [r7, #30]
 800470a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800470e:	d90e      	bls.n	800472e <TbxMbServerFC02ReadInputs+0xae>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	79db      	ldrb	r3, [r3, #7]
 8004714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 800472c:	e084      	b.n	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
      uint8_t numBytes = (uint8_t)(numInputs / 8U);
 800472e:	8bfb      	ldrh	r3, [r7, #30]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	b29b      	uxth	r3, r3
 8004734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      if ((numInputs % 8U) != 0U)
 8004738:	8bfb      	ldrh	r3, [r7, #30]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <TbxMbServerFC02ReadInputs+0xce>
        numBytes++;
 8004744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004748:	3301      	adds	r3, #1
 800474a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      txPacket->pdu.data[0] = numBytes;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004754:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7a1b      	ldrb	r3, [r3, #8]
 800475a:	3301      	adds	r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t   bitIdx  = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      uint8_t   byteIdx = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t * inputData = &txPacket->pdu.data[1];
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3309      	adds	r3, #9
 8004774:	61bb      	str	r3, [r7, #24]
      inputData[0] = 0U;
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 800477c:	2300      	movs	r3, #0
 800477e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004780:	e056      	b.n	8004830 <TbxMbServerFC02ReadInputs+0x1b0>
        uint8_t            inputValue = TBX_OFF;
 8004782:	2300      	movs	r3, #0
 8004784:	75bb      	strb	r3, [r7, #22]
        srvResult = context->readInputFcn(context, startAddr + idx, &inputValue);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	8c39      	ldrh	r1, [r7, #32]
 800478c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800478e:	440a      	add	r2, r1
 8004790:	b291      	uxth	r1, r2
 8004792:	f107 0216 	add.w	r2, r7, #22
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	4798      	blx	r3
 800479a:	4603      	mov	r3, r0
 800479c:	75fb      	strb	r3, [r7, #23]
        if (srvResult == TBX_MB_SERVER_OK)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d12c      	bne.n	80047fe <TbxMbServerFC02ReadInputs+0x17e>
          if (inputValue != TBX_OFF)
 80047a4:	7dbb      	ldrb	r3, [r7, #22]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d011      	beq.n	80047ce <TbxMbServerFC02ReadInputs+0x14e>
            inputData[byteIdx] |= (1U << bitIdx);
 80047aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4413      	add	r3, r2
 80047b2:	7819      	ldrb	r1, [r3, #0]
 80047b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047b8:	2201      	movs	r2, #1
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047c4:	69b8      	ldr	r0, [r7, #24]
 80047c6:	4403      	add	r3, r0
 80047c8:	430a      	orrs	r2, r1
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
          bitIdx++;
 80047ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          if (bitIdx == 8U)
 80047d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d124      	bne.n	800482a <TbxMbServerFC02ReadInputs+0x1aa>
            bitIdx = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            byteIdx++;
 80047e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047ea:	3301      	adds	r3, #1
 80047ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            inputData[byteIdx] = 0U;
 80047f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
 80047fc:	e015      	b.n	800482a <TbxMbServerFC02ReadInputs+0x1aa>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	79db      	ldrb	r3, [r3, #7]
 8004802:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004806:	b2da      	uxtb	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d103      	bne.n	800481a <TbxMbServerFC02ReadInputs+0x19a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2202      	movs	r2, #2
 8004816:	721a      	strb	r2, [r3, #8]
 8004818:	e002      	b.n	8004820 <TbxMbServerFC02ReadInputs+0x1a0>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2204      	movs	r2, #4
 800481e:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004828:	e006      	b.n	8004838 <TbxMbServerFC02ReadInputs+0x1b8>
      for (uint16_t idx = 0U; idx < numInputs; idx++)
 800482a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800482c:	3301      	adds	r3, #1
 800482e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004830:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004832:	8bfb      	ldrh	r3, [r7, #30]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3a4      	bcc.n	8004782 <TbxMbServerFC02ReadInputs+0x102>
} /*** end of TbxMbServerFC02ReadInputs ***/
 8004838:	bf00      	nop
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	0800591c 	.word	0x0800591c

08004844 <TbxMbServerFC03ReadHoldingRegs>:
**
****************************************************************************************/
static void TbxMbServerFC03ReadHoldingRegs(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <TbxMbServerFC03ReadHoldingRegs+0x1e>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <TbxMbServerFC03ReadHoldingRegs+0x1e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <TbxMbServerFC03ReadHoldingRegs+0x28>
 8004862:	f240 3131 	movw	r1, #817	; 0x331
 8004866:	484a      	ldr	r0, [pc, #296]	; (8004990 <TbxMbServerFC03ReadHoldingRegs+0x14c>)
 8004868:	f7fd ff58 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8089 	beq.w	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	f000 8085 	beq.w	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8081 	beq.w	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3308      	adds	r3, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff fc15 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 800488e:	4603      	mov	r3, r0
 8004890:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	330a      	adds	r3, #10
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fc0e 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 800489c:	4603      	mov	r3, r0
 800489e:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readHoldingRegFcn == NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10e      	bne.n	80048c6 <TbxMbServerFC03ReadHoldingRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	79db      	ldrb	r3, [r3, #7]
 80048ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 80048c4:	e05f      	b.n	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <TbxMbServerFC03ReadHoldingRegs+0x8e>
 80048cc:	8b7b      	ldrh	r3, [r7, #26]
 80048ce:	2b7d      	cmp	r3, #125	; 0x7d
 80048d0:	d90e      	bls.n	80048f0 <TbxMbServerFC03ReadHoldingRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	79db      	ldrb	r3, [r3, #7]
 80048d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2203      	movs	r2, #3
 80048e4:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 80048ee:	e04a      	b.n	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 80048f0:	8b7b      	ldrh	r3, [r7, #26]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7a1b      	ldrb	r3, [r3, #8]
 8004900:	3301      	adds	r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800490a:	2300      	movs	r3, #0
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e035      	b.n	800497c <TbxMbServerFC03ReadHoldingRegs+0x138>
        uint16_t           regValue = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readHoldingRegFcn(context, startAddr + idx, &regValue);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	7ffa      	ldrb	r2, [r7, #31]
 800491a:	b291      	uxth	r1, r2
 800491c:	8bba      	ldrh	r2, [r7, #28]
 800491e:	440a      	add	r2, r1
 8004920:	b291      	uxth	r1, r2
 8004922:	f107 0216 	add.w	r2, r7, #22
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	4798      	blx	r3
 800492a:	4603      	mov	r3, r0
 800492c:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 800492e:	7e7b      	ldrb	r3, [r7, #25]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <TbxMbServerFC03ReadHoldingRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004934:	8af8      	ldrh	r0, [r7, #22]
 8004936:	7ffb      	ldrb	r3, [r7, #31]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	3301      	adds	r3, #1
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	3308      	adds	r3, #8
 8004942:	4619      	mov	r1, r3
 8004944:	f7ff fbcd 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004948:	7ffb      	ldrb	r3, [r7, #31]
 800494a:	3301      	adds	r3, #1
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e015      	b.n	800497c <TbxMbServerFC03ReadHoldingRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	79db      	ldrb	r3, [r3, #7]
 8004954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004958:	b2da      	uxtb	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 800495e:	7e7b      	ldrb	r3, [r7, #25]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d103      	bne.n	800496c <TbxMbServerFC03ReadHoldingRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2202      	movs	r2, #2
 8004968:	721a      	strb	r2, [r3, #8]
 800496a:	e002      	b.n	8004972 <TbxMbServerFC03ReadHoldingRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2204      	movs	r2, #4
 8004970:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 800497a:	e004      	b.n	8004986 <TbxMbServerFC03ReadHoldingRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	b29b      	uxth	r3, r3
 8004980:	8b7a      	ldrh	r2, [r7, #26]
 8004982:	429a      	cmp	r2, r3
 8004984:	d8c4      	bhi.n	8004910 <TbxMbServerFC03ReadHoldingRegs+0xcc>
} /*** end of TbxMbServerFC03ReadHoldingRegs ***/
 8004986:	bf00      	nop
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	0800591c 	.word	0x0800591c

08004994 <TbxMbServerFC04ReadInputRegs>:
**
****************************************************************************************/
static void TbxMbServerFC04ReadInputRegs(tTbxMbServerCtx       * context,
                                        tTbxMbTpPacket  const * rxPacket,
                                        tTbxMbTpPacket        * txPacket)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <TbxMbServerFC04ReadInputRegs+0x1e>
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <TbxMbServerFC04ReadInputRegs+0x1e>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d104      	bne.n	80049bc <TbxMbServerFC04ReadInputRegs+0x28>
 80049b2:	f240 3182 	movw	r1, #898	; 0x382
 80049b6:	484a      	ldr	r0, [pc, #296]	; (8004ae0 <TbxMbServerFC04ReadInputRegs+0x14c>)
 80049b8:	f7fd feb0 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8089 	beq.w	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f000 8085 	beq.w	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 8081 	beq.w	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	3308      	adds	r3, #8
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fb6d 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80049de:	4603      	mov	r3, r0
 80049e0:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	330a      	adds	r3, #10
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff fb66 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80049ec:	4603      	mov	r3, r0
 80049ee:	837b      	strh	r3, [r7, #26]

    /* Check if a callback function was registered. */
    if (context->readInputRegFcn == NULL)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10e      	bne.n	8004a16 <TbxMbServerFC04ReadInputRegs+0x82>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	79db      	ldrb	r3, [r3, #7]
 80049fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004a14:	e05f      	b.n	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
    else if ((numRegs < 1U) || (numRegs > 125U))
 8004a16:	8b7b      	ldrh	r3, [r7, #26]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <TbxMbServerFC04ReadInputRegs+0x8e>
 8004a1c:	8b7b      	ldrh	r3, [r7, #26]
 8004a1e:	2b7d      	cmp	r3, #125	; 0x7d
 8004a20:	d90e      	bls.n	8004a40 <TbxMbServerFC04ReadInputRegs+0xac>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	79db      	ldrb	r3, [r3, #7]
 8004a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2203      	movs	r2, #3
 8004a34:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004a3e:	e04a      	b.n	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
      txPacket->pdu.data[0] = 2U * numRegs;
 8004a40:	8b7b      	ldrh	r3, [r7, #26]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = txPacket->pdu.data[0] + 1U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7a1b      	ldrb	r3, [r3, #8]
 8004a50:	3301      	adds	r3, #1
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e035      	b.n	8004acc <TbxMbServerFC04ReadInputRegs+0x138>
        uint16_t           regValue = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	82fb      	strh	r3, [r7, #22]
        srvResult = context->readInputRegFcn(context, startAddr + idx, &regValue);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	7ffa      	ldrb	r2, [r7, #31]
 8004a6a:	b291      	uxth	r1, r2
 8004a6c:	8bba      	ldrh	r2, [r7, #28]
 8004a6e:	440a      	add	r2, r1
 8004a70:	b291      	uxth	r1, r2
 8004a72:	f107 0216 	add.w	r2, r7, #22
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	4798      	blx	r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	767b      	strb	r3, [r7, #25]
        if (srvResult == TBX_MB_SERVER_OK)
 8004a7e:	7e7b      	ldrb	r3, [r7, #25]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10d      	bne.n	8004aa0 <TbxMbServerFC04ReadInputRegs+0x10c>
          TbxMbCommonStoreUInt16BE(regValue, &txPacket->pdu.data[1U + (idx * 2U)]);
 8004a84:	8af8      	ldrh	r0, [r7, #22]
 8004a86:	7ffb      	ldrb	r3, [r7, #31]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3308      	adds	r3, #8
 8004a92:	4619      	mov	r1, r3
 8004a94:	f7ff fb25 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004a98:	7ffb      	ldrb	r3, [r7, #31]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	77fb      	strb	r3, [r7, #31]
 8004a9e:	e015      	b.n	8004acc <TbxMbServerFC04ReadInputRegs+0x138>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	79db      	ldrb	r3, [r3, #7]
 8004aa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004aae:	7e7b      	ldrb	r3, [r7, #25]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d103      	bne.n	8004abc <TbxMbServerFC04ReadInputRegs+0x128>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	721a      	strb	r2, [r3, #8]
 8004aba:	e002      	b.n	8004ac2 <TbxMbServerFC04ReadInputRegs+0x12e>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2204      	movs	r2, #4
 8004ac0:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004aca:	e004      	b.n	8004ad6 <TbxMbServerFC04ReadInputRegs+0x142>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8004acc:	7ffb      	ldrb	r3, [r7, #31]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8b7a      	ldrh	r2, [r7, #26]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d8c4      	bhi.n	8004a60 <TbxMbServerFC04ReadInputRegs+0xcc>
} /*** end of TbxMbServerFC04ReadInputRegs ***/
 8004ad6:	bf00      	nop
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	0800591c 	.word	0x0800591c

08004ae4 <TbxMbServerFC05WriteSingleCoil>:
**
****************************************************************************************/
static void TbxMbServerFC05WriteSingleCoil(tTbxMbServerCtx       * context,
                                           tTbxMbTpPacket  const * rxPacket,
                                           tTbxMbTpPacket        * txPacket)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <TbxMbServerFC05WriteSingleCoil+0x1e>
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <TbxMbServerFC05WriteSingleCoil+0x1e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d104      	bne.n	8004b0c <TbxMbServerFC05WriteSingleCoil+0x28>
 8004b02:	f240 31d3 	movw	r1, #979	; 0x3d3
 8004b06:	4841      	ldr	r0, [pc, #260]	; (8004c0c <TbxMbServerFC05WriteSingleCoil+0x128>)
 8004b08:	f7fd fe08 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d077      	beq.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d074      	beq.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d071      	beq.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	3308      	adds	r3, #8
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fac8 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	82fb      	strh	r3, [r7, #22]
    uint16_t outputValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	330a      	adds	r3, #10
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fac1 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004b36:	4603      	mov	r3, r0
 8004b38:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10e      	bne.n	8004b60 <TbxMbServerFC05WriteSingleCoil+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	79db      	ldrb	r3, [r3, #7]
 8004b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 8004b5e:	e050      	b.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
    else if ((outputValue != 0x0000U) && (outputValue != 0xFF00U))
 8004b60:	8abb      	ldrh	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d012      	beq.n	8004b8c <TbxMbServerFC05WriteSingleCoil+0xa8>
 8004b66:	8abb      	ldrh	r3, [r7, #20]
 8004b68:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8004b6c:	d00e      	beq.n	8004b8c <TbxMbServerFC05WriteSingleCoil+0xa8>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	79db      	ldrb	r3, [r3, #7]
 8004b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 8004b8a:	e03a      	b.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	7a1a      	ldrb	r2, [r3, #8]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	7a5a      	ldrb	r2, [r3, #9]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	7a9a      	ldrb	r2, [r3, #10]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	7ada      	ldrb	r2, [r3, #11]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t            coilValue = (outputValue == 0x0000U) ? TBX_OFF : TBX_ON;
 8004bb4:	8abb      	ldrh	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	74fb      	strb	r3, [r7, #19]
      srvResult = context->writeCoilFcn(context, startAddr, coilValue);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	7cfa      	ldrb	r2, [r7, #19]
 8004bc8:	8af9      	ldrh	r1, [r7, #22]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	4798      	blx	r3
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74bb      	strb	r3, [r7, #18]
      if (srvResult != TBX_MB_SERVER_OK)
 8004bd2:	7cbb      	ldrb	r3, [r7, #18]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d014      	beq.n	8004c02 <TbxMbServerFC05WriteSingleCoil+0x11e>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	79db      	ldrb	r3, [r3, #7]
 8004bdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004be6:	7cbb      	ldrb	r3, [r7, #18]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d103      	bne.n	8004bf4 <TbxMbServerFC05WriteSingleCoil+0x110>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	721a      	strb	r2, [r3, #8]
 8004bf2:	e002      	b.n	8004bfa <TbxMbServerFC05WriteSingleCoil+0x116>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC05WriteSingleCoil ***/
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	0800591c 	.word	0x0800591c

08004c10 <TbxMbServerFC06WriteSingleReg>:
**
****************************************************************************************/
static void TbxMbServerFC06WriteSingleReg(tTbxMbServerCtx       * context,
                                          tTbxMbTpPacket  const * rxPacket,
                                          tTbxMbTpPacket        * txPacket)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <TbxMbServerFC06WriteSingleReg+0x1e>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <TbxMbServerFC06WriteSingleReg+0x1e>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d104      	bne.n	8004c38 <TbxMbServerFC06WriteSingleReg+0x28>
 8004c2e:	f240 411b 	movw	r1, #1051	; 0x41b
 8004c32:	4832      	ldr	r0, [pc, #200]	; (8004cfc <TbxMbServerFC06WriteSingleReg+0xec>)
 8004c34:	f7fd fd72 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d05a      	beq.n	8004cf4 <TbxMbServerFC06WriteSingleReg+0xe4>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d057      	beq.n	8004cf4 <TbxMbServerFC06WriteSingleReg+0xe4>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d054      	beq.n	8004cf4 <TbxMbServerFC06WriteSingleReg+0xe4>
  {
    /* Read out request packet parameters. */
    uint16_t regAddr  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fa32 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004c54:	4603      	mov	r3, r0
 8004c56:	82fb      	strh	r3, [r7, #22]
    uint16_t regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	330a      	adds	r3, #10
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fa2b 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	82bb      	strh	r3, [r7, #20]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10e      	bne.n	8004c8c <TbxMbServerFC06WriteSingleReg+0x7c>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	79db      	ldrb	r3, [r3, #7]
 8004c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        }
        txPacket->dataLen = 1U;
      }
    }
  }
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 8004c8a:	e033      	b.n	8004cf4 <TbxMbServerFC06WriteSingleReg+0xe4>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	7a1a      	ldrb	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	7a5a      	ldrb	r2, [r3, #9]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	7a9a      	ldrb	r2, [r3, #10]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	7ada      	ldrb	r2, [r3, #11]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      srvResult = context->writeHoldingRegFcn(context, regAddr, regValue);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	8aba      	ldrh	r2, [r7, #20]
 8004cba:	8af9      	ldrh	r1, [r7, #22]
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	4798      	blx	r3
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	74fb      	strb	r3, [r7, #19]
      if (srvResult != TBX_MB_SERVER_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <TbxMbServerFC06WriteSingleReg+0xe4>
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	79db      	ldrb	r3, [r3, #7]
 8004cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	71da      	strb	r2, [r3, #7]
        if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8004cd8:	7cfb      	ldrb	r3, [r7, #19]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d103      	bne.n	8004ce6 <TbxMbServerFC06WriteSingleReg+0xd6>
          txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	721a      	strb	r2, [r3, #8]
 8004ce4:	e002      	b.n	8004cec <TbxMbServerFC06WriteSingleReg+0xdc>
          txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2204      	movs	r2, #4
 8004cea:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC06WriteSingleReg ***/
 8004cf4:	bf00      	nop
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	0800591c 	.word	0x0800591c

08004d00 <TbxMbServerFC08Diagnostics>:
**
****************************************************************************************/
static void TbxMbServerFC08Diagnostics(tTbxMbServerCtx       * context,
                                       tTbxMbTpPacket  const * rxPacket,
                                       tTbxMbTpPacket        * txPacket)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <TbxMbServerFC08Diagnostics+0x1e>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <TbxMbServerFC08Diagnostics+0x1e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d104      	bne.n	8004d28 <TbxMbServerFC08Diagnostics+0x28>
 8004d1e:	f240 415a 	movw	r1, #1114	; 0x45a
 8004d22:	48a2      	ldr	r0, [pc, #648]	; (8004fac <TbxMbServerFC08Diagnostics+0x2ac>)
 8004d24:	f7fd fcfa 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 813a 	beq.w	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8136 	beq.w	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8132 	beq.w	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
  {
    /* Read out request packet parameters. */
    uint16_t subCode   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	3308      	adds	r3, #8
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff f9b7 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	82bb      	strh	r3, [r7, #20]
    uint16_t dataField = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	330a      	adds	r3, #10
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff f9b0 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	827b      	strh	r3, [r7, #18]
    /* Prepare the most common response. It's typically the sub-function code echoed,
     * together with a 16-bit unsigned value.
     */
    txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	7a1a      	ldrb	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	721a      	strb	r2, [r3, #8]
    txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	7a5a      	ldrb	r2, [r3, #9]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	725a      	strb	r2, [r3, #9]
    txPacket->dataLen = 4U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

    /* Filter on the received sub-function code. */
    switch (subCode)
 8004d74:	8abb      	ldrh	r3, [r7, #20]
 8004d76:	2b0f      	cmp	r3, #15
 8004d78:	f200 8105 	bhi.w	8004f86 <TbxMbServerFC08Diagnostics+0x286>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <TbxMbServerFC08Diagnostics+0x84>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004dc5 	.word	0x08004dc5
 8004d88:	08004f87 	.word	0x08004f87
 8004d8c:	08004f87 	.word	0x08004f87
 8004d90:	08004f87 	.word	0x08004f87
 8004d94:	08004f87 	.word	0x08004f87
 8004d98:	08004f87 	.word	0x08004f87
 8004d9c:	08004f87 	.word	0x08004f87
 8004da0:	08004f87 	.word	0x08004f87
 8004da4:	08004f87 	.word	0x08004f87
 8004da8:	08004f87 	.word	0x08004f87
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004e65 	.word	0x08004e65
 8004db4:	08004e9f 	.word	0x08004e9f
 8004db8:	08004ed9 	.word	0x08004ed9
 8004dbc:	08004f13 	.word	0x08004f13
 8004dc0:	08004f4d 	.word	0x08004f4d
    {
      case TBX_MB_DIAG_SC_QUERY_DATA:
      {
        /* Echo the received data back. */
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	75fb      	strb	r3, [r7, #23]
 8004dc8:	e00b      	b.n	8004de2 <TbxMbServerFC08Diagnostics+0xe2>
        {
         txPacket->pdu.data[idx] = rxPacket->pdu.data[idx];
 8004dca:	7dfa      	ldrb	r2, [r7, #23]
 8004dcc:	7dfb      	ldrb	r3, [r7, #23]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	7a11      	ldrb	r1, [r2, #8]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	460a      	mov	r2, r1
 8004dda:	721a      	strb	r2, [r3, #8]
        for (uint8_t idx = 0U; idx < rxPacket->dataLen; idx++)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	3301      	adds	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8004de8:	7dfa      	ldrb	r2, [r7, #23]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3ed      	bcc.n	8004dca <TbxMbServerFC08Diagnostics+0xca>
        }
        txPacket->dataLen = rxPacket->dataLen;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      }
      break;
 8004dfa:	e0d3      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_CLEAR_COUNTERS:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00e      	beq.n	8004e20 <TbxMbServerFC08Diagnostics+0x120>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	79db      	ldrb	r3, [r3, #7]
 8004e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2203      	movs	r2, #3
 8004e14:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
          /* Echo the request data field. */
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004e1e:	e0c1      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          context->tpCtx->diagInfo.busMsgCnt     = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8a3 2238 	strh.w	r2, [r3, #568]	; 0x238
          context->tpCtx->diagInfo.busCommErrCnt = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
          context->tpCtx->diagInfo.busExcpErrCnt = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
          context->tpCtx->diagInfo.srvMsgCnt     = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 223e 	strh.w	r2, [r3, #574]	; 0x23e
          context->tpCtx->diagInfo.srvNoRespCnt  = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 2240 	strh.w	r2, [r3, #576]	; 0x240
          TbxMbCommonStoreUInt16BE(dataField, &txPacket->pdu.data[2U]);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f103 020a 	add.w	r2, r3, #10
 8004e58:	8a7b      	ldrh	r3, [r7, #18]
 8004e5a:	4611      	mov	r1, r2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff f940 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004e62:	e09f      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004e64:	8a7b      	ldrh	r3, [r7, #18]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <TbxMbServerFC08Diagnostics+0x188>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	79db      	ldrb	r3, [r3, #7]
 8004e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004e86:	e08d      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busMsgCnt, 
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f8b3 2238 	ldrh.w	r2, [r3, #568]	; 0x238
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	330a      	adds	r3, #10
 8004e94:	4619      	mov	r1, r3
 8004e96:	4610      	mov	r0, r2
 8004e98:	f7ff f923 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004e9c:	e082      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_COMM_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004e9e:	8a7b      	ldrh	r3, [r7, #18]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00e      	beq.n	8004ec2 <TbxMbServerFC08Diagnostics+0x1c2>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	79db      	ldrb	r3, [r3, #7]
 8004ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004ec0:	e070      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busCommErrCnt, 
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f8b3 223a 	ldrh.w	r2, [r3, #570]	; 0x23a
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	330a      	adds	r3, #10
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	f7ff f906 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004ed6:	e065      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_BUS_EXCEPTION_ERROR_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004ed8:	8a7b      	ldrh	r3, [r7, #18]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <TbxMbServerFC08Diagnostics+0x1fc>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	79db      	ldrb	r3, [r3, #7]
 8004ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2203      	movs	r2, #3
 8004ef0:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004efa:	e053      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.busExcpErrCnt, 
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f8b3 223c 	ldrh.w	r2, [r3, #572]	; 0x23c
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	330a      	adds	r3, #10
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7ff f8e9 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004f10:	e048      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_SERVER_MESSAGE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004f12:	8a7b      	ldrh	r3, [r7, #18]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00e      	beq.n	8004f36 <TbxMbServerFC08Diagnostics+0x236>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	79db      	ldrb	r3, [r3, #7]
 8004f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2203      	movs	r2, #3
 8004f2a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004f34:	e036      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvMsgCnt, 
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f8b3 223e 	ldrh.w	r2, [r3, #574]	; 0x23e
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	330a      	adds	r3, #10
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7ff f8cc 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004f4a:	e02b      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      case TBX_MB_DIAG_SC_SERVER_NO_RESPONSE_COUNT:
      {
        /* Data field not valid? */
        if (dataField != 0x0000U)
 8004f4c:	8a7b      	ldrh	r3, [r7, #18]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <TbxMbServerFC08Diagnostics+0x270>
        {
          /* Prepare exception response. */
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	79db      	ldrb	r3, [r3, #7]
 8004f56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	71da      	strb	r2, [r3, #7]
          txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2203      	movs	r2, #3
 8004f64:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          /* Store he bus message count. */
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
                                   &txPacket->pdu.data[2U]);
        }
      }
      break;
 8004f6e:	e019      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>
          TbxMbCommonStoreUInt16BE(context->tpCtx->diagInfo.srvNoRespCnt, 
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	f8b3 2240 	ldrh.w	r2, [r3, #576]	; 0x240
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	330a      	adds	r3, #10
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7ff f8af 	bl	80040e2 <TbxMbCommonStoreUInt16BE>
      break;
 8004f84:	e00e      	b.n	8004fa4 <TbxMbServerFC08Diagnostics+0x2a4>

      default:
      {
        /* Unsupported sub-function code. Prepare exception response. */
        txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	79db      	ldrb	r3, [r3, #7]
 8004f8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	71da      	strb	r2, [r3, #7]
        txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	721a      	strb	r2, [r3, #8]
        txPacket->dataLen = 1U;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      }
      break;
 8004fa2:	bf00      	nop
    }
  }
} /*** end of TbxMbServerFC08Diagnostics ***/
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	0800591c 	.word	0x0800591c

08004fb0 <TbxMbServerFC15WriteMultipleCoils>:
**
****************************************************************************************/
static void TbxMbServerFC15WriteMultipleCoils(tTbxMbServerCtx       * context,
                                              tTbxMbTpPacket  const * rxPacket,
                                              tTbxMbTpPacket        * txPacket)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <TbxMbServerFC15WriteMultipleCoils+0x1e>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <TbxMbServerFC15WriteMultipleCoils+0x1e>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <TbxMbServerFC15WriteMultipleCoils+0x28>
 8004fce:	f240 510f 	movw	r1, #1295	; 0x50f
 8004fd2:	486f      	ldr	r0, [pc, #444]	; (8005190 <TbxMbServerFC15WriteMultipleCoils+0x1e0>)
 8004fd4:	f7fd fba2 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80d4 	beq.w	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 80d0 	beq.w	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 80cc 	beq.w	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	3308      	adds	r3, #8
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff f85f 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	83fb      	strh	r3, [r7, #30]
    uint16_t numCoils  = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	330a      	adds	r3, #10
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff f858 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8005008:	4603      	mov	r3, r0
 800500a:	83bb      	strh	r3, [r7, #28]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	7b1b      	ldrb	r3, [r3, #12]
 8005010:	76fb      	strb	r3, [r7, #27]
    /* Determine the number of bytes needed to hold all the coil bits. Make it U16 
     * because the range validity of numCoils is not yet checked.
     */
    uint16_t numBytes = (uint16_t)(numCoils / 8U);
 8005012:	8bbb      	ldrh	r3, [r7, #28]
 8005014:	08db      	lsrs	r3, r3, #3
 8005016:	84fb      	strh	r3, [r7, #38]	; 0x26
    if ((numCoils % 8U) != 0U)
 8005018:	8bbb      	ldrh	r3, [r7, #28]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	b29b      	uxth	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <TbxMbServerFC15WriteMultipleCoils+0x7a>
    {
      numBytes++;
 8005024:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005026:	3301      	adds	r3, #1
 8005028:	84fb      	strh	r3, [r7, #38]	; 0x26
    }
    /* Check if a callback function was registered. */
    if (context->writeCoilFcn == NULL)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10e      	bne.n	8005050 <TbxMbServerFC15WriteMultipleCoils+0xa0>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	79db      	ldrb	r3, [r3, #7]
 8005036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800503a:	b2da      	uxtb	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          byteIdx++;
        }
      }
    }
  }
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 800504e:	e09b      	b.n	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (((numCoils < 1U) || (numCoils > 1968U)))
 8005050:	8bbb      	ldrh	r3, [r7, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <TbxMbServerFC15WriteMultipleCoils+0xae>
 8005056:	8bbb      	ldrh	r3, [r7, #28]
 8005058:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 800505c:	d90e      	bls.n	800507c <TbxMbServerFC15WriteMultipleCoils+0xcc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	79db      	ldrb	r3, [r3, #7]
 8005062:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005066:	b2da      	uxtb	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2203      	movs	r2, #3
 8005070:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 800507a:	e085      	b.n	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
    else if (numBytes != byteCnt)
 800507c:	7efb      	ldrb	r3, [r7, #27]
 800507e:	b29b      	uxth	r3, r3
 8005080:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005082:	429a      	cmp	r2, r3
 8005084:	d00e      	beq.n	80050a4 <TbxMbServerFC15WriteMultipleCoils+0xf4>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	79db      	ldrb	r3, [r3, #7]
 800508a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800508e:	b2da      	uxtb	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2203      	movs	r2, #3
 8005098:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 80050a2:	e071      	b.n	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	7a1a      	ldrb	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	7a5a      	ldrb	r2, [r3, #9]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	7a9a      	ldrb	r2, [r3, #10]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	7ada      	ldrb	r2, [r3, #11]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2204      	movs	r2, #4
 80050c8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      uint8_t         bitIdx  = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      uint8_t         byteIdx = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      uint8_t const * coilData = &rxPacket->pdu.data[5];
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	330d      	adds	r3, #13
 80050dc:	617b      	str	r3, [r7, #20]
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 80050de:	2300      	movs	r3, #0
 80050e0:	847b      	strh	r3, [r7, #34]	; 0x22
 80050e2:	e04c      	b.n	800517e <TbxMbServerFC15WriteMultipleCoils+0x1ce>
        uint8_t            coilValue = TBX_OFF;
 80050e4:	2300      	movs	r3, #0
 80050e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if ((coilData[byteIdx] & (1U << bitIdx)) != 0U)
 80050ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	461a      	mov	r2, r3
 80050f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80050fa:	fa22 f303 	lsr.w	r3, r2, r3
 80050fe:	f003 0301 	and.w	r3, r3, #1
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <TbxMbServerFC15WriteMultipleCoils+0x15c>
          coilValue = TBX_ON;
 8005106:	2301      	movs	r3, #1
 8005108:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        srvResult = context->writeCoilFcn(context, startAddr + idx, coilValue);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	8bf9      	ldrh	r1, [r7, #30]
 8005112:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005114:	440a      	add	r2, r1
 8005116:	b291      	uxth	r1, r2
 8005118:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	4798      	blx	r3
 8005120:	4603      	mov	r3, r0
 8005122:	74fb      	strb	r3, [r7, #19]
        if (srvResult != TBX_MB_SERVER_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d015      	beq.n	8005156 <TbxMbServerFC15WriteMultipleCoils+0x1a6>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	79db      	ldrb	r3, [r3, #7]
 800512e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005132:	b2da      	uxtb	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 8005138:	7cfb      	ldrb	r3, [r7, #19]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d103      	bne.n	8005146 <TbxMbServerFC15WriteMultipleCoils+0x196>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2202      	movs	r2, #2
 8005142:	721a      	strb	r2, [r3, #8]
 8005144:	e002      	b.n	800514c <TbxMbServerFC15WriteMultipleCoils+0x19c>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
 8005154:	e018      	b.n	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
        bitIdx++;
 8005156:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800515a:	3301      	adds	r3, #1
 800515c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (bitIdx == 8U)
 8005160:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005164:	2b08      	cmp	r3, #8
 8005166:	d107      	bne.n	8005178 <TbxMbServerFC15WriteMultipleCoils+0x1c8>
          bitIdx = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
          byteIdx++;
 800516e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005172:	3301      	adds	r3, #1
 8005174:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      for (uint16_t idx = 0U; idx < numCoils; idx++)
 8005178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800517a:	3301      	adds	r3, #1
 800517c:	847b      	strh	r3, [r7, #34]	; 0x22
 800517e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005180:	8bbb      	ldrh	r3, [r7, #28]
 8005182:	429a      	cmp	r2, r3
 8005184:	d3ae      	bcc.n	80050e4 <TbxMbServerFC15WriteMultipleCoils+0x134>
} /*** end of TbxMbServerFC15WriteMultipleCoils ***/
 8005186:	e7ff      	b.n	8005188 <TbxMbServerFC15WriteMultipleCoils+0x1d8>
 8005188:	bf00      	nop
 800518a:	3728      	adds	r7, #40	; 0x28
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	0800591c 	.word	0x0800591c

08005194 <TbxMbServerFC16WriteMultipleRegs>:
**
****************************************************************************************/
static void TbxMbServerFC16WriteMultipleRegs(tTbxMbServerCtx       * context,
                                             tTbxMbTpPacket  const * rxPacket,
                                             tTbxMbTpPacket        * txPacket)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((context != NULL) && (rxPacket != NULL) && (txPacket != NULL));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <TbxMbServerFC16WriteMultipleRegs+0x1e>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <TbxMbServerFC16WriteMultipleRegs+0x1e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d104      	bne.n	80051bc <TbxMbServerFC16WriteMultipleRegs+0x28>
 80051b2:	f240 5181 	movw	r1, #1409	; 0x581
 80051b6:	4850      	ldr	r0, [pc, #320]	; (80052f8 <TbxMbServerFC16WriteMultipleRegs+0x164>)
 80051b8:	f7fd fab0 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if ((context != NULL) && (rxPacket != NULL) && (txPacket != NULL))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8096 	beq.w	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 8092 	beq.w	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 808e 	beq.w	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
  {
    /* Read out request packet parameters. */
    uint16_t startAddr = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[0]);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	3308      	adds	r3, #8
 80051d8:	4618      	mov	r0, r3
 80051da:	f7fe ff6d 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80051de:	4603      	mov	r3, r0
 80051e0:	83bb      	strh	r3, [r7, #28]
    uint16_t numRegs   = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[2]);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	330a      	adds	r3, #10
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fe ff66 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 80051ec:	4603      	mov	r3, r0
 80051ee:	837b      	strh	r3, [r7, #26]
    uint8_t  byteCnt   = rxPacket->pdu.data[4];
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	7b1b      	ldrb	r3, [r3, #12]
 80051f4:	767b      	strb	r3, [r7, #25]

    /* Check if a callback function was registered. */
    if (context->writeHoldingRegFcn == NULL)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10e      	bne.n	800521c <TbxMbServerFC16WriteMultipleRegs+0x88>
    {
      /* Prepare exception response. */
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	79db      	ldrb	r3, [r3, #7]
 8005202:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005206:	b2da      	uxtb	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC01_ILLEGAL_FUNCTION;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
        }
      }
    }
  }
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 800521a:	e069      	b.n	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
    else if (((numRegs < 1U) || (numRegs > 123U)) || (byteCnt != (numRegs * 2U)))
 800521c:	8b7b      	ldrh	r3, [r7, #26]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d007      	beq.n	8005232 <TbxMbServerFC16WriteMultipleRegs+0x9e>
 8005222:	8b7b      	ldrh	r3, [r7, #26]
 8005224:	2b7b      	cmp	r3, #123	; 0x7b
 8005226:	d804      	bhi.n	8005232 <TbxMbServerFC16WriteMultipleRegs+0x9e>
 8005228:	7e7a      	ldrb	r2, [r7, #25]
 800522a:	8b7b      	ldrh	r3, [r7, #26]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	429a      	cmp	r2, r3
 8005230:	d00e      	beq.n	8005250 <TbxMbServerFC16WriteMultipleRegs+0xbc>
      txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	79db      	ldrb	r3, [r3, #7]
 8005236:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800523a:	b2da      	uxtb	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	71da      	strb	r2, [r3, #7]
      txPacket->pdu.data[0] = TBX_MB_EC03_ILLEGAL_DATA_VALUE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2203      	movs	r2, #3
 8005244:	721a      	strb	r2, [r3, #8]
      txPacket->dataLen = 1U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
 800524e:	e04f      	b.n	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
      txPacket->pdu.data[0U] = rxPacket->pdu.data[0U];
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	7a1a      	ldrb	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	721a      	strb	r2, [r3, #8]
      txPacket->pdu.data[1U] = rxPacket->pdu.data[1U];
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	7a5a      	ldrb	r2, [r3, #9]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	725a      	strb	r2, [r3, #9]
      txPacket->pdu.data[2U] = rxPacket->pdu.data[2U];
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	7a9a      	ldrb	r2, [r3, #10]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	729a      	strb	r2, [r3, #10]
      txPacket->pdu.data[3U] = rxPacket->pdu.data[3U];
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	7ada      	ldrb	r2, [r3, #11]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	72da      	strb	r2, [r3, #11]
      txPacket->dataLen = 4U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 8005278:	2300      	movs	r3, #0
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e032      	b.n	80052e4 <TbxMbServerFC16WriteMultipleRegs+0x150>
        regValue = TbxMbCommonExtractUInt16BE(&rxPacket->pdu.data[5U + (idx * 2U)]);
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	3305      	adds	r3, #5
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	4413      	add	r3, r2
 8005288:	3308      	adds	r3, #8
 800528a:	4618      	mov	r0, r3
 800528c:	f7fe ff14 	bl	80040b8 <TbxMbCommonExtractUInt16BE>
 8005290:	4603      	mov	r3, r0
 8005292:	82fb      	strh	r3, [r7, #22]
        srvResult = context->writeHoldingRegFcn(context, startAddr + idx, regValue);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	7ffa      	ldrb	r2, [r7, #31]
 800529a:	b291      	uxth	r1, r2
 800529c:	8bba      	ldrh	r2, [r7, #28]
 800529e:	440a      	add	r2, r1
 80052a0:	b291      	uxth	r1, r2
 80052a2:	8afa      	ldrh	r2, [r7, #22]
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	4798      	blx	r3
 80052a8:	4603      	mov	r3, r0
 80052aa:	757b      	strb	r3, [r7, #21]
        if (srvResult != TBX_MB_SERVER_OK)
 80052ac:	7d7b      	ldrb	r3, [r7, #21]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d015      	beq.n	80052de <TbxMbServerFC16WriteMultipleRegs+0x14a>
          txPacket->pdu.code |= TBX_MB_FC_EXCEPTION_MASK;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	79db      	ldrb	r3, [r3, #7]
 80052b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	71da      	strb	r2, [r3, #7]
          if (srvResult == TBX_MB_SERVER_ERR_ILLEGAL_DATA_ADDR)
 80052c0:	7d7b      	ldrb	r3, [r7, #21]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d103      	bne.n	80052ce <TbxMbServerFC16WriteMultipleRegs+0x13a>
            txPacket->pdu.data[0] = TBX_MB_EC02_ILLEGAL_DATA_ADDRESS;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	721a      	strb	r2, [r3, #8]
 80052cc:	e002      	b.n	80052d4 <TbxMbServerFC16WriteMultipleRegs+0x140>
            txPacket->pdu.data[0] = TBX_MB_EC04_SERVER_DEVICE_FAILURE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2204      	movs	r2, #4
 80052d2:	721a      	strb	r2, [r3, #8]
          txPacket->dataLen = 1U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
          break;
 80052dc:	e008      	b.n	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
      for (uint8_t idx = 0U; idx < numRegs; idx++)
 80052de:	7ffb      	ldrb	r3, [r7, #31]
 80052e0:	3301      	adds	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	7ffb      	ldrb	r3, [r7, #31]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	8b7a      	ldrh	r2, [r7, #26]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d8c7      	bhi.n	800527e <TbxMbServerFC16WriteMultipleRegs+0xea>
} /*** end of TbxMbServerFC16WriteMultipleRegs ***/
 80052ee:	e7ff      	b.n	80052f0 <TbxMbServerFC16WriteMultipleRegs+0x15c>
 80052f0:	bf00      	nop
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	0800591c 	.word	0x0800591c

080052fc <TbxMbOsalEventInit>:
** \brief     Initialization function for the OSAL module. 
** \attention This function has a built-in protection to make sure it only runs once.
**
****************************************************************************************/
void TbxMbOsalEventInit(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  static uint8_t osalInitialized = TBX_FALSE;

  /* Only run this function once, */
  if (osalInitialized == TBX_FALSE)
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <TbxMbOsalEventInit+0x34>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10e      	bne.n	8005326 <TbxMbOsalEventInit+0x2a>
  {
    osalInitialized = TBX_TRUE;
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <TbxMbOsalEventInit+0x34>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
    /* Initialize the queue. */
    eventQueue.count = 0U;
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <TbxMbOsalEventInit+0x38>)
 8005310:	2200      	movs	r2, #0
 8005312:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
    eventQueue.readIdx = 0U;
 8005316:	4b07      	ldr	r3, [pc, #28]	; (8005334 <TbxMbOsalEventInit+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
    eventQueue.writeIdx = 0U;
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <TbxMbOsalEventInit+0x38>)
 8005320:	2200      	movs	r2, #0
 8005322:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  }
} /*** end of TbxMbOsalEventInit ***/
 8005326:	bf00      	nop
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr
 8005330:	20000a0c 	.word	0x20000a0c
 8005334:	20000904 	.word	0x20000904

08005338 <TbxMbOsalEventPost>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalEventPost(tTbxMbEvent const * event, 
                        uint8_t             fromIsr)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	460b      	mov	r3, r1
 8005342:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d103      	bne.n	8005352 <TbxMbOsalEventPost+0x1a>
 800534a:	216b      	movs	r1, #107	; 0x6b
 800534c:	4820      	ldr	r0, [pc, #128]	; (80053d0 <TbxMbOsalEventPost+0x98>)
 800534e:	f7fd f9e5 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d036      	beq.n	80053c6 <TbxMbOsalEventPost+0x8e>
  {
    TbxCriticalSectionEnter();
 8005358:	f7fd f9f6 	bl	8002748 <TbxCriticalSectionEnter>
    /* Make sure there is still space in the queue. If not, then the event queue size is
     * set too small. In this case increase the event queue size using configuration
     * macro TBX_MB_EVENT_QUEUE_SIZE.
     */
    TBX_ASSERT(eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE);
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 800535e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8005362:	2b1f      	cmp	r3, #31
 8005364:	d903      	bls.n	800536e <TbxMbOsalEventPost+0x36>
 8005366:	2175      	movs	r1, #117	; 0x75
 8005368:	4819      	ldr	r0, [pc, #100]	; (80053d0 <TbxMbOsalEventPost+0x98>)
 800536a:	f7fd f9d7 	bl	800271c <TbxAssertTrigger>

    /* Only continue with enough space. */
    if (eventQueue.count < TBX_MB_EVENT_QUEUE_SIZE)
 800536e:	4b19      	ldr	r3, [pc, #100]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 8005370:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8005374:	2b1f      	cmp	r3, #31
 8005376:	d824      	bhi.n	80053c2 <TbxMbOsalEventPost+0x8a>
    {
      /* Store the new event in the queue at the current write index. */
      eventQueue.entries[eventQueue.writeIdx] = *event;
 8005378:	4b16      	ldr	r3, [pc, #88]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 800537a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	4413      	add	r3, r2
 8005386:	460a      	mov	r2, r1
 8005388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800538c:	e883 0003 	stmia.w	r3, {r0, r1}
      /* Update the total count. */
      eventQueue.count++;
 8005390:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 8005392:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8005396:	3301      	adds	r3, #1
 8005398:	b29a      	uxth	r2, r3
 800539a:	4b0e      	ldr	r3, [pc, #56]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 800539c:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      /* Increment the write index to point to the next entry. */
      eventQueue.writeIdx++;
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 80053a2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80053a6:	3301      	adds	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 80053ac:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      /* Time to wrap around to the start? */
      if (eventQueue.writeIdx == TBX_MB_EVENT_QUEUE_SIZE)
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 80053b2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d103      	bne.n	80053c2 <TbxMbOsalEventPost+0x8a>
      {
        eventQueue.writeIdx = 0U;
 80053ba:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <TbxMbOsalEventPost+0x9c>)
 80053bc:	2200      	movs	r2, #0
 80053be:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
      }
    }
    TbxCriticalSectionExit();
 80053c2:	f7fd f9db 	bl	800277c <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalEventPost ***/
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	08005948 	.word	0x08005948
 80053d4:	20000904 	.word	0x20000904

080053d8 <TbxMbOsalEventWait>:
** \return    TBX_TRUE if an event occurred, TBX_FALSE otherwise (typically a timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalEventWait(tTbxMbEvent * event,
                           uint16_t      timeoutMs)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 80053e4:	2300      	movs	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]

  TBX_UNUSED_ARG(timeoutMs);

  /* Verify parameters. */
  TBX_ASSERT(event != NULL);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <TbxMbOsalEventWait+0x1e>
 80053ee:	219b      	movs	r1, #155	; 0x9b
 80053f0:	481d      	ldr	r0, [pc, #116]	; (8005468 <TbxMbOsalEventWait+0x90>)
 80053f2:	f7fd f993 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (event != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d02f      	beq.n	800545c <TbxMbOsalEventWait+0x84>
  {
    TbxCriticalSectionEnter();
 80053fc:	f7fd f9a4 	bl	8002748 <TbxCriticalSectionEnter>
    /* Is there an event available in the queue? */
    if (eventQueue.count > 0U)
 8005400:	4b1a      	ldr	r3, [pc, #104]	; (800546c <TbxMbOsalEventWait+0x94>)
 8005402:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d026      	beq.n	8005458 <TbxMbOsalEventWait+0x80>
    {
      /* Retrieve the event from the queue at the read index (oldest).  */
      *event = eventQueue.entries[eventQueue.readIdx];
 800540a:	4b18      	ldr	r3, [pc, #96]	; (800546c <TbxMbOsalEventWait+0x94>)
 800540c:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4a16      	ldr	r2, [pc, #88]	; (800546c <TbxMbOsalEventWait+0x94>)
 8005414:	460c      	mov	r4, r1
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	4413      	add	r3, r2
 800541a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800541e:	e884 0003 	stmia.w	r4, {r0, r1}
      /* Update the total count. */
      eventQueue.count--;
 8005422:	4b12      	ldr	r3, [pc, #72]	; (800546c <TbxMbOsalEventWait+0x94>)
 8005424:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <TbxMbOsalEventWait+0x94>)
 800542e:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
      /* Increment the read index to point to the next entry. */
      eventQueue.readIdx++;
 8005432:	4b0e      	ldr	r3, [pc, #56]	; (800546c <TbxMbOsalEventWait+0x94>)
 8005434:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8005438:	3301      	adds	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <TbxMbOsalEventWait+0x94>)
 800543e:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      /* Time to wrap around to the start? */
      if (eventQueue.readIdx == TBX_MB_EVENT_QUEUE_SIZE)
 8005442:	4b0a      	ldr	r3, [pc, #40]	; (800546c <TbxMbOsalEventWait+0x94>)
 8005444:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8005448:	2b20      	cmp	r3, #32
 800544a:	d103      	bne.n	8005454 <TbxMbOsalEventWait+0x7c>
      {
        eventQueue.readIdx = 0U;
 800544c:	4b07      	ldr	r3, [pc, #28]	; (800546c <TbxMbOsalEventWait+0x94>)
 800544e:	2200      	movs	r2, #0
 8005450:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
      }
      /* Update the result. */
      result = TBX_TRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
    }
    TbxCriticalSectionExit();
 8005458:	f7fd f990 	bl	800277c <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbOsalEventWait ***/
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	bf00      	nop
 8005468:	08005948 	.word	0x08005948
 800546c:	20000904 	.word	0x20000904

08005470 <TbxMbOsalSemCreate>:
** \return    Handle to the newly created binary semaphore object if successful, NULL
**            otherwise.
**
****************************************************************************************/
tTbxMbOsalSem TbxMbOsalSemCreate(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  tTbxMbOsalSem result = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	607b      	str	r3, [r7, #4]

  /* Allocate memory for the new semaphore context. */
  tTbxMbOsalSemCtx * newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));
 800547a:	2002      	movs	r0, #2
 800547c:	f7fd fcc2 	bl	8002e04 <TbxMemPoolAllocate>
 8005480:	6038      	str	r0, [r7, #0]
  /* Automatically increase the memory pool, if it was too small. */
  if (newSemCtx == NULL)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d107      	bne.n	8005498 <TbxMbOsalSemCreate+0x28>
  {
    /* No need to check the return value, because if it failed, the following
     * allocation fails too, which is verified later on.
     */
    (void)TbxMemPoolCreate(1U, sizeof(tTbxMbOsalSemCtx));
 8005488:	2102      	movs	r1, #2
 800548a:	2001      	movs	r0, #1
 800548c:	f7fd fc18 	bl	8002cc0 <TbxMemPoolCreate>
    newSemCtx = TbxMemPoolAllocate(sizeof(tTbxMbOsalSemCtx));      
 8005490:	2002      	movs	r0, #2
 8005492:	f7fd fcb7 	bl	8002e04 <TbxMemPoolAllocate>
 8005496:	6038      	str	r0, [r7, #0]
  }
  /* Verify memory allocation of the semaphore context. */
  TBX_ASSERT(newSemCtx != NULL);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <TbxMbOsalSemCreate+0x36>
 800549e:	21d0      	movs	r1, #208	; 0xd0
 80054a0:	4809      	ldr	r0, [pc, #36]	; (80054c8 <TbxMbOsalSemCreate+0x58>)
 80054a2:	f7fd f93b 	bl	800271c <TbxAssertTrigger>
  /* Only continue if the memory allocation succeeded. */
  if (newSemCtx != NULL)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d007      	beq.n	80054bc <TbxMbOsalSemCreate+0x4c>
  {
    /* Initialize the semaphore in a taken state. */
    newSemCtx->type = TBX_MB_OSAL_SEM_CONTEXT_TYPE;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	224c      	movs	r2, #76	; 0x4c
 80054b0:	701a      	strb	r2, [r3, #0]
    newSemCtx->count = 0U;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	705a      	strb	r2, [r3, #1]
    /* Update the result. */
    result = newSemCtx;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	607b      	str	r3, [r7, #4]
  }
  /* Give the result back to the caller. */
  return result;
 80054bc:	687b      	ldr	r3, [r7, #4]
} /*** end of TbxMbOsalSemCreate ***/
 80054be:	4618      	mov	r0, r3
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08005948 	.word	0x08005948

080054cc <TbxMbOsalSemGive>:
**            routine, TBX_FALSE otherwise.
**
****************************************************************************************/
void TbxMbOsalSemGive(tTbxMbOsalSem sem,
                      uint8_t       fromIsr)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	70fb      	strb	r3, [r7, #3]
  TBX_UNUSED_ARG(fromIsr);

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <TbxMbOsalSemGive+0x1c>
 80054de:	f44f 7182 	mov.w	r1, #260	; 0x104
 80054e2:	480e      	ldr	r0, [pc, #56]	; (800551c <TbxMbOsalSemGive+0x50>)
 80054e4:	f7fd f91a 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d011      	beq.n	8005512 <TbxMbOsalSemGive+0x46>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	60fb      	str	r3, [r7, #12]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b4c      	cmp	r3, #76	; 0x4c
 80054f8:	d004      	beq.n	8005504 <TbxMbOsalSemGive+0x38>
 80054fa:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80054fe:	4807      	ldr	r0, [pc, #28]	; (800551c <TbxMbOsalSemGive+0x50>)
 8005500:	f7fd f90c 	bl	800271c <TbxAssertTrigger>
    /* Give the semaphore by setting its count to 1. */
    TbxCriticalSectionEnter();
 8005504:	f7fd f920 	bl	8002748 <TbxCriticalSectionEnter>
    semCtx->count = 1U;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	705a      	strb	r2, [r3, #1]
    TbxCriticalSectionExit();
 800550e:	f7fd f935 	bl	800277c <TbxCriticalSectionExit>
  }
} /*** end of TbxMbOsalSemGive ***/
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	08005948 	.word	0x08005948

08005520 <TbxMbOsalSemTake>:
**            timeout).
**
****************************************************************************************/
uint8_t TbxMbOsalSemTake(tTbxMbOsalSem sem,
                         uint16_t      timeoutMs)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
  uint8_t result = TBX_FALSE;
 800552c:	2300      	movs	r3, #0
 800552e:	75fb      	strb	r3, [r7, #23]

  /* Verify parameters. */
  TBX_ASSERT(sem != NULL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d104      	bne.n	8005540 <TbxMbOsalSemTake+0x20>
 8005536:	f240 1125 	movw	r1, #293	; 0x125
 800553a:	4834      	ldr	r0, [pc, #208]	; (800560c <TbxMbOsalSemTake+0xec>)
 800553c:	f7fd f8ee 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (sem != NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d05d      	beq.n	8005602 <TbxMbOsalSemTake+0xe2>
  {
    /* Convert the semaphore pointer to the context structure. */
    tTbxMbOsalSemCtx * semCtx = (tTbxMbOsalSemCtx *)sem;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	613b      	str	r3, [r7, #16]
    /* Sanity check on the context type. */
    TBX_ASSERT(semCtx->type == TBX_MB_OSAL_SEM_CONTEXT_TYPE);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b4c      	cmp	r3, #76	; 0x4c
 8005550:	d004      	beq.n	800555c <TbxMbOsalSemTake+0x3c>
 8005552:	f240 112d 	movw	r1, #301	; 0x12d
 8005556:	482d      	ldr	r0, [pc, #180]	; (800560c <TbxMbOsalSemTake+0xec>)
 8005558:	f7fd f8e0 	bl	800271c <TbxAssertTrigger>
    /* Is the semaphore currently available? */
    TbxCriticalSectionEnter();
 800555c:	f7fd f8f4 	bl	8002748 <TbxCriticalSectionEnter>
    if (semCtx->count > 0U)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	785b      	ldrb	r3, [r3, #1]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <TbxMbOsalSemTake+0x54>
    {
      /* Take the semaphore and update the result for success. */
      semCtx->count = 0U;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2200      	movs	r2, #0
 800556c:	705a      	strb	r2, [r3, #1]
      result = TBX_TRUE;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
 8005572:	e044      	b.n	80055fe <TbxMbOsalSemTake+0xde>
     * before the specified timeout. 
     */
    else
    {
      /* Keep track of when the last millisecond was detected. */
      uint16_t volatile lastMsTickTime = TbxMbPortTimerCount();
 8005574:	f7fd ffd0 	bl	8003518 <TbxMbPortTimerCount>
 8005578:	4603      	mov	r3, r0
 800557a:	817b      	strh	r3, [r7, #10]
      /* Initialize variable with the actual number of milliseconds to wait. */
      uint16_t volatile waitTimeMs = timeoutMs;
 800557c:	887b      	ldrh	r3, [r7, #2]
 800557e:	813b      	strh	r3, [r7, #8]
      /* Enter wait loop. */
      while (waitTimeMs > 0U)
 8005580:	e039      	b.n	80055f6 <TbxMbOsalSemTake+0xd6>
      {
        /* Temporarily leave the critical section. */
        TbxCriticalSectionExit();
 8005582:	f7fd f8fb 	bl	800277c <TbxCriticalSectionExit>
        /* Run the event task to make sure that whatever is supposed to give the
         * semaphore can actually do so.
         */
        TbxMbEventTask();
 8005586:	f7fd fefb 	bl	8003380 <TbxMbEventTask>
        /* Get the number of ticks that elapsed since the last millisecond detection. 
         * Note that this calculation works, even if the 20 kHz timer counter
         * overflowed.
         */
        uint16_t deltaTicks = TbxMbPortTimerCount() - lastMsTickTime;
 800558a:	f7fd ffc5 	bl	8003518 <TbxMbPortTimerCount>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	897b      	ldrh	r3, [r7, #10]
 8005594:	b29b      	uxth	r3, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	81fb      	strh	r3, [r7, #14]
        /* Determine how many milliseconds passed since the last one was detected. */
        uint16_t deltaMs = deltaTicks / 20U;
 800559a:	89fb      	ldrh	r3, [r7, #14]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <TbxMbOsalSemTake+0xf0>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	091b      	lsrs	r3, r3, #4
 80055a4:	81bb      	strh	r3, [r7, #12]
        /* Did one or more milliseconds pass? */
        if (deltaMs > 0U)
 80055a6:	89bb      	ldrh	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d018      	beq.n	80055de <TbxMbOsalSemTake+0xbe>
        {
          /* Update the last millisecond detection tick time. Needed for the detection
           * of the next millisecond. Note that this calculation works, even if the
           * lastMsTickTime variable overflows.
           */
          lastMsTickTime += (deltaMs * 20U);
 80055ac:	89bb      	ldrh	r3, [r7, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	0092      	lsls	r2, r2, #2
 80055b2:	4413      	add	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	897b      	ldrh	r3, [r7, #10]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4413      	add	r3, r2
 80055be:	b29b      	uxth	r3, r3
 80055c0:	817b      	strh	r3, [r7, #10]
          /* Subtract the elapsed milliseconds from the remaining wait time, with
           * underflow protection. Note that the wait loop automatically stops when
           * waitTimeMs becomes zero.
           */
          if (waitTimeMs >= deltaMs)
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	89ba      	ldrh	r2, [r7, #12]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d806      	bhi.n	80055da <TbxMbOsalSemTake+0xba>
          {
            waitTimeMs -= deltaMs;
 80055cc:	893b      	ldrh	r3, [r7, #8]
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	89bb      	ldrh	r3, [r7, #12]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	813b      	strh	r3, [r7, #8]
 80055d8:	e001      	b.n	80055de <TbxMbOsalSemTake+0xbe>
          }
          else
          {
            waitTimeMs = 0U;
 80055da:	2300      	movs	r3, #0
 80055dc:	813b      	strh	r3, [r7, #8]
          }
        }
        /* Re-enter the critical section. */
        TbxCriticalSectionEnter();
 80055de:	f7fd f8b3 	bl	8002748 <TbxCriticalSectionEnter>
        /* Did the semaphore become available? */
        if (semCtx->count > 0U)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <TbxMbOsalSemTake+0xd6>
        {
          /* Take the semaphore, update the result for success, and leave the loop. */
          semCtx->count = 0U;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2200      	movs	r2, #0
 80055ee:	705a      	strb	r2, [r3, #1]
          result = TBX_TRUE;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
          break;
 80055f4:	e003      	b.n	80055fe <TbxMbOsalSemTake+0xde>
      while (waitTimeMs > 0U)
 80055f6:	893b      	ldrh	r3, [r7, #8]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1c1      	bne.n	8005582 <TbxMbOsalSemTake+0x62>
        }
      }
    }
    TbxCriticalSectionExit();
 80055fe:	f7fd f8bd 	bl	800277c <TbxCriticalSectionExit>
  }
  /* Give the result back to the caller. */
  return result;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
} /*** end of TbxMbOsalSemTake ****/
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08005948 	.word	0x08005948
 8005610:	cccccccd 	.word	0xcccccccd

08005614 <TbxMbUartInit>:
                   tTbxMbUartDatabits         databits, 
                   tTbxMbUartStopbits         stopbits,
                   tTbxMbUartParity           parity,
                   tTbxMbUartTransmitComplete transmitCompleteFcn,
                   tTbxMbUartDataReceived     dataReceivedFcn)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b085      	sub	sp, #20
 8005618:	af02      	add	r7, sp, #8
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	4623      	mov	r3, r4
 8005624:	71fb      	strb	r3, [r7, #7]
 8005626:	4603      	mov	r3, r0
 8005628:	71bb      	strb	r3, [r7, #6]
 800562a:	460b      	mov	r3, r1
 800562c:	717b      	strb	r3, [r7, #5]
 800562e:	4613      	mov	r3, r2
 8005630:	713b      	strb	r3, [r7, #4]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	2b07      	cmp	r3, #7
 8005636:	d80b      	bhi.n	8005650 <TbxMbUartInit+0x3c>
 8005638:	79bb      	ldrb	r3, [r7, #6]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d808      	bhi.n	8005650 <TbxMbUartInit+0x3c>
 800563e:	797b      	ldrb	r3, [r7, #5]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d805      	bhi.n	8005650 <TbxMbUartInit+0x3c>
 8005644:	793b      	ldrb	r3, [r7, #4]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d802      	bhi.n	8005650 <TbxMbUartInit+0x3c>
 800564a:	7e3b      	ldrb	r3, [r7, #24]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d903      	bls.n	8005658 <TbxMbUartInit+0x44>
 8005650:	2151      	movs	r1, #81	; 0x51
 8005652:	4815      	ldr	r0, [pc, #84]	; (80056a8 <TbxMbUartInit+0x94>)
 8005654:	f7fd f862 	bl	800271c <TbxAssertTrigger>
             (databits < TBX_MB_UART_NUM_DATABITS) &&
             (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
             (parity < TBX_MB_UART_NUM_PARITY));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	2b07      	cmp	r3, #7
 800565c:	d81f      	bhi.n	800569e <TbxMbUartInit+0x8a>
 800565e:	79bb      	ldrb	r3, [r7, #6]
 8005660:	2b07      	cmp	r3, #7
 8005662:	d81c      	bhi.n	800569e <TbxMbUartInit+0x8a>
      (baudrate < TBX_MB_UART_NUM_BAUDRATE) &&
 8005664:	797b      	ldrb	r3, [r7, #5]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d819      	bhi.n	800569e <TbxMbUartInit+0x8a>
      (databits < TBX_MB_UART_NUM_DATABITS) &&
 800566a:	793b      	ldrb	r3, [r7, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d816      	bhi.n	800569e <TbxMbUartInit+0x8a>
      (stopbits < TBX_MB_UART_NUM_STOPBITS) &&
 8005670:	7e3b      	ldrb	r3, [r7, #24]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d813      	bhi.n	800569e <TbxMbUartInit+0x8a>
      (parity < TBX_MB_UART_NUM_PARITY))
  {
    /* Store the specified callback functions. */
    uartInfo[port].transmitCompleteFcn = transmitCompleteFcn;
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	490c      	ldr	r1, [pc, #48]	; (80056ac <TbxMbUartInit+0x98>)
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    uartInfo[port].dataReceivedFcn = dataReceivedFcn;
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <TbxMbUartInit+0x98>)
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4413      	add	r3, r2
 8005688:	6a3a      	ldr	r2, [r7, #32]
 800568a:	605a      	str	r2, [r3, #4]
    /* Request the port module to perform the low-level UART initialization. */
    TbxMbPortUartInit(port, baudrate, databits, stopbits, parity);
 800568c:	793c      	ldrb	r4, [r7, #4]
 800568e:	797a      	ldrb	r2, [r7, #5]
 8005690:	79b9      	ldrb	r1, [r7, #6]
 8005692:	79f8      	ldrb	r0, [r7, #7]
 8005694:	7e3b      	ldrb	r3, [r7, #24]
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	4623      	mov	r3, r4
 800569a:	f7fd ff05 	bl	80034a8 <TbxMbPortUartInit>
  }
} /*** end of TbxMbUartInit ***/  
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}
 80056a6:	bf00      	nop
 80056a8:	08005978 	.word	0x08005978
 80056ac:	20000a10 	.word	0x20000a10

080056b0 <TbxMbUartTransmit>:
**
****************************************************************************************/
uint8_t TbxMbUartTransmit(tTbxMbUartPort         port, 
                          uint8_t        const * data, 
                          uint16_t               len)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	6039      	str	r1, [r7, #0]
 80056ba:	71fb      	strb	r3, [r7, #7]
 80056bc:	4613      	mov	r3, r2
 80056be:	80bb      	strh	r3, [r7, #4]
  uint8_t result = TBX_ERROR;
 80056c0:	2300      	movs	r3, #0
 80056c2:	73fb      	strb	r3, [r7, #15]

  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	2b07      	cmp	r3, #7
 80056c8:	d805      	bhi.n	80056d6 <TbxMbUartTransmit+0x26>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <TbxMbUartTransmit+0x26>
 80056d0:	88bb      	ldrh	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <TbxMbUartTransmit+0x2e>
 80056d6:	217b      	movs	r1, #123	; 0x7b
 80056d8:	480c      	ldr	r0, [pc, #48]	; (800570c <TbxMbUartTransmit+0x5c>)
 80056da:	f7fd f81f 	bl	800271c <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b07      	cmp	r3, #7
 80056e2:	d80d      	bhi.n	8005700 <TbxMbUartTransmit+0x50>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <TbxMbUartTransmit+0x50>
      (data != NULL) &&
 80056ea:	88bb      	ldrh	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <TbxMbUartTransmit+0x50>
      (len > 0U))
  {
    /* Request the port module to perform the low-level UART data transmission. */
    result = TbxMbPortUartTransmit(port, data, len);
 80056f0:	88ba      	ldrh	r2, [r7, #4]
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd fef2 	bl	80034e0 <TbxMbPortUartTransmit>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
  }
  /* Give the result back to the caller. */
  return result;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
} /*** end of TbxMbUartTransmit ***/
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	08005978 	.word	0x08005978

08005710 <TbxMbUartTransmitComplete>:
**            interrupt level.
** \param     port The serial port that the transfer completed on.
**
****************************************************************************************/
void TbxMbUartTransmitComplete(tTbxMbUartPort port)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	71fb      	strb	r3, [r7, #7]
  /* Verify parameters. */
  TBX_ASSERT(port < TBX_MB_UART_NUM_PORT);
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	2b07      	cmp	r3, #7
 800571e:	d903      	bls.n	8005728 <TbxMbUartTransmitComplete+0x18>
 8005720:	2197      	movs	r1, #151	; 0x97
 8005722:	480b      	ldr	r0, [pc, #44]	; (8005750 <TbxMbUartTransmitComplete+0x40>)
 8005724:	f7fc fffa 	bl	800271c <TbxAssertTrigger>

  /* Only continue with valid parameters. */
  if (port < TBX_MB_UART_NUM_PORT)
 8005728:	79fb      	ldrb	r3, [r7, #7]
 800572a:	2b07      	cmp	r3, #7
 800572c:	d80c      	bhi.n	8005748 <TbxMbUartTransmitComplete+0x38>
  {
    /* Pass the event on to the transport layer for further handling. */
    if (uartInfo[port].transmitCompleteFcn != NULL)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	4a08      	ldr	r2, [pc, #32]	; (8005754 <TbxMbUartTransmitComplete+0x44>)
 8005732:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <TbxMbUartTransmitComplete+0x38>
    {
      uartInfo[port].transmitCompleteFcn(port);
 800573a:	79fb      	ldrb	r3, [r7, #7]
 800573c:	4a05      	ldr	r2, [pc, #20]	; (8005754 <TbxMbUartTransmitComplete+0x44>)
 800573e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005742:	79fa      	ldrb	r2, [r7, #7]
 8005744:	4610      	mov	r0, r2
 8005746:	4798      	blx	r3
    }
  }
} /*** end of TbxMbUartTransmitComplete ***/
 8005748:	bf00      	nop
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	08005978 	.word	0x08005978
 8005754:	20000a10 	.word	0x20000a10

08005758 <TbxMbUartDataReceived>:
**
****************************************************************************************/
void TbxMbUartDataReceived(tTbxMbUartPort         port, 
                           uint8_t        const * data, 
                           uint8_t                len)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	4603      	mov	r3, r0
 8005760:	6039      	str	r1, [r7, #0]
 8005762:	71fb      	strb	r3, [r7, #7]
 8005764:	4613      	mov	r3, r2
 8005766:	71bb      	strb	r3, [r7, #6]
  /* Verify parameters. */
  TBX_ASSERT((port < TBX_MB_UART_NUM_PORT) && 
 8005768:	79fb      	ldrb	r3, [r7, #7]
 800576a:	2b07      	cmp	r3, #7
 800576c:	d805      	bhi.n	800577a <TbxMbUartDataReceived+0x22>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <TbxMbUartDataReceived+0x22>
 8005774:	79bb      	ldrb	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d103      	bne.n	8005782 <TbxMbUartDataReceived+0x2a>
 800577a:	21b3      	movs	r1, #179	; 0xb3
 800577c:	480f      	ldr	r0, [pc, #60]	; (80057bc <TbxMbUartDataReceived+0x64>)
 800577e:	f7fc ffcd 	bl	800271c <TbxAssertTrigger>
             (data != NULL) &&
             (len > 0U));

  /* Only continue with valid parameters. */
  if ((port < TBX_MB_UART_NUM_PORT) && 
 8005782:	79fb      	ldrb	r3, [r7, #7]
 8005784:	2b07      	cmp	r3, #7
 8005786:	d815      	bhi.n	80057b4 <TbxMbUartDataReceived+0x5c>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d012      	beq.n	80057b4 <TbxMbUartDataReceived+0x5c>
      (data != NULL) &&
 800578e:	79bb      	ldrb	r3, [r7, #6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00f      	beq.n	80057b4 <TbxMbUartDataReceived+0x5c>
      (len > 0U))
  {
    /* Pass the event on to the transport layer for further handling. */
    if (uartInfo[port].dataReceivedFcn != NULL)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	4a0a      	ldr	r2, [pc, #40]	; (80057c0 <TbxMbUartDataReceived+0x68>)
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <TbxMbUartDataReceived+0x5c>
    {
      uartInfo[port].dataReceivedFcn(port, data, len);
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	4a06      	ldr	r2, [pc, #24]	; (80057c0 <TbxMbUartDataReceived+0x68>)
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	79ba      	ldrb	r2, [r7, #6]
 80057ae:	79f8      	ldrb	r0, [r7, #7]
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	4798      	blx	r3
    }
  }
} /*** end of TbxMbUartDataReceived ***/
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	08005978 	.word	0x08005978
 80057c0:	20000a10 	.word	0x20000a10

080057c4 <memset>:
 80057c4:	4402      	add	r2, r0
 80057c6:	4603      	mov	r3, r0
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d100      	bne.n	80057ce <memset+0xa>
 80057cc:	4770      	bx	lr
 80057ce:	f803 1b01 	strb.w	r1, [r3], #1
 80057d2:	e7f9      	b.n	80057c8 <memset+0x4>

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f000 f818 	bl	800581c <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08005bc4 	.word	0x08005bc4
 8005810:	08005bc4 	.word	0x08005bc4
 8005814:	08005bc4 	.word	0x08005bc4
 8005818:	08005bc8 	.word	0x08005bc8

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
